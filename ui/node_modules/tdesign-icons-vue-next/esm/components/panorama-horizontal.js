import { _ as _defineProperty } from '../_chunks/dep-d5259624.js';
import { defineComponent, computed } from 'vue';
import renderFn from '../utils/render-fn.js';
import useSizeProps from '../utils/use-size-props.js';
import '../style/css.js';
import '../utils/use-common-classname.js';
import '../utils/config-context.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var element = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 24 24",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M23 3.16v17.68l-1.29-.38-.05-.02a22.92 22.92 0 00-.77-.2c-.53-.14-1.3-.33-2.21-.5A35.14 35.14 0 0012 19c-2.4 0-4.84.36-6.68.73a42.23 42.23 0 00-2.98.71l-.04.01h-.01l-1.29.4V3.14l1.29.4h.05a17.48 17.48 0 00.77.22c.53.13 1.3.32 2.21.5C7.16 4.64 9.6 5 12 5c2.4 0 4.84-.36 6.68-.73a42.24 42.24 0 002.98-.71l.04-.01h.01l1.29-.4zM21 5.8A37.12 37.12 0 0112 7a37.12 37.12 0 01-9-1.2v12.4a37.12 37.12 0 019-1.2 37.12 37.12 0 019 1.2V5.8z"
    }
  }]
};
var panoramaHorizontal = defineComponent({
  name: "PanoramaHorizontalIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-panorama-horizontal", className.value]);
    var finalStyle = computed(() => _objectSpread(_objectSpread({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: e => {
        var _props$onClick;
        return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
          e
        });
      }
    }));
    return () => renderFn(element, finalProps.value);
  }
});

export default panoramaHorizontal;
//# sourceMappingURL=panorama-horizontal.js.map
