declare const _default: import("vue").DefineComponent<{
    autofocus: BooleanConstructor;
    borderless: BooleanConstructor;
    checkProps: {
        type: import("vue").PropType<import("..").TdCheckboxProps>;
    };
    checkStrictly: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            value: import("..").TreeOptionData<string | number>[];
            collapsedSelectedItems: import("..").TreeOptionData<string | number>[];
            count: number;
            onClose: (context: {
                index: number;
                e?: MouseEvent;
            }) => void;
        }) => import("..").SlotReturnValue>;
    };
    disabled: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    filter: {
        type: import("vue").PropType<(filterWords: string, node: import("./interface").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean | Promise<boolean>>;
    };
    filterable: BooleanConstructor;
    inputProps: {
        type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
    };
    keys: {
        type: import("vue").PropType<import("..").TreeKeysType>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    lazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    load: {
        type: import("vue").PropType<(node: import("./interface").TreeNodeModel<import("..").TreeOptionData<string | number>>) => Promise<import("..").TreeOptionData<string | number>[]>>;
    };
    loading: BooleanConstructor;
    loadingText: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    option: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            item: import("..").TreeOptionData<string | number>;
            index: number;
        }) => import("..").SlotReturnValue>;
    };
    options: {
        type: import("vue").PropType<import("..").TreeOptionData<string | number>[]>;
        default: () => import("..").TreeOptionData<string | number>[];
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    popupVisible: BooleanConstructor;
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    reserveKeyword: BooleanConstructor;
    selectInputProps: {
        type: import("vue").PropType<import("./interface").TdSelectInputProps>;
    };
    showAllLevels: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("..").SizeEnum>;
        default: import("..").SizeEnum;
        validator(val: import("..").SizeEnum): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    tagInputProps: {
        type: import("vue").PropType<import("..").TdTagInputProps>;
    };
    tagProps: {
        type: import("vue").PropType<import("..").TdTagProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    trigger: {
        type: import("vue").PropType<"click" | "hover">;
        default: "click" | "hover";
        validator(val: "click" | "hover"): boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").CascaderValue<import("..").TreeOptionData<string | number>>>;
        default: import("./type").CascaderValue<import("..").TreeOptionData<string | number>>;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").CascaderValue<import("..").TreeOptionData<string | number>>>;
        default: import("./type").CascaderValue<import("..").TreeOptionData<string | number>>;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").CascaderValue<import("..").TreeOptionData<string | number>>>;
        default: () => import("./type").CascaderValue<import("..").TreeOptionData<string | number>>;
    };
    valueDisplay: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: import("./type").CascaderValue<import("..").TreeOptionData<string | number>>;
            onClose: (index: number) => void;
            displayValue?: import("./type").CascaderValue<import("..").TreeOptionData<string | number>>;
            selectedOptions: import("..").TreeOptionData<string | number>[];
        }) => import("..").SlotReturnValue)>;
    };
    valueMode: {
        type: import("vue").PropType<"all" | "onlyLeaf" | "parentFirst">;
        default: "all" | "onlyLeaf" | "parentFirst";
        validator(val: "all" | "onlyLeaf" | "parentFirst"): boolean;
    };
    valueType: {
        type: import("vue").PropType<"full" | "single">;
        default: "full" | "single";
        validator(val: "full" | "single"): boolean;
    };
    onBlur: import("vue").PropType<(context: {
        value: import("./type").CascaderValue<import("..").TreeOptionData<string | number>>;
    } & import("..").PopupVisibleChangeContext & {
        inputValue: string;
        tagInputValue?: import("..").TagInputValue;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").CascaderValue<import("..").TreeOptionData<string | number>>, context: import("./type").CascaderChangeContext<import("..").TreeOptionData<string | number>>) => void>;
    onFocus: import("vue").PropType<(context: {
        value: import("./type").CascaderValue<import("..").TreeOptionData<string | number>>;
        e: FocusEvent;
    }) => void>;
    onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
    onRemove: import("vue").PropType<(context: import("./type").RemoveContext<import("..").TreeOptionData<string | number>>) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    autofocus: BooleanConstructor;
    borderless: BooleanConstructor;
    checkProps: {
        type: import("vue").PropType<import("..").TdCheckboxProps>;
    };
    checkStrictly: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            value: import("..").TreeOptionData<string | number>[];
            collapsedSelectedItems: import("..").TreeOptionData<string | number>[];
            count: number;
            onClose: (context: {
                index: number;
                e?: MouseEvent;
            }) => void;
        }) => import("..").SlotReturnValue>;
    };
    disabled: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    filter: {
        type: import("vue").PropType<(filterWords: string, node: import("./interface").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean | Promise<boolean>>;
    };
    filterable: BooleanConstructor;
    inputProps: {
        type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
    };
    keys: {
        type: import("vue").PropType<import("..").TreeKeysType>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    lazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    load: {
        type: import("vue").PropType<(node: import("./interface").TreeNodeModel<import("..").TreeOptionData<string | number>>) => Promise<import("..").TreeOptionData<string | number>[]>>;
    };
    loading: BooleanConstructor;
    loadingText: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    option: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            item: import("..").TreeOptionData<string | number>;
            index: number;
        }) => import("..").SlotReturnValue>;
    };
    options: {
        type: import("vue").PropType<import("..").TreeOptionData<string | number>[]>;
        default: () => import("..").TreeOptionData<string | number>[];
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    popupVisible: BooleanConstructor;
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    reserveKeyword: BooleanConstructor;
    selectInputProps: {
        type: import("vue").PropType<import("./interface").TdSelectInputProps>;
    };
    showAllLevels: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("..").SizeEnum>;
        default: import("..").SizeEnum;
        validator(val: import("..").SizeEnum): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    tagInputProps: {
        type: import("vue").PropType<import("..").TdTagInputProps>;
    };
    tagProps: {
        type: import("vue").PropType<import("..").TdTagProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    trigger: {
        type: import("vue").PropType<"click" | "hover">;
        default: "click" | "hover";
        validator(val: "click" | "hover"): boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").CascaderValue<import("..").TreeOptionData<string | number>>>;
        default: import("./type").CascaderValue<import("..").TreeOptionData<string | number>>;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").CascaderValue<import("..").TreeOptionData<string | number>>>;
        default: import("./type").CascaderValue<import("..").TreeOptionData<string | number>>;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").CascaderValue<import("..").TreeOptionData<string | number>>>;
        default: () => import("./type").CascaderValue<import("..").TreeOptionData<string | number>>;
    };
    valueDisplay: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: import("./type").CascaderValue<import("..").TreeOptionData<string | number>>;
            onClose: (index: number) => void;
            displayValue?: import("./type").CascaderValue<import("..").TreeOptionData<string | number>>;
            selectedOptions: import("..").TreeOptionData<string | number>[];
        }) => import("..").SlotReturnValue)>;
    };
    valueMode: {
        type: import("vue").PropType<"all" | "onlyLeaf" | "parentFirst">;
        default: "all" | "onlyLeaf" | "parentFirst";
        validator(val: "all" | "onlyLeaf" | "parentFirst"): boolean;
    };
    valueType: {
        type: import("vue").PropType<"full" | "single">;
        default: "full" | "single";
        validator(val: "full" | "single"): boolean;
    };
    onBlur: import("vue").PropType<(context: {
        value: import("./type").CascaderValue<import("..").TreeOptionData<string | number>>;
    } & import("..").PopupVisibleChangeContext & {
        inputValue: string;
        tagInputValue?: import("..").TagInputValue;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").CascaderValue<import("..").TreeOptionData<string | number>>, context: import("./type").CascaderChangeContext<import("..").TreeOptionData<string | number>>) => void>;
    onFocus: import("vue").PropType<(context: {
        value: import("./type").CascaderValue<import("..").TreeOptionData<string | number>>;
        e: FocusEvent;
    }) => void>;
    onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
    onRemove: import("vue").PropType<(context: import("./type").RemoveContext<import("..").TreeOptionData<string | number>>) => void>;
}>>, {
    max: number;
    value: string | number | import("..").TreeOptionData<string | number> | import("./type").CascaderValue<import("..").TreeOptionData<string | number>>[];
    loading: boolean;
    autofocus: boolean;
    lazy: boolean;
    disabled: boolean;
    multiple: boolean;
    options: import("..").TreeOptionData<string | number>[];
    size: import("..").SizeEnum;
    readonly: boolean;
    status: "error" | "default" | "success" | "warning";
    placeholder: string;
    trigger: "click" | "hover";
    modelValue: string | number | import("..").TreeOptionData<string | number> | import("./type").CascaderValue<import("..").TreeOptionData<string | number>>[];
    defaultValue: import("./type").CascaderValue<import("..").TreeOptionData<string | number>>;
    borderless: boolean;
    clearable: boolean;
    minCollapsedNum: number;
    popupVisible: boolean;
    reserveKeyword: boolean;
    valueType: "full" | "single";
    filterable: boolean;
    valueMode: "all" | "onlyLeaf" | "parentFirst";
    checkStrictly: boolean;
    showAllLevels: boolean;
}, {}>;
export default _default;
