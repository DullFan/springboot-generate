/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { toRefs, ref, computed, createVNode, mergeProps } from 'vue';
import isObject from 'lodash/isObject';
import { TagInput } from '../tag-input/index.js';
import { Loading } from '../loading/index.js';
import useDefaultValue from '../hooks/useDefaultValue.js';
import { usePrefixClass } from '../hooks/useConfig.js';
import { useFormDisabled } from '../form/hooks.js';
import '../tag-input/tag-input.js';
import 'tdesign-icons-vue-next';
import '../input/index.js';
import '../input/input.js';
import '../input/props.js';
import '../hooks/useGlobalIcon.js';
import '../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import 'lodash/isString';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_chunks/dep-8e5c228b.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-d3784887.js';
import 'dayjs';
import 'lodash/isArray';
import '../hooks/tnode.js';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import '../input/useInput.js';
import '../form/const.js';
import '../hooks/useVModel.js';
import '../input/useLengthLimit.js';
import '../_common/js/log/log.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/toConsumableArray';
import 'lodash/isNull';
import 'lodash/isUndefined';
import 'lodash/isNumber';
import '../input/useInputEventHandler.js';
import '../input/useInputWidth.js';
import '../hooks/useResizeObserver.js';
import '../input/input-group.js';
import '../input/input-group-props.js';
import '../utils/withInstall.js';
import '../tag-input/props.js';
import '../tag-input/hooks/useTagScroll.js';
import '../tag-input/useTagList.js';
import '../tag/index.js';
import '../tag/tag.js';
import 'tinycolor2';
import '../tag/props.js';
import '../tag/check-tag.js';
import '../tag/check-tag-props.js';
import '../_common/js/common.js';
import '../tag/check-tag-group.js';
import '../tag/check-tag-group-props.js';
import '../tag-input/hooks/useHover.js';
import '../tag-input/hooks/useDragSorter.js';
import '../loading/directive.js';
import 'lodash/mapKeys';
import 'lodash/isEqual';
import '../loading/plugin.js';
import '../loading/loading.js';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../utils/dom.js';
import '../utils/easing.js';
import '../loading/props.js';
import '../hooks/useTeleport.js';

var _excluded = ["tips"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var DEFAULT_KEYS = {
  label: "label",
  key: "key",
  children: "children"
};
function useMultiple(props, context, popupRef) {
  var _toRefs = toRefs(props),
    inputValue = _toRefs.inputValue;
  var classPrefix = usePrefixClass();
  var tagInputRef = ref();
  var isMultipleFocus = ref(props.autofocus);
  var _useDefault = useDefaultValue(inputValue, props.defaultInputValue, props.onInputChange, "inputValue"),
    _useDefault2 = _slicedToArray(_useDefault, 2),
    tInputValue = _useDefault2[0],
    setTInputValue = _useDefault2[1];
  var disable = useFormDisabled();
  var iKeys = computed(function () {
    return _objectSpread(_objectSpread({}, DEFAULT_KEYS), props.keys);
  });
  var tags = computed(function () {
    if (!(props.value instanceof Array)) {
      return isObject(props.value) ? [props.value[iKeys.value.label]] : [props.value];
    }
    return props.value.map(function (item) {
      return isObject(item) ? item[iKeys.value.label] : item;
    });
  });
  var tPlaceholder = computed(function () {
    return !tags.value || !tags.value.length ? props.placeholder : "";
  });
  var onTagInputChange = function onTagInputChange(val, context2) {
    var _props$onTagChange;
    if (context2.trigger === "tag-remove") {
      var _context2$e;
      (_context2$e = context2.e) === null || _context2$e === void 0 || _context2$e.stopPropagation();
    }
    (_props$onTagChange = props.onTagChange) === null || _props$onTagChange === void 0 || _props$onTagChange.call(props, val, context2);
  };
  var onInputChange = function onInputChange(val, ctx) {
    if (ctx.trigger === "enter" || ctx.trigger === "blur") return;
    setTInputValue(val, {
      trigger: ctx.trigger,
      e: ctx.e
    });
  };
  var onBlur = function onBlur(val, ctx) {
    var _popupRef$value, _props$onBlur;
    var overlayState = (_popupRef$value = popupRef.value) === null || _popupRef$value === void 0 ? void 0 : _popupRef$value.getOverlayState();
    if (overlayState !== null && overlayState !== void 0 && overlayState.hover) return;
    isMultipleFocus.value = false;
    (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, props.value, _objectSpread(_objectSpread({}, ctx), {}, {
      tagInputValue: val
    }));
  };
  var onFocus = function onFocus(val, ctx) {
    var _popupRef$value2, _props$onFocus;
    var overlayState = (_popupRef$value2 = popupRef.value) === null || _popupRef$value2 === void 0 ? void 0 : _popupRef$value2.getOverlayState();
    if (isMultipleFocus.value || overlayState !== null && overlayState !== void 0 && overlayState.hover) return;
    isMultipleFocus.value = true;
    var params = _objectSpread(_objectSpread({}, ctx), {}, {
      tagInputValue: val
    });
    (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, props.value, params);
  };
  var onEnter = function onEnter(val, ctx) {
    var _props$onEnter;
    var params = _objectSpread(_objectSpread({}, ctx), {}, {
      tagInputValue: val
    });
    (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 || _props$onEnter.call(props, props.value, params);
  };
  var renderSelectMultiple = function renderSelectMultiple(p) {
    var tagInputProps = _objectSpread(_objectSpread({}, p.commonInputProps), {}, {
      tagProps: props.tagProps,
      label: props.label,
      autoWidth: props.autoWidth,
      readonly: props.readonly,
      placeholder: tPlaceholder.value,
      minCollapsedNum: props.minCollapsedNum,
      collapsedItems: props.collapsedItems,
      tag: props.tag,
      value: tags.value,
      valueDisplay: props.valueDisplay,
      inputValue: p.popupVisible && p.allowInput ? tInputValue.value : "",
      inputProps: _objectSpread({
        readonly: !props.allowInput || props.readonly,
        inputClass: _defineProperty({}, "".concat(classPrefix.value, "-input--focused"), p.popupVisible)
      }, props.inputProps),
      suffixIcon: !disable.value && props.loading ? function () {
        return createVNode(Loading, {
          "loading": true,
          "size": "small"
        }, null);
      } : props.suffixIcon
    }, props.tagInputProps);
    var _context$slots = context.slots;
      _context$slots.tips;
      var slots = _objectWithoutProperties(_context$slots, _excluded);
    return createVNode(TagInput, mergeProps({
      "ref": tagInputRef
    }, tagInputProps, {
      "onInputChange": onInputChange,
      "onChange": onTagInputChange,
      "onClear": p.onInnerClear,
      "onBlur": onBlur,
      "onEnter": onEnter,
      "onFocus": onFocus
    }), slots);
  };
  return {
    tags: tags,
    tPlaceholder: tPlaceholder,
    tagInputRef: tagInputRef,
    isMultipleFocus: isMultipleFocus,
    multipleInputValue: tInputValue,
    renderSelectMultiple: renderSelectMultiple
  };
}

export { useMultiple as default };
//# sourceMappingURL=useMultiple.js.map
