/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { toRefs, ref, computed, createVNode, mergeProps } from 'vue';
import isObject from 'lodash/isObject';
import pick from 'lodash/pick';
import { Input } from '../input/index.js';
import { Loading } from '../loading/index.js';
import { useTNodeJSX } from '../hooks/tnode.js';
import { usePrefixClass } from '../hooks/useConfig.js';
import useDefaultValue from '../hooks/useDefaultValue.js';
import { useFormDisabled } from '../form/hooks.js';
import '../input/input.js';
import 'tdesign-icons-vue-next';
import '../input/props.js';
import '../hooks/useGlobalIcon.js';
import '../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import 'lodash/isString';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_chunks/dep-8e5c228b.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-d3784887.js';
import 'dayjs';
import 'lodash/isArray';
import '../input/useInput.js';
import '../form/const.js';
import '../hooks/useVModel.js';
import 'lodash/kebabCase';
import '../input/useLengthLimit.js';
import '../_common/js/log/log.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/toConsumableArray';
import 'lodash/isNull';
import 'lodash/isUndefined';
import 'lodash/isNumber';
import '../input/useInputEventHandler.js';
import '../input/useInputWidth.js';
import '../hooks/useResizeObserver.js';
import 'lodash/camelCase';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import '../input/input-group.js';
import '../input/input-group-props.js';
import '../utils/withInstall.js';
import '../loading/directive.js';
import 'lodash/mapKeys';
import 'lodash/isEqual';
import '../loading/plugin.js';
import '../loading/loading.js';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../utils/dom.js';
import '../utils/easing.js';
import '../loading/props.js';
import '../hooks/useTeleport.js';

var _excluded = ["tips"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var COMMON_PROPERTIES = ["status", "clearable", "disabled", "label", "placeholder", "readonly", "suffix", "suffixIcon", "onPaste", "onMouseenter", "onMouseleave"];
var DEFAULT_KEYS = {
  label: "label",
  value: "value",
  children: "children"
};
function getInputValue(value, keys) {
  var iKeys = _objectSpread(_objectSpread({}, DEFAULT_KEYS), keys);
  return isObject(value) ? value[iKeys.label] : value;
}
function useSingle(props, context, popupRef) {
  var _props$defaultInputVa;
  var _toRefs = toRefs(props),
    value = _toRefs.value,
    keys = _toRefs.keys,
    propsInputValue = _toRefs.inputValue;
  var classPrefix = usePrefixClass();
  var isSingleFocus = ref(props.autofocus);
  var inputRef = ref();
  var _useDefaultValue = useDefaultValue(propsInputValue, (_props$defaultInputVa = props.defaultInputValue) !== null && _props$defaultInputVa !== void 0 ? _props$defaultInputVa : "", props.onInputChange, "inputValue"),
    _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
    inputValue = _useDefaultValue2[0],
    setInputValue = _useDefaultValue2[1];
  var renderTNode = useTNodeJSX();
  var disable = useFormDisabled();
  var commonInputProps = computed(function () {
    return _objectSpread(_objectSpread({}, pick(props, COMMON_PROPERTIES)), {}, {
      disabled: disable.value
    });
  });
  var onInnerClear = function onInnerClear(context2) {
    var _context2$e, _props$onClear;
    context2 === null || context2 === void 0 || (_context2$e = context2.e) === null || _context2$e === void 0 || _context2$e.stopPropagation();
    (_props$onClear = props.onClear) === null || _props$onClear === void 0 || _props$onClear.call(props, context2);
    setInputValue("", {
      trigger: "clear"
    });
  };
  var onInnerInputChange = function onInnerInputChange(value2, context2) {
    if (props.allowInput) {
      setInputValue(value2, _objectSpread(_objectSpread({}, context2), {}, {
        trigger: context2.trigger || "input"
      }));
    }
  };
  var renderSelectSingle = function renderSelectSingle(popupVisible) {
    var _context$attrs;
    var singleValueDisplay = renderTNode("valueDisplay");
    var displayedValue = popupVisible && props.allowInput ? inputValue.value : getInputValue(value.value, keys.value);
    var prefixContent = renderPrefixContent(singleValueDisplay, popupVisible);
    var inputProps = _objectSpread(_objectSpread({}, commonInputProps.value), {}, {
      value: renderInputDisplay(singleValueDisplay, displayedValue, popupVisible),
      label: prefixContent.length ? function () {
        return prefixContent;
      } : void 0,
      autoWidth: props.autoWidth,
      readonly: !props.allowInput || props.readonly,
      placeholder: renderPlaceholder(singleValueDisplay),
      suffixIcon: !disable.value && props.loading ? function () {
        return createVNode(Loading, {
          "loading": true,
          "size": "small"
        }, null);
      } : props.suffixIcon,
      showClearIconOnEmpty: Boolean(props.clearable && (inputValue.value || displayedValue) && !disable.value && !props.readonly)
    }, props.inputProps);
    var _context$slots = context.slots;
      _context$slots.tips;
      var slots = _objectWithoutProperties(_context$slots, _excluded);
    var inputClassProps = popupVisible ? ["".concat(classPrefix.value, "-input--focused"), "".concat(classPrefix.value, "-is-focused"), inputProps === null || inputProps === void 0 ? void 0 : inputProps.inputClass] : inputProps === null || inputProps === void 0 ? void 0 : inputProps.inputClass;
    var onEnter = function onEnter(val, context2) {
      var _props$onEnter;
      (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 || _props$onEnter.call(props, value.value, _objectSpread(_objectSpread({}, context2), {}, {
        inputValue: val
      }));
    };
    var onFocus = function onFocus(val, context2) {
      var _popupRef$value, _props$onFocus;
      var overlayState = (_popupRef$value = popupRef.value) === null || _popupRef$value === void 0 ? void 0 : _popupRef$value.getOverlayState();
      if (isSingleFocus.value || overlayState !== null && overlayState !== void 0 && overlayState.hover) return;
      isSingleFocus.value = true;
      (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, value.value, _objectSpread(_objectSpread({}, context2), {}, {
        inputValue: val
      }));
    };
    var onBlur = function onBlur(val, context2) {
      var _popupRef$value2, _props$onBlur;
      var overlayState = (_popupRef$value2 = popupRef.value) === null || _popupRef$value2 === void 0 ? void 0 : _popupRef$value2.getOverlayState();
      if (overlayState !== null && overlayState !== void 0 && overlayState.hover) return;
      isSingleFocus.value = false;
      (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, value.value, _objectSpread(_objectSpread({}, context2), {}, {
        inputValue: val
      }));
    };
    return createVNode(Input, mergeProps({
      "ref": inputRef,
      "style": (_context$attrs = context.attrs) === null || _context$attrs === void 0 ? void 0 : _context$attrs.style
    }, _objectSpread({
      onChange: onInnerInputChange,
      onClear: onInnerClear,
      onEnter: onEnter,
      onFocus: onFocus,
      onBlur: onBlur
    }, inputProps), {
      "inputClass": inputClassProps
    }), slots);
  };
  var renderPrefixContent = function renderPrefixContent(singleValueDisplay, popupVisible) {
    var label = renderTNode("label");
    if (!label && !singleValueDisplay) {
      return [];
    }
    if (singleValueDisplay) {
      var _props$valueDisplayOp, _props$valueDisplayOp2;
      if ((_props$valueDisplayOp = props.valueDisplayOptions) !== null && _props$valueDisplayOp !== void 0 && _props$valueDisplayOp.usePlaceholder && !value.value || (_props$valueDisplayOp2 = props.valueDisplayOptions) !== null && _props$valueDisplayOp2 !== void 0 && _props$valueDisplayOp2.useInputDisplay && popupVisible) {
        return [label];
      }
    }
    return [label, singleValueDisplay];
  };
  var renderInputDisplay = function renderInputDisplay(singleValueDisplay, displayedValue, popupVisible) {
    if (singleValueDisplay) {
      var _props$valueDisplayOp3, _props$valueDisplayOp4;
      if (!((_props$valueDisplayOp3 = props.valueDisplayOptions) !== null && _props$valueDisplayOp3 !== void 0 && _props$valueDisplayOp3.useInputDisplay) || (_props$valueDisplayOp4 = props.valueDisplayOptions) !== null && _props$valueDisplayOp4 !== void 0 && _props$valueDisplayOp4.useInputDisplay && !popupVisible) {
        return void 0;
      }
    }
    return displayedValue;
  };
  var renderPlaceholder = function renderPlaceholder(singleValueDisplay) {
    if (singleValueDisplay) {
      var _props$valueDisplayOp5, _props$valueDisplayOp6;
      if (!((_props$valueDisplayOp5 = props.valueDisplayOptions) !== null && _props$valueDisplayOp5 !== void 0 && _props$valueDisplayOp5.usePlaceholder) || (_props$valueDisplayOp6 = props.valueDisplayOptions) !== null && _props$valueDisplayOp6 !== void 0 && _props$valueDisplayOp6.usePlaceholder && value.value) {
        return "";
      }
    }
    return props.placeholder;
  };
  return {
    inputRef: inputRef,
    isSingleFocus: isSingleFocus,
    commonInputProps: commonInputProps,
    singleInputValue: inputValue,
    onInnerClear: onInnerClear,
    renderSelectSingle: renderSelectSingle
  };
}

export { useSingle as default };
//# sourceMappingURL=useSingle.js.map
