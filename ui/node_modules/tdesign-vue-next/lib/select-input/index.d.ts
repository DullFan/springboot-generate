import { TdSelectInputProps } from './type';
import './style';
export * from './type';
export declare type SelectInputProps = TdSelectInputProps;
export declare const SelectInput: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        valueDisplayOptions: {
            type: import("vue").PropType<import("./useSingle").SelectInputValueDisplayOptions>;
        };
        allowInput: BooleanConstructor;
        autoWidth: BooleanConstructor;
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: import("./type").SelectInputValue;
                collapsedSelectedItems: import("./type").SelectInputValue;
                count: number;
                onClose: (context: {
                    index: number;
                    e?: MouseEvent;
                }) => void;
            }) => import("..").SlotReturnValue>;
        };
        disabled: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        inputValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        defaultInputValue: {
            type: import("vue").PropType<string>;
        };
        keys: {
            type: import("vue").PropType<import("./type").SelectInputKeys>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        loading: BooleanConstructor;
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        panel: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        popupVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultPopupVisible: BooleanConstructor;
        readonly: BooleanConstructor;
        reserveKeyword: BooleanConstructor;
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        tag: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: string | number;
            }) => import("..").SlotReturnValue)>;
        };
        tagInputProps: {
            type: import("vue").PropType<import("..").TdTagInputProps>;
        };
        tagProps: {
            type: import("vue").PropType<import("..").TdTagProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").SelectInputValue>;
            default: import("./type").SelectInputValue;
        };
        valueDisplay: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: import("..").TagInputValue;
                onClose: (index: number, item?: any) => void;
            }) => import("..").SlotReturnValue)>;
        };
        onBlur: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputBlurContext) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onEnter: import("vue").PropType<(value: import("./type").SelectInputValue, context: {
            e: KeyboardEvent;
            inputValue: string;
            tagInputValue?: import("..").TagInputValue;
        }) => void>;
        onFocus: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void>;
        onInputChange: import("vue").PropType<(value: string, context?: import("./type").SelectInputValueChangeContext) => void>;
        onMouseenter: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onMouseleave: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPaste: import("vue").PropType<(context: {
            e: ClipboardEvent;
            pasteValue: string;
        }) => void>;
        onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
        onTagChange: import("vue").PropType<(value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void>;
    }>>, {
        classPrefix: import("vue").ComputedRef<string>;
        NAME_CLASS: import("vue").ComputedRef<string>;
        innerPopupVisible: import("vue").Ref<boolean>;
        commonInputProps: import("vue").ComputedRef<import("./interface").SelectInputCommonProperties>;
        tOverlayInnerStyle: import("vue").ComputedRef<import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles)>;
        selectInputRef: import("vue").Ref<any>;
        popupRef: import("vue").Ref<import("..").PopupInstanceFunctions>;
        classes: import("vue").ComputedRef<(string | {
            [x: string]: boolean;
        })[]>;
        onInnerClear: (context: {
            e: MouseEvent;
        }) => void;
        renderTNodeJSX: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
        renderSelectSingle: (popupVisible: boolean) => JSX.Element;
        renderSelectMultiple: (p: import("./useMultiple").RenderSelectMultipleParams) => JSX.Element;
        onOverlayClick: (context: {
            e: MouseEvent;
        }) => void;
        onInnerPopupVisibleChange: (visible: boolean, ctx: import("..").PopupVisibleChangeContext) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        valueDisplayOptions: {
            type: import("vue").PropType<import("./useSingle").SelectInputValueDisplayOptions>;
        };
        allowInput: BooleanConstructor;
        autoWidth: BooleanConstructor;
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: import("./type").SelectInputValue;
                collapsedSelectedItems: import("./type").SelectInputValue;
                count: number;
                onClose: (context: {
                    index: number;
                    e?: MouseEvent;
                }) => void;
            }) => import("..").SlotReturnValue>;
        };
        disabled: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        inputValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        defaultInputValue: {
            type: import("vue").PropType<string>;
        };
        keys: {
            type: import("vue").PropType<import("./type").SelectInputKeys>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        loading: BooleanConstructor;
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        panel: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        popupVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultPopupVisible: BooleanConstructor;
        readonly: BooleanConstructor;
        reserveKeyword: BooleanConstructor;
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        tag: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: string | number;
            }) => import("..").SlotReturnValue)>;
        };
        tagInputProps: {
            type: import("vue").PropType<import("..").TdTagInputProps>;
        };
        tagProps: {
            type: import("vue").PropType<import("..").TdTagProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").SelectInputValue>;
            default: import("./type").SelectInputValue;
        };
        valueDisplay: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: import("..").TagInputValue;
                onClose: (index: number, item?: any) => void;
            }) => import("..").SlotReturnValue)>;
        };
        onBlur: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputBlurContext) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onEnter: import("vue").PropType<(value: import("./type").SelectInputValue, context: {
            e: KeyboardEvent;
            inputValue: string;
            tagInputValue?: import("..").TagInputValue;
        }) => void>;
        onFocus: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void>;
        onInputChange: import("vue").PropType<(value: string, context?: import("./type").SelectInputValueChangeContext) => void>;
        onMouseenter: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onMouseleave: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPaste: import("vue").PropType<(context: {
            e: ClipboardEvent;
            pasteValue: string;
        }) => void>;
        onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
        onTagChange: import("vue").PropType<(value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void>;
    }>>, {
        value: string | number | boolean | Object | any[] | Date | import("./type").SelectInputValue[];
        loading: boolean;
        autofocus: boolean;
        disabled: boolean;
        multiple: boolean;
        readonly: boolean;
        status: "error" | "default" | "success" | "warning";
        placeholder: string;
        autoWidth: boolean;
        borderless: boolean;
        clearable: boolean;
        inputValue: string;
        minCollapsedNum: number;
        allowInput: boolean;
        popupVisible: boolean;
        defaultPopupVisible: boolean;
        reserveKeyword: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        valueDisplayOptions: {
            type: import("vue").PropType<import("./useSingle").SelectInputValueDisplayOptions>;
        };
        allowInput: BooleanConstructor;
        autoWidth: BooleanConstructor;
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: import("./type").SelectInputValue;
                collapsedSelectedItems: import("./type").SelectInputValue;
                count: number;
                onClose: (context: {
                    index: number;
                    e?: MouseEvent;
                }) => void;
            }) => import("..").SlotReturnValue>;
        };
        disabled: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        inputValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        defaultInputValue: {
            type: import("vue").PropType<string>;
        };
        keys: {
            type: import("vue").PropType<import("./type").SelectInputKeys>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        loading: BooleanConstructor;
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        panel: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        popupVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultPopupVisible: BooleanConstructor;
        readonly: BooleanConstructor;
        reserveKeyword: BooleanConstructor;
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        tag: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: string | number;
            }) => import("..").SlotReturnValue)>;
        };
        tagInputProps: {
            type: import("vue").PropType<import("..").TdTagInputProps>;
        };
        tagProps: {
            type: import("vue").PropType<import("..").TdTagProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").SelectInputValue>;
            default: import("./type").SelectInputValue;
        };
        valueDisplay: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: import("..").TagInputValue;
                onClose: (index: number, item?: any) => void;
            }) => import("..").SlotReturnValue)>;
        };
        onBlur: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputBlurContext) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onEnter: import("vue").PropType<(value: import("./type").SelectInputValue, context: {
            e: KeyboardEvent;
            inputValue: string;
            tagInputValue?: import("..").TagInputValue;
        }) => void>;
        onFocus: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void>;
        onInputChange: import("vue").PropType<(value: string, context?: import("./type").SelectInputValueChangeContext) => void>;
        onMouseenter: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onMouseleave: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPaste: import("vue").PropType<(context: {
            e: ClipboardEvent;
            pasteValue: string;
        }) => void>;
        onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
        onTagChange: import("vue").PropType<(value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void>;
    }>>, {
        classPrefix: import("vue").ComputedRef<string>;
        NAME_CLASS: import("vue").ComputedRef<string>;
        innerPopupVisible: import("vue").Ref<boolean>;
        commonInputProps: import("vue").ComputedRef<import("./interface").SelectInputCommonProperties>;
        tOverlayInnerStyle: import("vue").ComputedRef<import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles)>;
        selectInputRef: import("vue").Ref<any>;
        popupRef: import("vue").Ref<import("..").PopupInstanceFunctions>;
        classes: import("vue").ComputedRef<(string | {
            [x: string]: boolean;
        })[]>;
        onInnerClear: (context: {
            e: MouseEvent;
        }) => void;
        renderTNodeJSX: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
        renderSelectSingle: (popupVisible: boolean) => JSX.Element;
        renderSelectMultiple: (p: import("./useMultiple").RenderSelectMultipleParams) => JSX.Element;
        onOverlayClick: (context: {
            e: MouseEvent;
        }) => void;
        onInnerPopupVisibleChange: (visible: boolean, ctx: import("..").PopupVisibleChangeContext) => void;
    }, {}, {}, {}, {
        value: string | number | boolean | Object | any[] | Date | import("./type").SelectInputValue[];
        loading: boolean;
        autofocus: boolean;
        disabled: boolean;
        multiple: boolean;
        readonly: boolean;
        status: "error" | "default" | "success" | "warning";
        placeholder: string;
        autoWidth: boolean;
        borderless: boolean;
        clearable: boolean;
        inputValue: string;
        minCollapsedNum: number;
        allowInput: boolean;
        popupVisible: boolean;
        defaultPopupVisible: boolean;
        reserveKeyword: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    valueDisplayOptions: {
        type: import("vue").PropType<import("./useSingle").SelectInputValueDisplayOptions>;
    };
    allowInput: BooleanConstructor;
    autoWidth: BooleanConstructor;
    autofocus: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            value: import("./type").SelectInputValue;
            collapsedSelectedItems: import("./type").SelectInputValue;
            count: number;
            onClose: (context: {
                index: number;
                e?: MouseEvent;
            }) => void;
        }) => import("..").SlotReturnValue>;
    };
    disabled: BooleanConstructor;
    inputProps: {
        type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
    };
    inputValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    defaultInputValue: {
        type: import("vue").PropType<string>;
    };
    keys: {
        type: import("vue").PropType<import("./type").SelectInputKeys>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    loading: BooleanConstructor;
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    panel: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultPopupVisible: BooleanConstructor;
    readonly: BooleanConstructor;
    reserveKeyword: BooleanConstructor;
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    tag: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: string | number;
        }) => import("..").SlotReturnValue)>;
    };
    tagInputProps: {
        type: import("vue").PropType<import("..").TdTagInputProps>;
    };
    tagProps: {
        type: import("vue").PropType<import("..").TdTagProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").SelectInputValue>;
        default: import("./type").SelectInputValue;
    };
    valueDisplay: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: import("..").TagInputValue;
            onClose: (index: number, item?: any) => void;
        }) => import("..").SlotReturnValue)>;
    };
    onBlur: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputBlurContext) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onEnter: import("vue").PropType<(value: import("./type").SelectInputValue, context: {
        e: KeyboardEvent;
        inputValue: string;
        tagInputValue?: import("..").TagInputValue;
    }) => void>;
    onFocus: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void>;
    onInputChange: import("vue").PropType<(value: string, context?: import("./type").SelectInputValueChangeContext) => void>;
    onMouseenter: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPaste: import("vue").PropType<(context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void>;
    onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
    onTagChange: import("vue").PropType<(value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void>;
}>>, {
    classPrefix: import("vue").ComputedRef<string>;
    NAME_CLASS: import("vue").ComputedRef<string>;
    innerPopupVisible: import("vue").Ref<boolean>;
    commonInputProps: import("vue").ComputedRef<import("./interface").SelectInputCommonProperties>;
    tOverlayInnerStyle: import("vue").ComputedRef<import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles)>;
    selectInputRef: import("vue").Ref<any>;
    popupRef: import("vue").Ref<import("..").PopupInstanceFunctions>;
    classes: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    onInnerClear: (context: {
        e: MouseEvent;
    }) => void;
    renderTNodeJSX: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
    renderSelectSingle: (popupVisible: boolean) => JSX.Element;
    renderSelectMultiple: (p: import("./useMultiple").RenderSelectMultipleParams) => JSX.Element;
    onOverlayClick: (context: {
        e: MouseEvent;
    }) => void;
    onInnerPopupVisibleChange: (visible: boolean, ctx: import("..").PopupVisibleChangeContext) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: string | number | boolean | Object | any[] | Date | import("./type").SelectInputValue[];
    loading: boolean;
    autofocus: boolean;
    disabled: boolean;
    multiple: boolean;
    readonly: boolean;
    status: "error" | "default" | "success" | "warning";
    placeholder: string;
    autoWidth: boolean;
    borderless: boolean;
    clearable: boolean;
    inputValue: string;
    minCollapsedNum: number;
    allowInput: boolean;
    popupVisible: boolean;
    defaultPopupVisible: boolean;
    reserveKeyword: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default SelectInput;
