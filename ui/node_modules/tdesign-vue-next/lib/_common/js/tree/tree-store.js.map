{"version":3,"file":"tree-store.js","sources":["../../../../src/_common/js/tree/tree-store.ts"],"sourcesContent":["import isArray from 'lodash/isArray';\nimport isFunction from 'lodash/isFunction';\nimport isNumber from 'lodash/isNumber';\nimport isString from 'lodash/isString';\nimport difference from 'lodash/difference';\nimport camelCase from 'lodash/camelCase';\nimport isPlainObject from 'lodash/isPlainObject';\nimport mitt from 'mitt';\n\nimport { TreeNode, privateKey } from './tree-node';\nimport {\n  TreeNodeValue,\n  TypeIdMap,\n  TypeTargetNode,\n  TypeTreeNodeData,\n  TypeTreeItem,\n  TypeTreeStoreOptions,\n  TypeTreeFilter,\n  TypeTreeFilterOptions,\n  TypeRelatedNodesOptions,\n  TypeTreeEventState,\n  TypeUpdatedMap,\n} from './types';\n\nfunction nextTick(fn: () => void): Promise<void> {\n  const pm = Promise.resolve();\n  pm.then(fn);\n  return pm;\n}\n\n// 构建一个树的数据模型\n// 基本设计思想：写入时更新，减少读取消耗，以减少未来实现虚拟滚动所需的计算量\n// 任何一次数据写入，会触发相应节点的状态更新\n// public 方法，在 ui 组件中有可能在使用，会保障其输入输出实现\n// private 方法，可能会改动其输入输出\n\n/**\n * tree 数据模型\n * @class TreeStore\n * @param {object} options tree 组件选项\n * @param {string} [options.prefix=\"t\"] tree 组件内部属性前缀\n * @param {object} options.keys 取值映射对象，部分属性按照其 key/value 来取 treeNode 属性值\n * @param {string} [options.keys.label=\"label\"] 从 data 种取 label 值时读取的属性名称\n * @param {string} [options.keys.value=\"value\"] 从 data 种取 value 值时读取的属性名称\n * @param {string} [options.keys.children=\"children\"] 从 data 种取 children 值时读取的属性名称\n * @param {boolean} [options.expandAll=false] 初始化节点时，是否自动展开\n * @param {number} [options.expandLevel=0] 初始化节点时，自动展开的级别\n * @param {boolean} [options.expandMutex=false] 展开时，是否使用手风琴模式\n * @param {boolean} [options.expandParent=false] 展开节点时，是否自动展开父节点\n * @param {boolean} [options.activable=false] 是否可以激活节点\n * @param {boolean} [options.activeMultiple=false] 激活节点是否使用多选模式\n * @param {boolean} [options.checkable=false] 节点是否可选中\n * @param {boolean} [options.checkStrictly=false] 节点选中是否使用严格模式\n * @param {boolean} [options.disabled=false] 节点是否禁用\n * @param {boolean|function} [options.disableCheck=false] 节点被禁用的条件\n * @param {boolean} [options.draggable=false] 节点是否可拖动\n * @param {function} [options.load=null] 节点延迟加载函数\n * @param {boolean} [options.lazy=false] 节点是否使用延迟加载模式\n * @param {string} [options.valueMode=\"onlyLeaf\"] 节点选中取值模式\n * @param {function} [options.filter=null] 节点过滤函数\n * @param {function} [options.onLoad=null] 节点延迟加载完成时的回调函数\n * @param {function} [options.onReflow=null] 节点触发回流后的回调\n * @param {function} [options.onUpdate=null] 节点触发更新后的后调\n * @param {boolean} [options.allowFoldNodeOnFilter=false] 过滤时，是否允许折叠节点\n */\nexport class TreeStore {\n  // 根节点集合\n  public children: TreeNode[];\n\n  // 所有节点集合\n  public nodes: TreeNode[];\n\n  // 所有节点映射\n  public nodeMap: Map<TreeNodeValue, TreeNode>;\n\n  // 节点 私有 ID 映射\n  public privateMap: Map<TreeNodeValue, TreeNode>;\n\n  // 配置选项\n  public config: TypeTreeStoreOptions;\n\n  // 活动节点集合\n  public activedMap: TypeIdMap;\n\n  // 数据被更新的节点集合\n  public updatedMap: TypeUpdatedMap;\n\n  // 选中节点集合\n  public checkedMap: TypeIdMap;\n\n  // 展开节点的集合\n  public expandedMap: TypeIdMap;\n\n  // 符合过滤条件的节点的集合\n  public filterMap: TypeIdMap;\n\n  // 存在过滤器标志\n  public hasFilter: boolean;\n\n  // 事件派发器\n  public emitter: ReturnType<typeof mitt>;\n\n  // 数据更新计时器\n  private updateTick: Promise<void>;\n\n  // 识别是否需要重排\n  private shouldReflow: boolean;\n\n  // 树节点过滤器\n  private prevFilter: TypeTreeFilter;\n\n  public constructor(options: TypeTreeStoreOptions) {\n    const config: TypeTreeStoreOptions = {\n      prefix: 't',\n      keys: {},\n      expandAll: false,\n      expandLevel: 0,\n      expandMutex: false,\n      expandParent: false,\n      activable: false,\n      activeMultiple: false,\n      checkable: false,\n      checkStrictly: false,\n      disabled: false,\n      disableCheck: false,\n      draggable: false,\n      load: null,\n      lazy: false,\n      valueMode: 'onlyLeaf',\n      filter: null,\n      // 每次搜索条件变更，重置展开状态，路径节点展开，显示命中节点\n      // allowFoldNodeOnFilter 为 true 时，搜索条件不变的情况下，允许折叠路径节点\n      // 默认状态，allowFoldNodeOnFilter 为 false 时，路径节点无法折叠\n      allowFoldNodeOnFilter: false,\n      onLoad: null,\n      onReflow: null,\n      onUpdate: null,\n      ...options,\n    };\n    this.config = config;\n    this.nodes = [];\n    this.children = [];\n    this.nodeMap = new Map();\n    this.privateMap = new Map();\n    this.activedMap = new Map();\n    this.expandedMap = new Map();\n    this.checkedMap = new Map();\n    this.updatedMap = new Map();\n    this.filterMap = new Map();\n    this.prevFilter = null;\n    // 这个计时器确保频繁的 update 事件被归纳为1次完整数据更新后的触发\n    this.updateTick = null;\n    // 在子节点增删改查时，将此属性设置为 true，来触发视图更新\n    this.shouldReflow = false;\n    // 这个标志会被大量用到\n    this.hasFilter = isFunction(config.filter);\n    this.emitter = mitt();\n  }\n\n  /**\n   * 配置选项\n   * @param {object} options tree 组件选项\n   * @return void\n   */\n  public setConfig(options: TypeTreeStoreOptions) {\n    const { config } = this;\n    let hasChanged = false;\n    Object.keys(options).forEach((key) => {\n      const val = options[key];\n      if (val !== config[key]) {\n        hasChanged = true;\n        config[key] = val;\n      }\n    });\n    this.hasFilter = isFunction(config.filter);\n    if (hasChanged) {\n      // 在 td-tree 的 render 方法中调用 setConfig\n      // 这样减少了 watch 属性\n      // 仅在属性变更后刷新状态\n      // 这样可以避免触发渲染死循环\n      this.refreshState();\n    }\n  }\n\n  /**\n   * 获取根节点列表\n   * @return TreeNode[] 根节点对象数组\n   */\n  public getChildren(): TreeNode[] {\n    return this.children;\n  }\n\n  /**\n   * 获取指定节点对象\n   * @param {string|number|TreeNode} item 获取节点对象的条件，可以是节点 value，也可以是节点本身\n   * @return TreeNode 节点对象，如果判断树中没有符合条件的节点，返回 null\n   */\n  public getNode(item: TypeTargetNode): TreeNode {\n    let node = null;\n    if (isString(item) || isNumber(item)) {\n      node = this.nodeMap.get(item);\n    } else if (item instanceof TreeNode) {\n      node = this.nodeMap.get(item.value);\n    }\n    if (!node) node = null;\n    return node;\n  }\n\n  /**\n   * 获取节点在总节点列表中的位置\n   * @param {TreeNode} node 节点对象\n   * @return number 节点在总节点列表中的位置序号\n   */\n  public getIndex(node: TreeNode): number {\n    return this.nodes.indexOf(node);\n  }\n\n  /**\n   * 获取指定节点的父节点\n   * @param {string} value 节点值\n   * @return TreeNode 节点对象\n   */\n  public getParent(value: TypeTargetNode): TreeNode {\n    let parent = null;\n    const node = this.getNode(value);\n    if (node) {\n      parent = node.getParent();\n    }\n    return parent;\n  }\n\n  /**\n   * 获取指定节点的所有父节点\n   * @param {string} value 节点值\n   * @return TreeNode[] 父节点数组\n   */\n  public getParents(value: TypeTargetNode): TreeNode[] {\n    const node = this.getNode(value);\n    let parents: TreeNode[] = [];\n    if (node) {\n      parents = node.getParents();\n    }\n    return parents;\n  }\n\n  /**\n   * 获取指定节点在其所在 children 中的位置\n   * @param {string} value 节点值\n   * @return number 节点在 children 中的位置序号\n   */\n  public getNodeIndex(value: TypeTargetNode): number {\n    const node = this.getNode(value);\n    let index = -1;\n    if (node) {\n      index = node.getIndex();\n    }\n    return index;\n  }\n\n  /**\n   * 获取所有符合条件的节点，按回流排序后的顺序给出\n   * 以这些字段作为示例:\n   * - value: 节点值(ID)\n   * - TreeNode: 节点实例\n   * - level: 节点层级\n   * - filter: 节点过滤函数\n   * 支持下列使用方式\n   * - getNodes() 获取所有节点\n   * - getNodes(value) 获取节点值对应的目标节点下，包含自己在内的所有子节点\n   * - getNodes(TreeNode) 获取目标节点下，包含自己在内的所有子节点\n   * - getNodes(value, { level: 2 }) 获取目标节点下，层级在 2 以内的子节点\n   * - getNodes(value, { filter: node => (!node.checked) }) 获取目标节点下，未选中的节点\n   * - getNodes(value, { props: { actived: true } }) 获取目标节点下，已激活的节点\n   * @param {string | TreeNode} [item] 节点值，节点对象\n   * @param {object} [options] 节点过滤条件，可传递节点属性，过滤出属性一致的节点\n   * @param {number} [options.level=Infinity] 节点层级\n   * @param {function} [options.filter=null] 节点过滤条件函数\n   * @param {object} [options.props] 节点属性对象，作为过滤条件\n   * @return TreeNode[] 符合条件的节点数组\n   */\n  public getNodes(\n    item?: TypeTargetNode,\n    options?: TypeTreeFilterOptions,\n  ): TreeNode[] {\n    let nodes: TreeNode[] = [];\n    let val: TreeNodeValue = '';\n    if (isString(item) || isNumber(item)) {\n      val = item;\n    } else if (item instanceof TreeNode) {\n      val = item.value;\n    }\n    if (!val) {\n      nodes = this.nodes.slice(0);\n    } else {\n      const node = this.getNode(val);\n      if (node) {\n        nodes = node.walk();\n      }\n    }\n\n    if (options) {\n      const conf: TypeTreeFilterOptions = {\n        filter: null,\n        level: Infinity,\n        ...options,\n      };\n      if (isNumber(conf.level) && conf.level !== Infinity) {\n        nodes = nodes.filter((node) => node.level <= conf.level);\n      }\n      if (isFunction(conf.filter)) {\n        nodes = nodes.filter((node) => {\n          const nodeModel = node.getModel();\n          return conf.filter(nodeModel);\n        });\n      }\n      if (isPlainObject(conf.props)) {\n        nodes = nodes.filter((node) => {\n          const result = Object.keys(conf.props).every((key) => {\n            const propEqual = node[key] === conf.props[key];\n            return propEqual;\n          });\n          return result;\n        });\n      }\n    }\n    return nodes;\n  }\n\n  /**\n   * 添加新节点数据\n   * @param {object[]} list 节点数据对象数组\n   * @return void\n   */\n  public append(list: TypeTreeNodeData[]): void {\n    list.forEach((item) => {\n      const node = new TreeNode(this, item);\n      this.children.push(node);\n    });\n    this.reflow();\n  }\n\n  /**\n   * 清空当前树的数据，重新加载数据\n   * @param {object[]} list 节点数据对象数组\n   * @return void\n   */\n  public reload(list: TypeTreeNodeData[]): void {\n    this.removeAll();\n    this.append(list);\n  }\n\n  /**\n   * 解析节点数据，适配多种节点类型\n   * @param {string | TreeNode | object} para 树节点值，或者树节点，或者节点构造数据\n   * @param {object | TreeNode} item 节点构造数据, 或者节点构造数据数组，或者树节点\n   * @return spec 解析完成的数据结构\n   * - {TreeNode} spec.node 目标树节点\n   * - {object} spec.data 节点构造数据\n   */\n  private parseNodeData(\n    para: TreeNodeValue | TreeNode | TypeTreeNodeData,\n    item: TypeTreeNodeData | TreeNode,\n  ) {\n    let value: TreeNodeValue = '';\n    let node = null;\n    let data = null;\n\n    if (isString(para) || isNumber(para)) {\n      value = para;\n      node = this.getNode(value);\n      data = item;\n    } else if (para instanceof TreeNode) {\n      if (item) {\n        node = para;\n        data = item;\n      } else {\n        data = para;\n      }\n    } else {\n      data = para;\n    }\n    const spec = {\n      node,\n      data,\n    };\n    return spec;\n  }\n\n  /**\n   * 向指定节点追加节点或者数据\n   * 以这些字段作为示例: item: 节点数据, TreeNode: 节点实例, value: 节点值(ID)\n   * 支持下列使用方式\n   * - appendNodes(item) 直接传递节点构造数据，新增节点\n   * - appendNodes(TreeNode) 传递别的树的树节点，新增节点\n   * - appendNodes(value, item) 以节点值查找指定节点，并新增节点构造数据\n   * - appendNodes(value, TreeNode) 以节点值查找指定节点，并新增树节点\n   * - appendNodes(TreeNode, item) 向指定节点新增节点构造数据\n   * - appendNodes(TreeNode, TreeNode) 向指定节点新增树节点\n   * @param {string | TreeNode | object} para 树节点值，或者树节点，或者节点构造数据\n   * @param {object | TreeNode} [item] 节点构造数据, 或者节点构造数据数组，或者树节点\n   * @return void\n   */\n  public appendNodes(\n    para: TypeTargetNode | TypeTreeNodeData,\n    item?: TypeTreeNodeData | TreeNode,\n  ): void {\n    const spec = this.parseNodeData(para, item);\n    if (spec.data) {\n      if (!spec.node) {\n        // 在根节点插入\n        if (spec.data instanceof TreeNode) {\n          spec.data.appendTo(this);\n        } else if (Array.isArray(spec.data)) {\n          this.append(spec.data);\n        } else {\n          this.append([spec.data]);\n        }\n      } else {\n        // 插入到目标节点之下\n        if (spec.data instanceof TreeNode) {\n          spec.data.appendTo(this, spec.node);\n        } else if (isArray(spec.data)) {\n          spec.node.append(spec.data);\n        } else {\n          spec.node.append([spec.data]);\n        }\n        spec.node.updateRelated();\n      }\n    }\n  }\n\n  /**\n   * 在目标节点之前插入节点\n   * @param {string | TreeNode} value 节点值，或者树节点\n   * @param {object | TreeNode} item 节点构造数据, 或者树节点\n   * @return void\n   */\n  public insertBefore(value: TypeTargetNode, item: TypeTreeItem): void {\n    const node = this.getNode(value);\n    if (node) {\n      node.insertBefore(item);\n    }\n  }\n\n  /**\n   * 在目标节点之后插入节点\n   * @param {string | TreeNode} value 节点值，或者树节点\n   * @param {object | TreeNode} item 节点构造数据, 或者树节点\n   * @return void\n   */\n  public insertAfter(value: TypeTargetNode, item: TypeTreeItem): void {\n    const node = this.getNode(value);\n    if (node) {\n      node.insertAfter(item);\n    }\n  }\n\n  /**\n   * 更新树结构\n   * - 清空 nodes 数组，然后遍历所有根节点重新插入 node\n   * - 这个操作将会为树结构数据提供一个一纬数组索引\n   * @return void\n   */\n  public refreshNodes(): void {\n    const { children, nodes } = this;\n    nodes.length = 0;\n    children.forEach((node) => {\n      const list = node.walk();\n      Array.prototype.push.apply(nodes, list);\n    });\n  }\n\n  /**\n   * 标记节点重排\n   * - 应该仅在树节点增删改查时调用\n   * - 节点重排会在延时后触发 refreshNodes 方法的调用\n   * @param {TreeNode} [node] 触发重排的树节点\n   * @return void\n   */\n  public reflow(node?: TreeNode): void {\n    this.shouldReflow = true;\n    this.updated(node);\n  }\n\n  /**\n   * 触发更新事件\n   * - 节点属性变更时调用\n   * - 统一延时后，处理需要在其他节点状态更新后再处理的逻辑，减少这类逻辑的重复调用开销\n   * - 统一延时后，派发事件，通知树已更新完毕，以及回流完毕，触发 vue 视图渲染操作\n   * @param {TreeNode} [node] 触发更新的树节点\n   * @return void\n   */\n  public updated(node?: TreeNode): void {\n    const { updatedMap } = this;\n    if (node) {\n      // 传入节点，则为指定节点的更新\n      updatedMap.set(node[privateKey], 'changed');\n    } else {\n      // reflow 流程不传入节点，需要更新所有节点\n      this.getNodes().forEach((itemNode) => {\n        updatedMap.set(itemNode[privateKey], 'changed');\n      });\n    }\n\n    if (this.updateTick) return;\n    this.updateTick = nextTick(() => {\n      this.updateTick = null;\n\n      // 检查节点是否需要回流，重排数组\n      if (this.shouldReflow) {\n        this.refreshNodes();\n        this.emit('reflow');\n      }\n\n      // 检查节点是否有被过滤，锁定路径节点\n      // 在此之前要遍历节点生成一个经过排序的节点数组\n      // 以便于优化锁定检查算法\n      this.lockFilterPathNodes();\n\n      // stateId 用于单个节点状态监控\n      const stateId = `t${new Date().getTime()}`;\n      const updatedList = Array.from(updatedMap.keys());\n      const updatedNodes = updatedList.map((nodePrivateKey) => {\n        updatedMap.set(nodePrivateKey, stateId);\n        return this.privateMap.get(nodePrivateKey);\n      });\n\n      // 统计需要更新状态的节点，派发更新事件\n      this.emit('update', {\n        nodes: updatedNodes,\n        map: updatedMap,\n      });\n\n      // 每次回流检查完毕，还原检查状态\n      this.shouldReflow = false;\n      updatedMap.clear();\n    });\n  }\n\n  /**\n   * 获取激活节点集合\n   * @param {Map} [map] 预设激活节点 map, 用于受控操作时预先获取结果而不直接操作节点状态\n   * @return string[] 激活节点值数组\n   */\n  public getActived(map?: TypeIdMap): TreeNodeValue[] {\n    const activedMap = map || this.activedMap;\n    return Array.from(activedMap.keys());\n  }\n\n  /**\n   * 获取指定范围的激活节点\n   * - 范围是目标节点在内所有子节点\n   * @param {string | TreeNode} [item] 目标节点值，或者目标节点本身\n   * @return TreeNode[] 激活节点数组\n   */\n  public getActivedNodes(item?: TypeTargetNode): TreeNode[] {\n    let nodes = this.getNodes(item);\n    nodes = nodes.filter((node) => node.isActived());\n    return nodes;\n  }\n\n  /**\n   * 替换激活态\n   * @param {string[]} list 目标节点值数组\n   * @return void\n   */\n  public replaceActived(list: TreeNodeValue[]): void {\n    this.resetActived();\n    this.setActived(list);\n  }\n\n  /**\n   * 设置激活态\n   * @param {string[]} list 目标节点值数组\n   * @return void\n   */\n  public setActived(actived: TreeNodeValue[]): void {\n    const { activeMultiple } = this.config;\n    const list = actived.slice(0);\n    if (!activeMultiple) {\n      list.length = 1;\n    }\n    list.forEach((val) => {\n      this.activedMap.set(val, true);\n      const node = this.getNode(val);\n      if (node) {\n        node.update();\n      }\n    });\n  }\n\n  /**\n   * 清空所有节点的激活状态\n   * @return void\n   */\n  public resetActived(): void {\n    const actived = this.getActived();\n    this.activedMap.clear();\n    const relatedNodes = this.getRelatedNodes(actived);\n    relatedNodes.forEach((node) => {\n      node.update();\n    });\n  }\n\n  /**\n   * 获取展开节点集合\n   * @param {Map} [map] 预设展开节点 map, 用于受控操作时预先获取结果而不直接操作节点状态\n   * @return void\n   */\n  public getExpanded(map?: TypeIdMap): TreeNodeValue[] {\n    const expandedMap = map || this.expandedMap;\n    return Array.from(expandedMap.keys());\n  }\n\n  /**\n   * 替换展开节点\n   * @param {string[]} list 目标节点值数组\n   * @return void\n   */\n  public replaceExpanded(list: TreeNodeValue[]): void {\n    const expanded = this.getExpanded();\n    const added = difference(list, expanded);\n    const removed = difference(expanded, list);\n    this.setExpandedDirectly(removed, false);\n    this.updateExpanded(removed);\n    this.setExpanded(added);\n  }\n\n  /**\n   * 批量设置展开节点\n   * - 注意这个状态设置操作会忽略互斥属性\n   * @param {string[]} list 目标节点值数组\n   * @return void\n   */\n  public setExpanded(list: TreeNodeValue[]): void {\n    this.setExpandedDirectly(list);\n    this.updateExpanded(list);\n  }\n\n  /**\n   * 直接设置节点展开状态\n   * - 注意这个状态设置操作会忽略互斥属性\n   * @param {string[]} list 目标节点值数组\n   * @param {boolean} [expanded=true] 展开状态\n   * @return void\n   */\n  public setExpandedDirectly(list: TreeNodeValue[], expanded = true): void {\n    list.forEach((val) => {\n      if (expanded) {\n        this.expandedMap.set(val, true);\n      } else {\n        this.expandedMap.delete(val);\n      }\n      const node = this.getNode(val);\n      if (node) {\n        node.afterExpanded();\n      }\n    });\n  }\n\n  /**\n   * 清除所有节点的展开状态\n   * @return void\n   */\n  public resetExpanded(): void {\n    const expanded = this.getExpanded();\n    this.expandedMap.clear();\n    this.updateExpanded(expanded);\n  }\n\n  /**\n   * 更新展开节点相关节点的状态\n   * - 节点展开状态变更后，上下游节点可能存在状态变更，统一纳入待更新队列\n   * @param {string[]} list 目标节点值数组\n   * @return void\n   */\n  public updateExpanded(list: TreeNodeValue[]): void {\n    const relatedNodes = this.getRelatedNodes(list, {\n      withParents: false,\n    });\n    relatedNodes.forEach((node) => {\n      node.update();\n    });\n  }\n\n  /**\n   * 获取选中态节点值数组\n   * @param {Map} [map] 预设选中节点 map, 用于受控操作时预先获取结果而不直接操作节点状态\n   * @return string[] 选中态节点 value 数组\n   */\n  public getChecked(map?: TypeIdMap): TreeNodeValue[] {\n    const { nodeMap, config } = this;\n    const { valueMode, checkStrictly } = config;\n    const list: TreeNodeValue[] = [];\n    const checkedMap = map || this.checkedMap;\n    nodeMap.forEach((node) => {\n      // 判断未选中，直接忽略\n      if (!node.isChecked(checkedMap)) return;\n      if (valueMode === 'parentFirst' && !checkStrictly) {\n        // valueMode 为 parentFirst\n        // 仅取值父节点\n        if (!node.parent || !node.parent.isChecked(checkedMap)) {\n          list.push(node.value);\n        }\n      } else if (valueMode === 'onlyLeaf' && !checkStrictly) {\n        // valueMode 为 onlyLeaf\n        // 仅取值叶子节点\n        if (node.isLeaf()) {\n          list.push(node.value);\n        }\n      } else {\n        // valueMode 为 all\n        // 取值所有选中节点\n        list.push(node.value);\n      }\n    });\n    return list;\n  }\n\n  /**\n   * 获取指定节点下的选中节点\n   * @param {string | TreeNode} [item] 目标节点值，或者目标节点\n   * @return TreeNode[] 选中节点数组\n   */\n  public getCheckedNodes(item?: TypeTargetNode): TreeNode[] {\n    let nodes = this.getNodes(item);\n    nodes = nodes.filter((node) => node.isChecked());\n    return nodes;\n  }\n\n  /**\n   * 替换选中态列表\n   * @param {string[]} list 目标节点值数组\n   * @return void\n   */\n  public replaceChecked(list: TreeNodeValue[]): void {\n    this.resetChecked();\n    this.setChecked(list);\n  }\n\n  /**\n   * 批量设置选中态\n   * @param {string[]} list 目标节点值数组\n   * @return void\n   */\n  public setChecked(list: TreeNodeValue[]): void {\n    const { checkStrictly, checkable } = this.config;\n    if (!checkable) return;\n    list.forEach((val: TreeNodeValue) => {\n      const node = this.getNode(val);\n      if (!node) return;\n      if (checkStrictly) {\n        this.checkedMap.set(val, true);\n        node.updateChecked();\n      } else {\n        const childrenNodes = node.walk();\n        childrenNodes.forEach((childNode) => {\n          this.checkedMap.set(childNode.value, true);\n        });\n      }\n    });\n    if (!checkStrictly) {\n      const checkedValues = this.getChecked();\n      const relatedNodes = this.getRelatedNodes(checkedValues);\n      relatedNodes.forEach((node) => {\n        node.updateChecked();\n      });\n    }\n  }\n\n  /**\n   * 清除所有节点选中态\n   * @return void\n   */\n  public resetChecked(): void {\n    const checked = this.getChecked();\n    const relatedNodes = this.getRelatedNodes(checked);\n    this.checkedMap.clear();\n    relatedNodes.forEach((node) => {\n      node.updateChecked();\n    });\n  }\n\n  /**\n   * 更新所有树节点状态，但不更新选中态\n   * 用于不影响选中态时候的更新，减少递归循环造成的时间消耗\n   * @return void\n   */\n  public refreshState(): void {\n    const { nodeMap } = this;\n    // 树在初始化未回流时，nodes 数组为空\n    // 所以遍历 nodeMap 确保初始化阶段 refreshState 方法也可以触发全部节点的更新\n    nodeMap.forEach((node) => {\n      node.update();\n    });\n  }\n\n  /**\n   * 更新全部节点状态\n   * @return void\n   */\n  public updateAll(): void {\n    const { nodeMap } = this;\n    nodeMap.forEach((node) => {\n      node.update();\n      node.updateChecked();\n    });\n  }\n\n  /**\n   * 移除指定节点\n   * @param {string} value 目标节点值\n   * @return void\n   */\n  public remove(value?: TypeTargetNode): void {\n    const node = this.getNode(value);\n    if (node) {\n      node.remove();\n    }\n  }\n\n  /**\n   * 移除所有节点\n   * @return void\n   */\n  public removeAll(): void {\n    this.expandedMap.clear();\n    this.checkedMap.clear();\n    this.activedMap.clear();\n    this.filterMap.clear();\n    this.nodeMap.clear();\n    this.privateMap.clear();\n    this.updatedMap.clear();\n    this.nodes = [];\n    this.children = [];\n    this.reflow();\n  }\n\n  /**\n   * 获取节点状态变化可能影响的关联节点\n   * - 用于实现最小遍历集合\n   * @param {string[]} list 目标节点值数组\n   * @param {object} [options] 操作选项\n   * @oaran {boolean} [options.reverse=false] 倒序排列遍历节点\n   * @param {boolean} [options.withParents=true] 包含所有父节点\n   * @return TreeNode[] 关联节点数组\n   */\n  public getRelatedNodes(\n    list: TreeNodeValue[],\n    options?: TypeRelatedNodesOptions,\n  ): TreeNode[] {\n    const conf = {\n      // 默认倒序排列，从底层节点开始遍历\n      reverse: false,\n      // 默认遍历父节点\n      withParents: true,\n      ...options,\n    };\n    const map = new Map();\n    list.forEach((value) => {\n      if (map.get(value)) return;\n      const node = this.getNode(value);\n      if (node) {\n        const parents = node.getParents().reverse();\n        const children = node.walk();\n        let related = [];\n        if (conf.withParents) {\n          related = parents.concat(children);\n        } else {\n          related = children;\n        }\n        // 用 map 实现节点去重\n        related.forEach((relatedNode) => {\n          map.set(relatedNode.value, relatedNode);\n        });\n      }\n    });\n    let relatedNodes = Array.from(map.values());\n    if (conf.reverse) {\n      relatedNodes = relatedNodes.reverse();\n    }\n    return relatedNodes;\n  }\n\n  /**\n   * 触发绑定的事件\n   * - store.emitter 可以绑定事件回调，用于多个组件共同监听事件\n   * @param {string} name 事件名称\n   * @param {Event} [state] 事件对象\n   * @param {TreeNode} [state.node] 事件关联节点\n   * @param {TreeNode[]} [state.nodes] 事件关联节点数组\n   * @param {Map} [state.map] 事件关联节点映射\n   * @param {object[]} [state.data] 事件关联节点数据\n   * @return void\n   */\n  public emit(name: string, state?: TypeTreeEventState): void {\n    const { config, emitter } = this;\n    const methodName = camelCase(`on-${name}`);\n    const method = config[methodName];\n    if (isFunction(method)) {\n      method(state);\n    }\n    emitter.emit(name, state);\n  }\n\n  /**\n   * 锁定过滤节点的路径节点\n   * - 使得路径节点自动展开\n   * @return void\n   */\n  private lockFilterPathNodes(): void {\n    const { config } = this;\n    const allNodes = this.getNodes();\n\n    if (this.prevFilter) {\n      // 过滤条件清空时，也需要清理锁定节点\n      // 所在判断过滤条件是否存在之前，就要调用这里的清理逻辑\n      // 不想在每次渲染时都做这个清空判断\n      // 所以判断一下之前是否有进行过滤\n      allNodes.forEach((node: TreeNode) => {\n        // 先清空所有锁定状态\n        if (node.vmIsLocked) {\n          // lock 方法内部有状态计算\n          // 所以要减少 lock 方法调用次数\n          node.lock(false);\n        }\n      });\n    }\n\n    const currentFilter = config.filter;\n    // 当前没有过滤器\n    // 则无需处理锁定节点\n    if (!currentFilter || !isFunction(currentFilter)) return;\n    this.prevFilter = config.filter;\n\n    // 全部节点要经过排序，才能使用这个遍历\n    // 比起每个过滤节点调用 getParents 方法检查父节点状态\n    // 复杂度 O(N*log(N)) => O(N)\n    allNodes.reverse().forEach((node: TreeNode) => {\n      // 数组颠倒后，等于是从每个节点的子节点开始判断\n      // 想象为从展开树的最底部向上遍历\n      const parent = node.getParent();\n      if (!parent) return;\n      if (node.vmIsRest || node.vmIsLocked) {\n        // 当前节点被过滤条件命中\n        // 或者当前节点被锁定\n        // 则需要判定父节点状态\n        if (!parent.vmIsLocked) {\n          // 父节点已被锁定，则忽略动作\n          // lock 方法有内置状态判断\n          parent.lock(true);\n        }\n      }\n    });\n  }\n}\n\nexport default TreeStore;\n"],"names":["nextTick","fn","pm","Promise","resolve","then","TreeStore","options","_classCallCheck","_defineProperty","config","_objectSpread","prefix","keys","expandAll","expandLevel","expandMutex","expandParent","activable","activeMultiple","checkable","checkStrictly","disabled","disableCheck","draggable","load","lazy","valueMode","filter","allowFoldNodeOnFilter","onLoad","onReflow","onUpdate","nodes","children","nodeMap","Map","privateMap","activedMap","expandedMap","checkedMap","updatedMap","filterMap","prevFilter","updateTick","shouldReflow","hasFilter","isFunction","emitter","mitt","_createClass","key","value","setConfig","hasChanged","Object","forEach","val","refreshState","getChildren","getNode","item","node","isString","isNumber","get","TreeNode","getIndex","indexOf","getParent","parent","getParents","parents","getNodeIndex","index","getNodes","slice","walk","conf","level","Infinity","nodeModel","getModel","isPlainObject","props","result","every","propEqual","append","list","_this","push","reflow","reload","removeAll","parseNodeData","para","data","spec","appendNodes","appendTo","Array","isArray","updateRelated","insertBefore","insertAfter","refreshNodes","length","prototype","apply","updated","_this2","set","privateKey","itemNode","emit","lockFilterPathNodes","stateId","concat","Date","getTime","updatedList","from","updatedNodes","map","nodePrivateKey","clear","getActived","getActivedNodes","isActived","replaceActived","resetActived","setActived","actived","_this3","update","relatedNodes","getRelatedNodes","getExpanded","replaceExpanded","expanded","added","difference","removed","setExpandedDirectly","updateExpanded","setExpanded","_this4","arguments","undefined","afterExpanded","resetExpanded","withParents","getChecked","isChecked","isLeaf","getCheckedNodes","replaceChecked","resetChecked","setChecked","_this5","_this$config","updateChecked","childrenNodes","childNode","checkedValues","checked","updateAll","remove","_this6","reverse","related","relatedNode","values","name","state","methodName","camelCase","method","allNodes","vmIsLocked","lock","currentFilter","vmIsRest"],"mappings":"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"}