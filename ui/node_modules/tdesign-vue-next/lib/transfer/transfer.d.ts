import { TransferListType, CheckedOptions, TransferValue, EmptyType, TargetParams } from './interface';
import { PageInfo, TdPaginationProps } from '../pagination/type';
declare const _default: import("vue").DefineComponent<{
    checkboxProps: {
        type: import("vue").PropType<import("..").TdCheckboxProps>;
    };
    checked: {
        type: import("vue").PropType<TransferValue[]>;
        default: TransferValue[];
    };
    defaultChecked: {
        type: import("vue").PropType<TransferValue[]>;
        default: () => TransferValue[];
    };
    data: {
        type: import("vue").PropType<import("./type").DataOption[]>;
        default: () => import("./type").DataOption[];
    };
    direction: {
        type: import("vue").PropType<"both" | "left" | "right">;
        default: "both" | "left" | "right";
        validator(val: "both" | "left" | "right"): boolean;
    };
    disabled: {
        type: import("vue").PropType<boolean | boolean[]>;
    };
    empty: {
        type: import("vue").PropType<EmptyType | EmptyType[]>;
        default: EmptyType | EmptyType[];
    };
    footer: {
        type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
            type: TransferListType;
        }) => import("../common").SlotReturnValue)>;
    };
    keys: {
        type: import("vue").PropType<import("../common").KeysType>;
    };
    operation: {
        type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
            direction: "left" | "right";
        }) => import("../common").SlotReturnValue)>;
    };
    pagination: {
        type: import("vue").PropType<TdPaginationProps | TdPaginationProps[]>;
    };
    search: {
        type: import("vue").PropType<import("./type").SearchOption | import("./type").SearchOption[]>;
        default: boolean;
    };
    showCheckAll: {
        type: import("vue").PropType<boolean | boolean[]>;
        default: boolean | boolean[];
    };
    targetDraggable: BooleanConstructor;
    targetSort: {
        type: import("vue").PropType<"push" | "unshift" | "original">;
        default: "push" | "unshift" | "original";
        validator(val: "push" | "unshift" | "original"): boolean;
    };
    title: {
        type: import("vue").PropType<import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
            type: TransferListType;
        }) => import("../common").SlotReturnValue)>;
        default: () => import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
            type: TransferListType;
        }) => import("../common").SlotReturnValue);
    };
    transferItem: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TransferItem<import("./type").DataOption>) => import("../common").SlotReturnValue>;
    };
    value: {
        type: import("vue").PropType<TransferValue[]>;
        default: TransferValue[];
    };
    modelValue: {
        type: import("vue").PropType<TransferValue[]>;
        default: TransferValue[];
    };
    defaultValue: {
        type: import("vue").PropType<TransferValue[]>;
        default: () => TransferValue[];
    };
    onChange: import("vue").PropType<(targetValue: TransferValue[], context: TargetParams) => void>;
    onCheckedChange: import("vue").PropType<(options: CheckedOptions) => void>;
    onPageChange: import("vue").PropType<(page: PageInfo, context: {
        type: TransferListType;
    }) => void>;
    onScroll: import("vue").PropType<(options: {
        e: Event;
        bottomDistance: number;
        type: TransferListType;
    }) => void>;
    onSearch: import("vue").PropType<(options: import("./type").SearchContext) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    checkboxProps: {
        type: import("vue").PropType<import("..").TdCheckboxProps>;
    };
    checked: {
        type: import("vue").PropType<TransferValue[]>;
        default: TransferValue[];
    };
    defaultChecked: {
        type: import("vue").PropType<TransferValue[]>;
        default: () => TransferValue[];
    };
    data: {
        type: import("vue").PropType<import("./type").DataOption[]>;
        default: () => import("./type").DataOption[];
    };
    direction: {
        type: import("vue").PropType<"both" | "left" | "right">;
        default: "both" | "left" | "right";
        validator(val: "both" | "left" | "right"): boolean;
    };
    disabled: {
        type: import("vue").PropType<boolean | boolean[]>;
    };
    empty: {
        type: import("vue").PropType<EmptyType | EmptyType[]>;
        default: EmptyType | EmptyType[];
    };
    footer: {
        type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
            type: TransferListType;
        }) => import("../common").SlotReturnValue)>;
    };
    keys: {
        type: import("vue").PropType<import("../common").KeysType>;
    };
    operation: {
        type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
            direction: "left" | "right";
        }) => import("../common").SlotReturnValue)>;
    };
    pagination: {
        type: import("vue").PropType<TdPaginationProps | TdPaginationProps[]>;
    };
    search: {
        type: import("vue").PropType<import("./type").SearchOption | import("./type").SearchOption[]>;
        default: boolean;
    };
    showCheckAll: {
        type: import("vue").PropType<boolean | boolean[]>;
        default: boolean | boolean[];
    };
    targetDraggable: BooleanConstructor;
    targetSort: {
        type: import("vue").PropType<"push" | "unshift" | "original">;
        default: "push" | "unshift" | "original";
        validator(val: "push" | "unshift" | "original"): boolean;
    };
    title: {
        type: import("vue").PropType<import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
            type: TransferListType;
        }) => import("../common").SlotReturnValue)>;
        default: () => import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
            type: TransferListType;
        }) => import("../common").SlotReturnValue);
    };
    transferItem: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TransferItem<import("./type").DataOption>) => import("../common").SlotReturnValue>;
    };
    value: {
        type: import("vue").PropType<TransferValue[]>;
        default: TransferValue[];
    };
    modelValue: {
        type: import("vue").PropType<TransferValue[]>;
        default: TransferValue[];
    };
    defaultValue: {
        type: import("vue").PropType<TransferValue[]>;
        default: () => TransferValue[];
    };
    onChange: import("vue").PropType<(targetValue: TransferValue[], context: TargetParams) => void>;
    onCheckedChange: import("vue").PropType<(options: CheckedOptions) => void>;
    onPageChange: import("vue").PropType<(page: PageInfo, context: {
        type: TransferListType;
    }) => void>;
    onScroll: import("vue").PropType<(options: {
        e: Event;
        bottomDistance: number;
        type: TransferListType;
    }) => void>;
    onSearch: import("vue").PropType<(options: import("./type").SearchContext) => void>;
}>>, {
    search: boolean;
    data: import("./type").DataOption[];
    direction: "both" | "left" | "right";
    value: TransferValue[];
    title: import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
        type: TransferListType;
    }) => import("../common").SlotReturnValue);
    empty: EmptyType | EmptyType[];
    checked: TransferValue[];
    modelValue: TransferValue[];
    defaultChecked: TransferValue[];
    defaultValue: TransferValue[];
    showCheckAll: boolean | boolean[];
    targetSort: "push" | "unshift" | "original";
    targetDraggable: boolean;
}, {}>;
export default _default;
