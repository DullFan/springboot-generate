import { TdTagProps, TdCheckTagProps, TdCheckTagGroupProps } from './type';
import './style';
export * from './type';
export declare type TagProps = TdTagProps;
export declare type CheckTagProps = TdCheckTagProps;
export declare type CheckTagGroupProps = TdCheckTagGroupProps;
export declare const Tag: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        closable: BooleanConstructor;
        color: {
            type: StringConstructor;
            default: string;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        icon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
            default: any;
        };
        maxWidth: {
            type: import("vue").PropType<string | number>;
        };
        shape: {
            type: import("vue").PropType<"square" | "round" | "mark">;
            default: "square" | "round" | "mark";
            validator(val: "square" | "round" | "mark"): boolean;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        theme: {
            type: import("vue").PropType<"default" | "success" | "primary" | "warning" | "danger">;
            default: "default" | "success" | "primary" | "warning" | "danger";
            validator(val: "default" | "success" | "primary" | "warning" | "danger"): boolean;
        };
        variant: {
            type: import("vue").PropType<"outline" | "dark" | "light" | "light-outline">;
            default: "outline" | "dark" | "light" | "light-outline";
            validator(val: "outline" | "dark" | "light" | "light-outline"): boolean;
        };
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onClose: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        closable: BooleanConstructor;
        color: {
            type: StringConstructor;
            default: string;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        icon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
            default: any;
        };
        maxWidth: {
            type: import("vue").PropType<string | number>;
        };
        shape: {
            type: import("vue").PropType<"square" | "round" | "mark">;
            default: "square" | "round" | "mark";
            validator(val: "square" | "round" | "mark"): boolean;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        theme: {
            type: import("vue").PropType<"default" | "success" | "primary" | "warning" | "danger">;
            default: "default" | "success" | "primary" | "warning" | "danger";
            validator(val: "default" | "success" | "primary" | "warning" | "danger"): boolean;
        };
        variant: {
            type: import("vue").PropType<"outline" | "dark" | "light" | "light-outline">;
            default: "outline" | "dark" | "light" | "light-outline";
            validator(val: "outline" | "dark" | "light" | "light-outline"): boolean;
        };
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onClose: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
    }>>, {
        color: string;
        disabled: boolean;
        size: import("..").SizeEnum;
        icon: (h: typeof import("vue").h) => import("..").SlotReturnValue;
        shape: "square" | "round" | "mark";
        variant: "outline" | "dark" | "light" | "light-outline";
        theme: "default" | "success" | "primary" | "warning" | "danger";
        closable: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        closable: BooleanConstructor;
        color: {
            type: StringConstructor;
            default: string;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        icon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
            default: any;
        };
        maxWidth: {
            type: import("vue").PropType<string | number>;
        };
        shape: {
            type: import("vue").PropType<"square" | "round" | "mark">;
            default: "square" | "round" | "mark";
            validator(val: "square" | "round" | "mark"): boolean;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        theme: {
            type: import("vue").PropType<"default" | "success" | "primary" | "warning" | "danger">;
            default: "default" | "success" | "primary" | "warning" | "danger";
            validator(val: "default" | "success" | "primary" | "warning" | "danger"): boolean;
        };
        variant: {
            type: import("vue").PropType<"outline" | "dark" | "light" | "light-outline">;
            default: "outline" | "dark" | "light" | "light-outline";
            validator(val: "outline" | "dark" | "light" | "light-outline"): boolean;
        };
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onClose: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        color: string;
        disabled: boolean;
        size: import("..").SizeEnum;
        icon: (h: typeof import("vue").h) => import("..").SlotReturnValue;
        shape: "square" | "round" | "mark";
        variant: "outline" | "dark" | "light" | "light-outline";
        theme: "default" | "success" | "primary" | "warning" | "danger";
        closable: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    closable: BooleanConstructor;
    color: {
        type: StringConstructor;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    icon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        default: any;
    };
    maxWidth: {
        type: import("vue").PropType<string | number>;
    };
    shape: {
        type: import("vue").PropType<"square" | "round" | "mark">;
        default: "square" | "round" | "mark";
        validator(val: "square" | "round" | "mark"): boolean;
    };
    size: {
        type: import("vue").PropType<import("..").SizeEnum>;
        default: import("..").SizeEnum;
        validator(val: import("..").SizeEnum): boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "success" | "primary" | "warning" | "danger">;
        default: "default" | "success" | "primary" | "warning" | "danger";
        validator(val: "default" | "success" | "primary" | "warning" | "danger"): boolean;
    };
    variant: {
        type: import("vue").PropType<"outline" | "dark" | "light" | "light-outline">;
        default: "outline" | "dark" | "light" | "light-outline";
        validator(val: "outline" | "dark" | "light" | "light-outline"): boolean;
    };
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClose: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    color: string;
    disabled: boolean;
    size: import("..").SizeEnum;
    icon: (h: typeof import("vue").h) => import("..").SlotReturnValue;
    shape: "square" | "round" | "mark";
    variant: "outline" | "dark" | "light" | "light-outline";
    theme: "default" | "success" | "primary" | "warning" | "danger";
    closable: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const CheckTag: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        checked: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultChecked: BooleanConstructor;
        checkedProps: {
            type: import("vue").PropType<TdTagProps>;
        };
        content: {
            type: import("vue").PropType<string | number | string[] | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        uncheckedProps: {
            type: import("vue").PropType<TdTagProps>;
        };
        value: {
            type: import("vue").PropType<string | number>;
        };
        onChange: import("vue").PropType<(checked: boolean, context: import("./type").CheckTagChangeContext) => void>;
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        checked: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultChecked: BooleanConstructor;
        checkedProps: {
            type: import("vue").PropType<TdTagProps>;
        };
        content: {
            type: import("vue").PropType<string | number | string[] | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        uncheckedProps: {
            type: import("vue").PropType<TdTagProps>;
        };
        value: {
            type: import("vue").PropType<string | number>;
        };
        onChange: import("vue").PropType<(checked: boolean, context: import("./type").CheckTagChangeContext) => void>;
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
    }>>, {
        disabled: boolean;
        size: import("..").SizeEnum;
        checked: boolean;
        modelValue: boolean;
        defaultChecked: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        checked: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultChecked: BooleanConstructor;
        checkedProps: {
            type: import("vue").PropType<TdTagProps>;
        };
        content: {
            type: import("vue").PropType<string | number | string[] | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        uncheckedProps: {
            type: import("vue").PropType<TdTagProps>;
        };
        value: {
            type: import("vue").PropType<string | number>;
        };
        onChange: import("vue").PropType<(checked: boolean, context: import("./type").CheckTagChangeContext) => void>;
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        size: import("..").SizeEnum;
        checked: boolean;
        modelValue: boolean;
        defaultChecked: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    checked: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultChecked: BooleanConstructor;
    checkedProps: {
        type: import("vue").PropType<TdTagProps>;
    };
    content: {
        type: import("vue").PropType<string | number | string[] | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    size: {
        type: import("vue").PropType<import("..").SizeEnum>;
        default: import("..").SizeEnum;
        validator(val: import("..").SizeEnum): boolean;
    };
    uncheckedProps: {
        type: import("vue").PropType<TdTagProps>;
    };
    value: {
        type: import("vue").PropType<string | number>;
    };
    onChange: import("vue").PropType<(checked: boolean, context: import("./type").CheckTagChangeContext) => void>;
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
    size: import("..").SizeEnum;
    checked: boolean;
    modelValue: boolean;
    defaultChecked: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const CheckTagGroup: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        checkedProps: {
            type: import("vue").PropType<TdTagProps>;
        };
        multiple: BooleanConstructor;
        options: {
            type: import("vue").PropType<import("./type").CheckTagGroupOption[]>;
        };
        uncheckedProps: {
            type: import("vue").PropType<TdTagProps>;
        };
        value: {
            type: import("vue").PropType<import("./type").CheckTagGroupValue>;
            default: import("./type").CheckTagGroupValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").CheckTagGroupValue>;
            default: import("./type").CheckTagGroupValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").CheckTagGroupValue>;
            default: () => import("./type").CheckTagGroupValue;
        };
        onChange: import("vue").PropType<(value: import("./type").CheckTagGroupValue, context: import("./type").CheckTagGroupChangeContext) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        checkedProps: {
            type: import("vue").PropType<TdTagProps>;
        };
        multiple: BooleanConstructor;
        options: {
            type: import("vue").PropType<import("./type").CheckTagGroupOption[]>;
        };
        uncheckedProps: {
            type: import("vue").PropType<TdTagProps>;
        };
        value: {
            type: import("vue").PropType<import("./type").CheckTagGroupValue>;
            default: import("./type").CheckTagGroupValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").CheckTagGroupValue>;
            default: import("./type").CheckTagGroupValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").CheckTagGroupValue>;
            default: () => import("./type").CheckTagGroupValue;
        };
        onChange: import("vue").PropType<(value: import("./type").CheckTagGroupValue, context: import("./type").CheckTagGroupChangeContext) => void>;
    }>>, {
        value: import("./type").CheckTagGroupValue;
        multiple: boolean;
        modelValue: import("./type").CheckTagGroupValue;
        defaultValue: import("./type").CheckTagGroupValue;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        checkedProps: {
            type: import("vue").PropType<TdTagProps>;
        };
        multiple: BooleanConstructor;
        options: {
            type: import("vue").PropType<import("./type").CheckTagGroupOption[]>;
        };
        uncheckedProps: {
            type: import("vue").PropType<TdTagProps>;
        };
        value: {
            type: import("vue").PropType<import("./type").CheckTagGroupValue>;
            default: import("./type").CheckTagGroupValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").CheckTagGroupValue>;
            default: import("./type").CheckTagGroupValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").CheckTagGroupValue>;
            default: () => import("./type").CheckTagGroupValue;
        };
        onChange: import("vue").PropType<(value: import("./type").CheckTagGroupValue, context: import("./type").CheckTagGroupChangeContext) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        value: import("./type").CheckTagGroupValue;
        multiple: boolean;
        modelValue: import("./type").CheckTagGroupValue;
        defaultValue: import("./type").CheckTagGroupValue;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    checkedProps: {
        type: import("vue").PropType<TdTagProps>;
    };
    multiple: BooleanConstructor;
    options: {
        type: import("vue").PropType<import("./type").CheckTagGroupOption[]>;
    };
    uncheckedProps: {
        type: import("vue").PropType<TdTagProps>;
    };
    value: {
        type: import("vue").PropType<import("./type").CheckTagGroupValue>;
        default: import("./type").CheckTagGroupValue;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").CheckTagGroupValue>;
        default: import("./type").CheckTagGroupValue;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").CheckTagGroupValue>;
        default: () => import("./type").CheckTagGroupValue;
    };
    onChange: import("vue").PropType<(value: import("./type").CheckTagGroupValue, context: import("./type").CheckTagGroupChangeContext) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: import("./type").CheckTagGroupValue;
    multiple: boolean;
    modelValue: import("./type").CheckTagGroupValue;
    defaultValue: import("./type").CheckTagGroupValue;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Tag;
