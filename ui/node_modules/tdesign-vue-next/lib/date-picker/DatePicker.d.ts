import dayjs from 'dayjs';
import type { DateValue } from './type';
declare const _default: import("vue").DefineComponent<{
    allowInput: BooleanConstructor;
    clearable: BooleanConstructor;
    defaultTime: {
        type: StringConstructor;
        default: string;
    };
    disableDate: {
        type: import("vue").PropType<import("./type").DisableDate>;
    };
    disabled: BooleanConstructor;
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: number): boolean;
    };
    format: {
        type: StringConstructor;
        default: any;
    };
    inputProps: {
        type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
    };
    mode: {
        type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
        default: "month" | "year" | "quarter" | "week" | "date";
        validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
    };
    placeholder: {
        type: import("vue").PropType<string>;
        default: string;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    presets: {
        type: import("vue").PropType<import("./type").PresetDate>;
    };
    presetsPlacement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
        default: "left" | "top" | "bottom" | "right";
        validator(val: "left" | "top" | "bottom" | "right"): boolean;
    };
    selectInputProps: {
        type: import("vue").PropType<import("../select-input").TdSelectInputProps>;
    };
    size: {
        type: import("vue").PropType<import("..").SizeEnum>;
        default: import("..").SizeEnum;
        validator(val: import("..").SizeEnum): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    timePickerProps: {
        type: import("vue").PropType<import("..").TdTimePickerProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<DateValue>;
        default: DateValue;
    };
    modelValue: {
        type: import("vue").PropType<DateValue>;
        default: DateValue;
    };
    defaultValue: {
        type: import("vue").PropType<DateValue>;
        default: DateValue;
    };
    valueDisplay: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: DateValue;
            displayValue?: DateValue;
        }) => import("..").SlotReturnValue)>;
    };
    valueType: {
        type: import("vue").PropType<import("./type").DatePickerValueType>;
        default: import("./type").DatePickerValueType;
    };
    onBlur: import("vue").PropType<(context: {
        value: DateValue;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: DateValue, context: {
        dayjsValue?: dayjs.Dayjs;
        trigger?: import("./type").DatePickerTriggerSource;
    }) => void>;
    onConfirm: import("vue").PropType<(context: {
        date: Date;
        e: MouseEvent;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        value: DateValue;
        e: FocusEvent;
    }) => void>;
    onPick: import("vue").PropType<(value: DateValue) => void>;
    onPresetClick: import("vue").PropType<(context: {
        preset: import("./type").PresetDate;
        e: MouseEvent;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    allowInput: BooleanConstructor;
    clearable: BooleanConstructor;
    defaultTime: {
        type: StringConstructor;
        default: string;
    };
    disableDate: {
        type: import("vue").PropType<import("./type").DisableDate>;
    };
    disabled: BooleanConstructor;
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: number): boolean;
    };
    format: {
        type: StringConstructor;
        default: any;
    };
    inputProps: {
        type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
    };
    mode: {
        type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
        default: "month" | "year" | "quarter" | "week" | "date";
        validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
    };
    placeholder: {
        type: import("vue").PropType<string>;
        default: string;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    presets: {
        type: import("vue").PropType<import("./type").PresetDate>;
    };
    presetsPlacement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
        default: "left" | "top" | "bottom" | "right";
        validator(val: "left" | "top" | "bottom" | "right"): boolean;
    };
    selectInputProps: {
        type: import("vue").PropType<import("../select-input").TdSelectInputProps>;
    };
    size: {
        type: import("vue").PropType<import("..").SizeEnum>;
        default: import("..").SizeEnum;
        validator(val: import("..").SizeEnum): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    timePickerProps: {
        type: import("vue").PropType<import("..").TdTimePickerProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<DateValue>;
        default: DateValue;
    };
    modelValue: {
        type: import("vue").PropType<DateValue>;
        default: DateValue;
    };
    defaultValue: {
        type: import("vue").PropType<DateValue>;
        default: DateValue;
    };
    valueDisplay: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: DateValue;
            displayValue?: DateValue;
        }) => import("..").SlotReturnValue)>;
    };
    valueType: {
        type: import("vue").PropType<import("./type").DatePickerValueType>;
        default: import("./type").DatePickerValueType;
    };
    onBlur: import("vue").PropType<(context: {
        value: DateValue;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: DateValue, context: {
        dayjsValue?: dayjs.Dayjs;
        trigger?: import("./type").DatePickerTriggerSource;
    }) => void>;
    onConfirm: import("vue").PropType<(context: {
        date: Date;
        e: MouseEvent;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        value: DateValue;
        e: FocusEvent;
    }) => void>;
    onPick: import("vue").PropType<(value: DateValue) => void>;
    onPresetClick: import("vue").PropType<(context: {
        preset: import("./type").PresetDate;
        e: MouseEvent;
    }) => void>;
}>>, {
    value: DateValue;
    disabled: boolean;
    size: import("..").SizeEnum;
    status: "error" | "default" | "success" | "warning";
    mode: "month" | "year" | "quarter" | "week" | "date";
    placeholder: string;
    format: string;
    modelValue: DateValue;
    defaultValue: DateValue;
    clearable: boolean;
    allowInput: boolean;
    valueType: import("./type").DatePickerValueType;
    enableTimePicker: boolean;
    presetsPlacement: "left" | "top" | "bottom" | "right";
    defaultTime: string;
}, {}>;
export default _default;
