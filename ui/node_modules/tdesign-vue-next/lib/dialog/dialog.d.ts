import { DialogCloseContext } from './type';
declare const _default: import("vue").DefineComponent<{
    attach: {
        type: import("vue").PropType<import("..").AttachNode>;
    };
    body: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    cancelBtn: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdButtonProps>;
    };
    closeBtn: {
        type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    closeOnEscKeydown: {
        type: BooleanConstructor;
        default: any;
    };
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: any;
    };
    confirmBtn: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdButtonProps>;
    };
    confirmLoading: {
        type: BooleanConstructor;
        default: any;
    };
    confirmOnEnter: BooleanConstructor;
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    destroyOnClose: BooleanConstructor;
    draggable: BooleanConstructor;
    footer: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    header: {
        type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    mode: {
        type: import("vue").PropType<"normal" | "modal" | "modeless" | "full-screen">;
        default: "normal" | "modal" | "modeless" | "full-screen";
        validator(val: "normal" | "modal" | "modeless" | "full-screen"): boolean;
    };
    placement: {
        type: import("vue").PropType<"center" | "top">;
        default: "center" | "top";
        validator(val: "center" | "top"): boolean;
    };
    preventScrollThrough: {
        type: BooleanConstructor;
        default: boolean;
    };
    showInAttachedElement: BooleanConstructor;
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "success" | "warning" | "danger" | "info">;
        default: "default" | "success" | "warning" | "danger" | "info";
        validator(val: "default" | "success" | "warning" | "danger" | "info"): boolean;
    };
    top: {
        type: import("vue").PropType<string | number>;
    };
    visible: BooleanConstructor;
    width: {
        type: import("vue").PropType<string | number>;
    };
    zIndex: {
        type: NumberConstructor;
    };
    onCancel: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClose: import("vue").PropType<(context: DialogCloseContext) => void>;
    onCloseBtnClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClosed: import("vue").PropType<() => void>;
    onConfirm: import("vue").PropType<(context: {
        e: MouseEvent | KeyboardEvent;
    }) => void>;
    onEscKeydown: import("vue").PropType<(context: {
        e: KeyboardEvent;
    }) => void>;
    onOpened: import("vue").PropType<() => void>;
    onOverlayClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}, {
    COMPONENT_NAME: import("vue").ComputedRef<string>;
    isModal: import("vue").ComputedRef<boolean>;
    isModeLess: import("vue").ComputedRef<boolean>;
    isFullScreen: import("vue").ComputedRef<boolean>;
    maskClass: import("vue").ComputedRef<string[]>;
    dialogClass: import("vue").ComputedRef<string[]>;
    dialogStyle: import("vue").ComputedRef<{
        width: string | number;
    } | {
        width?: undefined;
    }>;
    dialogEle: import("vue").Ref<HTMLElement>;
    afterEnter: () => void;
    afterLeave: () => void;
    hasEventOn: (name: string) => boolean;
    renderDialog: () => JSX.Element;
    teleportElement: import("vue").Ref<string | Element>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:visible"[], "update:visible", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    attach: {
        type: import("vue").PropType<import("..").AttachNode>;
    };
    body: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    cancelBtn: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdButtonProps>;
    };
    closeBtn: {
        type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    closeOnEscKeydown: {
        type: BooleanConstructor;
        default: any;
    };
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: any;
    };
    confirmBtn: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdButtonProps>;
    };
    confirmLoading: {
        type: BooleanConstructor;
        default: any;
    };
    confirmOnEnter: BooleanConstructor;
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    destroyOnClose: BooleanConstructor;
    draggable: BooleanConstructor;
    footer: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    header: {
        type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    mode: {
        type: import("vue").PropType<"normal" | "modal" | "modeless" | "full-screen">;
        default: "normal" | "modal" | "modeless" | "full-screen";
        validator(val: "normal" | "modal" | "modeless" | "full-screen"): boolean;
    };
    placement: {
        type: import("vue").PropType<"center" | "top">;
        default: "center" | "top";
        validator(val: "center" | "top"): boolean;
    };
    preventScrollThrough: {
        type: BooleanConstructor;
        default: boolean;
    };
    showInAttachedElement: BooleanConstructor;
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "success" | "warning" | "danger" | "info">;
        default: "default" | "success" | "warning" | "danger" | "info";
        validator(val: "default" | "success" | "warning" | "danger" | "info"): boolean;
    };
    top: {
        type: import("vue").PropType<string | number>;
    };
    visible: BooleanConstructor;
    width: {
        type: import("vue").PropType<string | number>;
    };
    zIndex: {
        type: NumberConstructor;
    };
    onCancel: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClose: import("vue").PropType<(context: DialogCloseContext) => void>;
    onCloseBtnClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClosed: import("vue").PropType<() => void>;
    onConfirm: import("vue").PropType<(context: {
        e: MouseEvent | KeyboardEvent;
    }) => void>;
    onEscKeydown: import("vue").PropType<(context: {
        e: KeyboardEvent;
    }) => void>;
    onOpened: import("vue").PropType<() => void>;
    onOverlayClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}>> & {
    "onUpdate:visible"?: (...args: any[]) => any;
}, {
    visible: boolean;
    footer: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    header: string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    draggable: boolean;
    mode: "normal" | "modal" | "modeless" | "full-screen";
    theme: "default" | "success" | "warning" | "danger" | "info";
    placement: "center" | "top";
    destroyOnClose: boolean;
    preventScrollThrough: boolean;
    showOverlay: boolean;
    closeBtn: string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    closeOnEscKeydown: boolean;
    closeOnOverlayClick: boolean;
    confirmLoading: boolean;
    confirmOnEnter: boolean;
    showInAttachedElement: boolean;
}, {}>;
export default _default;
