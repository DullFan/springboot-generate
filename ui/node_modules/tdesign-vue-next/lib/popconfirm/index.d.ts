import { TdPopconfirmProps } from './type';
import './style';
export * from './type';
export declare type PopconfirmProps = TdPopconfirmProps;
export declare const Popconfirm: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        cancelBtn: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdButtonProps>;
            default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdButtonProps;
        };
        confirmBtn: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdButtonProps>;
            default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdButtonProps;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        destroyOnClose: {
            type: BooleanConstructor;
            default: boolean;
        };
        icon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        placement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
            default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
            validator(val: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        showArrow: {
            type: BooleanConstructor;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<"default" | "warning" | "danger">;
            default: "default" | "warning" | "danger";
            validator(val: "default" | "warning" | "danger"): boolean;
        };
        triggerElement: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        visible: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultVisible: BooleanConstructor;
        onCancel: import("vue").PropType<(options: {
            e: MouseEvent;
        }) => void>;
        onConfirm: import("vue").PropType<(options: {
            e: MouseEvent;
        }) => void>;
        onVisibleChange: import("vue").PropType<(visible: boolean, context?: import("./type").PopconfirmVisibleChangeContext) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        cancelBtn: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdButtonProps>;
            default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdButtonProps;
        };
        confirmBtn: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdButtonProps>;
            default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdButtonProps;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        destroyOnClose: {
            type: BooleanConstructor;
            default: boolean;
        };
        icon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        placement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
            default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
            validator(val: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        showArrow: {
            type: BooleanConstructor;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<"default" | "warning" | "danger">;
            default: "default" | "warning" | "danger";
            validator(val: "default" | "warning" | "danger"): boolean;
        };
        triggerElement: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        visible: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultVisible: BooleanConstructor;
        onCancel: import("vue").PropType<(options: {
            e: MouseEvent;
        }) => void>;
        onConfirm: import("vue").PropType<(options: {
            e: MouseEvent;
        }) => void>;
        onVisibleChange: import("vue").PropType<(visible: boolean, context?: import("./type").PopconfirmVisibleChangeContext) => void>;
    }>>, {
        visible: boolean;
        modelValue: boolean;
        theme: "default" | "warning" | "danger";
        placement: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        destroyOnClose: boolean;
        showArrow: boolean;
        defaultVisible: boolean;
        cancelBtn: import("..").SlotReturnValue | import("..").TdButtonProps;
        confirmBtn: import("..").SlotReturnValue | import("..").TdButtonProps;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        cancelBtn: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdButtonProps>;
            default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdButtonProps;
        };
        confirmBtn: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdButtonProps>;
            default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdButtonProps;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        destroyOnClose: {
            type: BooleanConstructor;
            default: boolean;
        };
        icon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        placement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
            default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
            validator(val: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        showArrow: {
            type: BooleanConstructor;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<"default" | "warning" | "danger">;
            default: "default" | "warning" | "danger";
            validator(val: "default" | "warning" | "danger"): boolean;
        };
        triggerElement: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        visible: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultVisible: BooleanConstructor;
        onCancel: import("vue").PropType<(options: {
            e: MouseEvent;
        }) => void>;
        onConfirm: import("vue").PropType<(options: {
            e: MouseEvent;
        }) => void>;
        onVisibleChange: import("vue").PropType<(visible: boolean, context?: import("./type").PopconfirmVisibleChangeContext) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        visible: boolean;
        modelValue: boolean;
        theme: "default" | "warning" | "danger";
        placement: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        destroyOnClose: boolean;
        showArrow: boolean;
        defaultVisible: boolean;
        cancelBtn: import("..").SlotReturnValue | import("..").TdButtonProps;
        confirmBtn: import("..").SlotReturnValue | import("..").TdButtonProps;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    cancelBtn: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdButtonProps>;
        default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdButtonProps;
    };
    confirmBtn: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdButtonProps>;
        default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdButtonProps;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    destroyOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    placement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
        default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        validator(val: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    showArrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "warning" | "danger">;
        default: "default" | "warning" | "danger";
        validator(val: "default" | "warning" | "danger"): boolean;
    };
    triggerElement: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    onCancel: import("vue").PropType<(options: {
        e: MouseEvent;
    }) => void>;
    onConfirm: import("vue").PropType<(options: {
        e: MouseEvent;
    }) => void>;
    onVisibleChange: import("vue").PropType<(visible: boolean, context?: import("./type").PopconfirmVisibleChangeContext) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    visible: boolean;
    modelValue: boolean;
    theme: "default" | "warning" | "danger";
    placement: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
    destroyOnClose: boolean;
    showArrow: boolean;
    defaultVisible: boolean;
    cancelBtn: import("..").SlotReturnValue | import("..").TdButtonProps;
    confirmBtn: import("..").SlotReturnValue | import("..").TdButtonProps;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Popconfirm;
