import { TdSpaceProps } from './type';
import './style';
export * from './type';
export declare type SpaceProps = TdSpaceProps;
export declare const Space: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        forceFlexGapPolyfill: BooleanConstructor;
        align: {
            type: import("vue").PropType<"center" | "end" | "start" | "baseline">;
            validator(val: "center" | "end" | "start" | "baseline"): boolean;
        };
        breakLine: BooleanConstructor;
        direction: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        separator: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        size: {
            type: import("vue").PropType<import("./type").SpaceSize | import("./type").SpaceSize[]>;
            default: import("./type").SpaceSize | import("./type").SpaceSize[];
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        forceFlexGapPolyfill: BooleanConstructor;
        align: {
            type: import("vue").PropType<"center" | "end" | "start" | "baseline">;
            validator(val: "center" | "end" | "start" | "baseline"): boolean;
        };
        breakLine: BooleanConstructor;
        direction: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        separator: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        size: {
            type: import("vue").PropType<import("./type").SpaceSize | import("./type").SpaceSize[]>;
            default: import("./type").SpaceSize | import("./type").SpaceSize[];
        };
    }>>, {
        direction: "horizontal" | "vertical";
        size: import("./type").SpaceSize | import("./type").SpaceSize[];
        forceFlexGapPolyfill: boolean;
        breakLine: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        forceFlexGapPolyfill: BooleanConstructor;
        align: {
            type: import("vue").PropType<"center" | "end" | "start" | "baseline">;
            validator(val: "center" | "end" | "start" | "baseline"): boolean;
        };
        breakLine: BooleanConstructor;
        direction: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        separator: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        size: {
            type: import("vue").PropType<import("./type").SpaceSize | import("./type").SpaceSize[]>;
            default: import("./type").SpaceSize | import("./type").SpaceSize[];
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        direction: "horizontal" | "vertical";
        size: import("./type").SpaceSize | import("./type").SpaceSize[];
        forceFlexGapPolyfill: boolean;
        breakLine: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    forceFlexGapPolyfill: BooleanConstructor;
    align: {
        type: import("vue").PropType<"center" | "end" | "start" | "baseline">;
        validator(val: "center" | "end" | "start" | "baseline"): boolean;
    };
    breakLine: BooleanConstructor;
    direction: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    separator: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    size: {
        type: import("vue").PropType<import("./type").SpaceSize | import("./type").SpaceSize[]>;
        default: import("./type").SpaceSize | import("./type").SpaceSize[];
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    direction: "horizontal" | "vertical";
    size: import("./type").SpaceSize | import("./type").SpaceSize[];
    forceFlexGapPolyfill: boolean;
    breakLine: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Space;
