{"version":3,"file":"space.js","sources":["../../src/space/space.tsx"],"sourcesContent":["import { defineComponent, computed, CSSProperties, Fragment } from 'vue';\nimport props from './props';\nimport { usePrefixClass } from '../hooks/useConfig';\nimport { useTNodeJSX } from '../hooks/tnode';\nimport { useChildSlots } from '../hooks/slot';\nimport isNumber from 'lodash/isNumber';\nimport isString from 'lodash/isString';\nimport isArray from 'lodash/isArray';\nimport { getFlexGapPolyFill } from '../_common/js/utils/helper';\n\nconst sizeMap = { small: '8px', medium: '16px', large: '24px' };\nconst defaultNeedPolyfill = getFlexGapPolyFill();\n\nexport default defineComponent({\n  name: 'TSpace',\n\n  props: {\n    ...props,\n    /** 强制使用 margin 间距代替 gap 属性间距（某些浏览器不支持 gap 属性） */\n    forceFlexGapPolyfill: Boolean,\n  },\n\n  setup(props) {\n    const COMPONENT_NAME = usePrefixClass('space');\n    const renderTNodeJSX = useTNodeJSX();\n    const getChildSlots = useChildSlots();\n\n    const needPolyfill = computed(() => props.forceFlexGapPolyfill || defaultNeedPolyfill);\n\n    const renderStyle = computed<CSSProperties>(() => {\n      let renderGap = '';\n      if (isArray(props.size)) {\n        renderGap = props.size\n          .map((s) => {\n            if (isNumber(s)) return `${s}px`;\n            if (isString(s)) return sizeMap[s] || s;\n            return s;\n          })\n          .join(' ');\n      } else if (isString(props.size)) {\n        renderGap = sizeMap[props.size] || props.size;\n      } else if (isNumber(props.size)) {\n        renderGap = `${props.size}px`;\n      }\n\n      const style: { [key: string]: string | number } = {};\n      if (needPolyfill.value) {\n        const [columnGap, rowGap] = renderGap.split(' ');\n        style['--td-space-column-gap'] = columnGap;\n        style['--td-space-row-gap'] = rowGap || columnGap;\n      } else {\n        style.gap = renderGap;\n      }\n      return style;\n    });\n\n    function renderChildren() {\n      const children = getChildSlots();\n      const separatorContent = renderTNodeJSX('separator');\n      return children.map((child, index) => {\n        // filter last child\n        const showSeparator = index + 1 !== children.length && separatorContent;\n        return (\n          <Fragment>\n            <div class={`${COMPONENT_NAME.value}-item`}>{child}</div>\n            {showSeparator && <div class={`${COMPONENT_NAME.value}-item-separator`}>{separatorContent}</div>}\n          </Fragment>\n        );\n      });\n    }\n\n    return () => {\n      const spaceClassNames = [\n        `${COMPONENT_NAME.value}`,\n        {\n          [`${COMPONENT_NAME.value}-align-${props.align}`]: props.align,\n          [`${COMPONENT_NAME.value}-${props.direction}`]: props.direction,\n          [`${COMPONENT_NAME.value}--break-line`]: props.breakLine,\n          [`${COMPONENT_NAME.value}--polyfill`]: needPolyfill.value,\n        },\n      ];\n\n      return (\n        <div class={spaceClassNames} style={renderStyle.value}>\n          {renderChildren()}\n        </div>\n      );\n    };\n  },\n});\n"],"names":["sizeMap","small","medium","large","defaultNeedPolyfill","getFlexGapPolyFill","defineComponent","name","props","_objectSpread","forceFlexGapPolyfill","Boolean","setup","COMPONENT_NAME","usePrefixClass","renderTNodeJSX","useTNodeJSX","getChildSlots","useChildSlots","needPolyfill","computed","renderStyle","renderGap","isArray","size","map","s","isNumber","concat","isString","join","style","value","_renderGap$split","split","_renderGap$split2","_slicedToArray","columnGap","rowGap","gap","renderChildren","children","separatorContent","child","index","showSeparator","length","_createVNode","_Fragment","spaceClassNames","_defineProperty","align","direction","breakLine"],"mappings":"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"}