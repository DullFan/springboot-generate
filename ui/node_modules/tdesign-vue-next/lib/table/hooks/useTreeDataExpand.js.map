{"version":3,"file":"useTreeDataExpand.js","sources":["../../../src/table/hooks/useTreeDataExpand.ts"],"sourcesContent":["import { ComputedRef, nextTick, ref, Ref, toRefs, watch } from 'vue';\nimport { TdEnhancedTableProps, TableRowData } from '../type';\nimport useDefaultValue from '../../hooks/useDefaultValue';\nimport TableTreeStore, { diffExpandedTreeNode, getUniqueRowValue } from '../../_common/js/table/tree-store';\nimport { TableTreeExpandType } from '../interface';\n\nexport function useTreeDataExpand(\n  props: TdEnhancedTableProps,\n  params: {\n    store: Ref<InstanceType<typeof TableTreeStore>>;\n    dataSource: Ref<TdEnhancedTableProps['data']>;\n    rowDataKeys: ComputedRef<{ rowKey: string; childrenKey: string }>;\n  },\n) {\n  const { store, dataSource, rowDataKeys } = params;\n  const { data, expandedTreeNodes, tree } = toRefs(props);\n\n  const isDefaultExpandAllExecute = ref(false);\n  const isDefaultExpandedTreeNodesExecute = ref(false);\n  const [tExpandedTreeNode, setTExpandedTreeNode] = useDefaultValue(\n    expandedTreeNodes,\n    props.defaultExpandedTreeNodes,\n    props.onExpandedTreeNodesChange,\n    'expandedTreeNodes',\n  );\n\n  const changedExpandTreeNode = ref<{\n    type?: TableTreeExpandType;\n    row?: TableRowData;\n    rowIndex?: number;\n  }>({ type: 'props-change' });\n\n  /**\n   * 对外暴露的组件实例方法，展开所有节点\n   */\n  function expandAll(type: 'expand-all' | 'default-expand-all' = 'expand-all', list?: TableRowData[]) {\n    const newData = list || data.value;\n    dataSource.value = store.value.expandAll(newData, rowDataKeys.value);\n    const expandedNode = dataSource.value.map((t) => getUniqueRowValue(t, rowDataKeys.value.rowKey));\n    setTExpandedTreeNode(expandedNode, {\n      row: undefined,\n      rowState: undefined,\n      rowIndex: undefined,\n      type: 'expand',\n      trigger: type,\n    });\n    changedExpandTreeNode.value.type = 'expand-all';\n  }\n\n  /**\n   * 对外暴露的组件实例方法，收起所有节点\n   */\n  function foldAll() {\n    dataSource.value = [...store.value.foldAll(dataSource.value, rowDataKeys.value)];\n    setTExpandedTreeNode([], {\n      row: undefined,\n      rowState: undefined,\n      rowIndex: undefined,\n      type: 'fold',\n      trigger: 'fold-all',\n    });\n  }\n\n  function onExpandFoldIconClick(\n    p: { row: TableRowData; rowIndex: number },\n    trigger?: 'expand-fold-icon' | 'row-click',\n  ) {\n    const { row, rowIndex } = p;\n    changedExpandTreeNode.value = {\n      type: 'user-reaction-change',\n      ...p,\n    };\n    const rowValue = getUniqueRowValue(row, rowDataKeys.value.rowKey);\n    const rowState = store.value.treeDataMap.get(rowValue);\n    let expandedNodes = [...tExpandedTreeNode.value];\n    if (rowState.expanded) {\n      const expandedChildrenKeys = store.value.getExpandedChildrenKeys([row], rowDataKeys.value);\n      for (let i = 0, len = expandedNodes.length; i < len; i++) {\n        const nodeValue = expandedNodes[i];\n        if (expandedChildrenKeys.includes(nodeValue)) {\n          expandedNodes[i] = undefined;\n        }\n      }\n      expandedNodes = expandedNodes.filter(Boolean);\n    } else {\n      expandedNodes.push(rowValue);\n    }\n    const params = {\n      row,\n      rowIndex,\n      rowState,\n      trigger,\n    };\n    setTExpandedTreeNode(expandedNodes, {\n      ...params,\n      type: rowState.expanded ? 'fold' : 'expand',\n    });\n    props.onTreeExpandChange?.(params);\n  }\n\n  function updateExpandState(\n    data: TableRowData[],\n    tExpandedTreeNode: (string | number)[],\n    oldExpandedTreeNode: (string | number)[] = [],\n  ) {\n    const { addedList, removedList } = diffExpandedTreeNode(tExpandedTreeNode, oldExpandedTreeNode);\n    store.value.expandTreeNode(addedList, data, rowDataKeys.value);\n    store.value.foldTreeNode(removedList, data, rowDataKeys.value);\n    return [...data];\n  }\n\n  watch([tExpandedTreeNode, data], ([tExpandedTreeNode], [oldExpandedTreeNode]) => {\n    if (!store.value.treeDataMap.size || !data.value.length) return;\n    if (changedExpandTreeNode.value.type === 'user-reaction-change') {\n      const { row, rowIndex } = changedExpandTreeNode.value || {};\n      dataSource.value = [...store.value.toggleExpandData({ row, rowIndex }, [...dataSource.value], rowDataKeys.value)];\n    } else if (changedExpandTreeNode.value.type === 'props-change') {\n      updateExpandState(dataSource.value, tExpandedTreeNode, oldExpandedTreeNode);\n    }\n    changedExpandTreeNode.value.type = 'props-change';\n  });\n\n  const updateExpandOnDataChange = (data: TableRowData[]) => {\n    if (tree.value?.defaultExpandAll && !isDefaultExpandAllExecute.value) {\n      expandAll('default-expand-all', [...data]);\n      isDefaultExpandAllExecute.value = true;\n    } else if (tExpandedTreeNode.value?.length) {\n      nextTick(() => {\n        dataSource.value = updateExpandState([...data], tExpandedTreeNode.value, []);\n      });\n    }\n  };\n\n  return {\n    tExpandedTreeNode,\n    isDefaultExpandAllExecute,\n    isDefaultExpandedTreeNodesExecute,\n    expandAll,\n    foldAll,\n    onExpandFoldIconClick,\n    updateExpandOnDataChange,\n  };\n}\n\nexport default useTreeDataExpand;\n"],"names":["useTreeDataExpand","props","params","store","dataSource","rowDataKeys","_toRefs","toRefs","data","expandedTreeNodes","tree","isDefaultExpandAllExecute","ref","isDefaultExpandedTreeNodesExecute","_useDefaultValue","useDefaultValue","defaultExpandedTreeNodes","onExpandedTreeNodesChange","_useDefaultValue2","_slicedToArray","tExpandedTreeNode","setTExpandedTreeNode","changedExpandTreeNode","type","expandAll","arguments","length","undefined","list","newData","value","expandedNode","map","t","getUniqueRowValue","rowKey","row","rowState","rowIndex","trigger","foldAll","_toConsumableArray","onExpandFoldIconClick","p","_props$onTreeExpandCh","_objectSpread","rowValue","treeDataMap","get","expandedNodes","expanded","expandedChildrenKeys","getExpandedChildrenKeys","i","len","nodeValue","includes","filter","Boolean","push","onTreeExpandChange","call","updateExpandState","oldExpandedTreeNode","_diffExpandedTreeNode","diffExpandedTreeNode","addedList","removedList","expandTreeNode","foldTreeNode","watch","_ref","_ref2","_ref3","_ref4","size","_ref5","toggleExpandData","updateExpandOnDataChange","_tree$value","_tExpandedTreeNode$va","defaultExpandAll","nextTick"],"mappings":"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"}