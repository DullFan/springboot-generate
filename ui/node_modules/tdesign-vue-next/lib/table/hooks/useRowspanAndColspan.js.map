{"version":3,"file":"useRowspanAndColspan.js","sources":["../../../src/table/hooks/useRowspanAndColspan.ts"],"sourcesContent":["import { ref, watch, Ref } from 'vue';\nimport get from 'lodash/get';\nimport log from '../../_common/js/log';\nimport { BaseTableCellParams, BaseTableCol, TableRowData, TableRowspanAndColspanFunc } from '../type';\n\nexport interface SkipSpansValue {\n  colspan?: number;\n  rowspan?: number;\n  skipped?: boolean;\n}\n\nexport function getCellKey(row: TableRowData, rowKey: string, colKey: string, colIndex: number) {\n  const rowValue = get(row, rowKey);\n  if (rowValue === undefined) {\n    log.error('Table', 'rowKey is wrong, can not get unique identifier of row.');\n  }\n  return [rowValue, colKey || colIndex].join('_');\n}\n\nexport default function useRowspanAndColspan(\n  data: Ref<TableRowData[]>,\n  columns: Ref<BaseTableCol<TableRowData>[]>,\n  rowKey: Ref<string>,\n  rowspanAndColspan: Ref<TableRowspanAndColspanFunc<TableRowData>>,\n) {\n  const skipSpansMap = ref(new Map<string, SkipSpansValue>());\n\n  // 计算单元格是否跳过渲染\n  const onTrRowspanOrColspan = (params: BaseTableCellParams<TableRowData>, skipSpansValue: SkipSpansValue) => {\n    const { rowIndex, colIndex } = params;\n    if (!skipSpansValue.rowspan && !skipSpansValue.colspan) return;\n    const maxRowIndex = rowIndex + (skipSpansValue.rowspan || 1);\n    const maxColIndex = colIndex + (skipSpansValue.colspan || 1);\n    for (let i = rowIndex; i < maxRowIndex; i++) {\n      for (let j = colIndex; j < maxColIndex; j++) {\n        if (i !== rowIndex || j !== colIndex) {\n          if (!data.value[i] || !columns.value[j]) return;\n          const cellKey = getCellKey(data.value[i], rowKey.value, columns.value[j].colKey, j);\n          const state = skipSpansMap.value.get(cellKey) || {};\n          state.skipped = true;\n          skipSpansMap.value.set(cellKey, state);\n        }\n      }\n    }\n  };\n\n  // 计算单元格是否需要设置 rowspan 和 colspan\n  const updateSkipSpansMap = (\n    data: TableRowData[],\n    columns: BaseTableCol<TableRowData>[],\n    rowspanAndColspan: TableRowspanAndColspanFunc<TableRowData>,\n  ) => {\n    skipSpansMap.value?.clear();\n    if (!data || !rowspanAndColspan) return;\n    for (let i = 0, len = data.length; i < len; i++) {\n      const row = data[i];\n      for (let j = 0, colLen = columns.length; j < colLen; j++) {\n        const col = columns[j];\n        const params = {\n          row,\n          col,\n          rowIndex: i,\n          colIndex: j,\n        };\n        const cellKey = getCellKey(row, rowKey.value, col.colKey, j);\n        const state = skipSpansMap.value.get(cellKey) || {};\n        const o = rowspanAndColspan(params) || {};\n        if (o.rowspan || o.colspan || state.rowspan || state.colspan) {\n          o.rowspan && (state.rowspan = o.rowspan);\n          o.colspan && (state.colspan = o.colspan);\n          skipSpansMap.value.set(cellKey, state);\n        }\n        onTrRowspanOrColspan?.(params, state);\n      }\n    }\n  };\n\n  watch(\n    () => [data.value, columns.value, rowspanAndColspan],\n    () => {\n      updateSkipSpansMap(data.value, columns.value, rowspanAndColspan?.value);\n    },\n    { immediate: true },\n  );\n\n  return { skipSpansMap };\n}\n"],"names":["getCellKey","row","rowKey","colKey","colIndex","rowValue","get","log","error","join","useRowspanAndColspan","data","columns","rowspanAndColspan","skipSpansMap","ref","Map","onTrRowspanOrColspan","params","skipSpansValue","rowIndex","rowspan","colspan","maxRowIndex","maxColIndex","i","j","value","cellKey","state","skipped","set","updateSkipSpansMap","_skipSpansMap$value","clear","len","length","colLen","col","o","watch","immediate"],"mappings":"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"}