/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

import { usePrefixClass } from '../../hooks/useConfig.js';
import 'vue';
import '../../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import 'lodash/isString';
import '../../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../../_common/js/global-config/default-config.js';
import '../../_common/js/global-config/locale/zh_CN.js';
import '../../_chunks/dep-8e5c228b.js';
import '@babel/runtime/helpers/typeof';
import '../../_chunks/dep-d3784887.js';
import 'dayjs';
import 'lodash/isArray';

function useItemEvents(state) {
  var context = state.context;
  var classPrefix = usePrefixClass().value;
  var handleChange = function handleChange(_, ctx) {
    var node = state.node;
    var event = new Event("change");
    var evtContext = {
      event: event,
      node: node
    };
    context.emit("change", evtContext, ctx);
  };
  var clicked = false;
  var handleClick = function handleClick(evt) {
    var _srcTarget$className, _srcTarget$className$;
    var node = state.node,
      treeScope = state.treeScope;
    var _treeScope$treeProps = treeScope.treeProps,
      treeProps = _treeScope$treeProps === void 0 ? {} : _treeScope$treeProps;
    var expandOnClickNode = treeProps.expandOnClickNode;
    var srcTarget = evt.target;
    var isBranchTrigger = node.children && expandOnClickNode && (srcTarget.className === "".concat(classPrefix, "-checkbox__input") || srcTarget.tagName.toLowerCase() === "input");
    if (clicked || isBranchTrigger) return;
    clicked = true;
    setTimeout(function () {
      clicked = false;
    });
    if (expandOnClickNode && node.children && ((_srcTarget$className = srcTarget.className) === null || _srcTarget$className === void 0 || (_srcTarget$className$ = _srcTarget$className.indexOf) === null || _srcTarget$className$ === void 0 ? void 0 : _srcTarget$className$.call(_srcTarget$className, "".concat(classPrefix, "-tree__label"))) !== -1) evt.preventDefault();
    var evtContext = {
      mouseEvent: evt,
      event: evt,
      node: node,
      path: node.getPath()
    };
    context.emit("click", evtContext);
  };
  return {
    handleChange: handleChange,
    handleClick: handleClick
  };
}

export { useItemEvents as default };
//# sourceMappingURL=useItemEvents.js.map
