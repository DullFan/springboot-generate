{"version":3,"file":"useDragHandle.js","sources":["../../../src/tree/hooks/useDragHandle.ts"],"sourcesContent":["import { TreeNode } from '../adapt';\nimport { TreeProps, TypDragEventState, TypeTreeState, TypeDragHandle } from '../tree-types';\nimport { emitEvent } from '../util';\n\nexport default function useDragHandle(state: TypeTreeState) {\n  const { props, context, scope, store } = state;\n  let dragNode: TreeNode = null;\n\n  const handleDragStart = (state: TypDragEventState) => {\n    const { dragEvent, node } = state;\n    dragNode = node;\n\n    const ctx = {\n      node: node.getModel(),\n      e: dragEvent,\n    };\n    emitEvent<Parameters<TreeProps['onDragStart']>>(props, context, 'drag-start', ctx);\n  };\n\n  const handleDragEnd = (state: TypDragEventState) => {\n    const { dragEvent, node } = state;\n    dragNode = node;\n\n    const ctx = {\n      node: node.getModel(),\n      e: dragEvent,\n    };\n    emitEvent<Parameters<TreeProps['onDragEnd']>>(props, context, 'drag-end', ctx);\n  };\n\n  const handleDragOver = (state: TypDragEventState) => {\n    const { dragEvent, node } = state;\n    const ctx = {\n      node: node.getModel(),\n      e: dragEvent,\n    };\n    emitEvent<Parameters<TreeProps['onDragOver']>>(props, context, 'drag-over', ctx);\n  };\n\n  const handleDragLeave = (state: TypDragEventState) => {\n    const { dragEvent, node } = state;\n    const ctx = {\n      node: node.getModel(),\n      e: dragEvent,\n    };\n    emitEvent<Parameters<TreeProps['onDragLeave']>>(props, context, 'drag-leave', ctx);\n  };\n\n  const handleDrop = (state: TypDragEventState) => {\n    const { dragEvent, node, dropPosition } = state;\n    if (node.value === dragNode.value || node.getParents().some((_node) => _node.value === dragNode.value)) return;\n\n    const nodes = store.getNodes() as TreeNode[];\n    nodes.some((_node) => {\n      if (_node.value === node.value) {\n        if (dropPosition === 0) {\n          dragNode.appendTo(store, _node);\n        } else if (dropPosition < 0) {\n          node.insertBefore(dragNode);\n        } else {\n          node.insertAfter(dragNode);\n        }\n        return true;\n      }\n      return false;\n    });\n    const ctx = {\n      dropNode: node.getModel(),\n      dragNode: dragNode.getModel(),\n      dropPosition,\n      e: dragEvent,\n    };\n    emitEvent<Parameters<TreeProps['onDrop']>>(props, context, 'drop', ctx);\n  };\n\n  const drag: TypeDragHandle = {\n    handleDragStart,\n    handleDragEnd,\n    handleDragOver,\n    handleDragLeave,\n    handleDrop,\n  };\n\n  scope.drag = drag;\n\n  return {\n    drag,\n  };\n}\n"],"names":["useDragHandle","state","props","context","scope","store","dragNode","handleDragStart","dragEvent","node","ctx","getModel","e","emitEvent","handleDragEnd","handleDragOver","handleDragLeave","handleDrop","dropPosition","value","getParents","some","_node","nodes","getNodes","appendTo","insertBefore","insertAfter","dropNode","drag"],"mappings":"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"}