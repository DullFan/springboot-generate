/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

import { createVNode } from 'vue';
import { getTNode } from '../util.js';
import { usePrefixClass } from '../../hooks/useConfig.js';
import '@babel/runtime/helpers/defineProperty';
import 'lodash/camelCase';
import '../../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import 'lodash/isString';
import '../../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../../_common/js/global-config/default-config.js';
import '../../_common/js/global-config/locale/zh_CN.js';
import '../../_chunks/dep-8e5c228b.js';
import '@babel/runtime/helpers/typeof';
import '../../_chunks/dep-d3784887.js';
import 'dayjs';
import 'lodash/isArray';

function useRenderOperations(state) {
  var componentName = usePrefixClass("tree").value;
  var renderOperations = function renderOperations(h) {
    var node = state.node,
      treeScope = state.treeScope;
    var scopedSlots = treeScope.scopedSlots;
    var treeProps = (treeScope === null || treeScope === void 0 ? void 0 : treeScope.treeProps) || {};
    var operations = treeProps.operations;
    var opNode = null;
    if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.operations) {
      opNode = scopedSlots.operations({
        node: node === null || node === void 0 ? void 0 : node.getModel()
      });
    } else {
      opNode = getTNode(operations, {
        createElement: h,
        node: node
      });
    }
    if (opNode) {
      opNode = createVNode("span", {
        "class": "".concat(componentName, "__operations"),
        "ignore": "active,expand"
      }, [opNode]);
    }
    return opNode;
  };
  return {
    renderOperations: renderOperations
  };
}

export { useRenderOperations as default };
//# sourceMappingURL=useRenderOperations.js.map
