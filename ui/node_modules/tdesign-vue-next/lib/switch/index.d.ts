import { TdSwitchProps } from './type';
import './style';
export * from './type';
export declare type SwitchProps = TdSwitchProps;
export declare const Switch: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        customValue: {
            type: import("vue").PropType<import("./type").SwitchValue[]>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        label: {
            type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("..").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
                value: import("./type").SwitchValue;
            }) => import("..").SlotReturnValue)>;
            default: () => (string | ((h: typeof import("vue").h) => import("..").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
                value: import("./type").SwitchValue;
            }) => import("..").SlotReturnValue);
        };
        loading: BooleanConstructor;
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").SwitchValue>;
            default: import("./type").SwitchValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").SwitchValue>;
            default: import("./type").SwitchValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").SwitchValue>;
        };
        onChange: import("vue").PropType<(value: import("./type").SwitchValue, context: {
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        customValue: {
            type: import("vue").PropType<import("./type").SwitchValue[]>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        label: {
            type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("..").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
                value: import("./type").SwitchValue;
            }) => import("..").SlotReturnValue)>;
            default: () => (string | ((h: typeof import("vue").h) => import("..").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
                value: import("./type").SwitchValue;
            }) => import("..").SlotReturnValue);
        };
        loading: BooleanConstructor;
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").SwitchValue>;
            default: import("./type").SwitchValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").SwitchValue>;
            default: import("./type").SwitchValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").SwitchValue>;
        };
        onChange: import("vue").PropType<(value: import("./type").SwitchValue, context: {
            e: MouseEvent;
        }) => void>;
    }>>, {
        value: import("./type").SwitchValue;
        loading: boolean;
        label: (string | ((h: typeof import("vue").h) => import("..").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
            value: import("./type").SwitchValue;
        }) => import("..").SlotReturnValue);
        disabled: boolean;
        size: "small" | "medium" | "large";
        modelValue: import("./type").SwitchValue;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        customValue: {
            type: import("vue").PropType<import("./type").SwitchValue[]>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        label: {
            type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("..").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
                value: import("./type").SwitchValue;
            }) => import("..").SlotReturnValue)>;
            default: () => (string | ((h: typeof import("vue").h) => import("..").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
                value: import("./type").SwitchValue;
            }) => import("..").SlotReturnValue);
        };
        loading: BooleanConstructor;
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").SwitchValue>;
            default: import("./type").SwitchValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").SwitchValue>;
            default: import("./type").SwitchValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").SwitchValue>;
        };
        onChange: import("vue").PropType<(value: import("./type").SwitchValue, context: {
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        value: import("./type").SwitchValue;
        loading: boolean;
        label: (string | ((h: typeof import("vue").h) => import("..").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
            value: import("./type").SwitchValue;
        }) => import("..").SlotReturnValue);
        disabled: boolean;
        size: "small" | "medium" | "large";
        modelValue: import("./type").SwitchValue;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    customValue: {
        type: import("vue").PropType<import("./type").SwitchValue[]>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    label: {
        type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("..").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
            value: import("./type").SwitchValue;
        }) => import("..").SlotReturnValue)>;
        default: () => (string | ((h: typeof import("vue").h) => import("..").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
            value: import("./type").SwitchValue;
        }) => import("..").SlotReturnValue);
    };
    loading: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").SwitchValue>;
        default: import("./type").SwitchValue;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").SwitchValue>;
        default: import("./type").SwitchValue;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").SwitchValue>;
    };
    onChange: import("vue").PropType<(value: import("./type").SwitchValue, context: {
        e: MouseEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: import("./type").SwitchValue;
    loading: boolean;
    label: (string | ((h: typeof import("vue").h) => import("..").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
        value: import("./type").SwitchValue;
    }) => import("..").SlotReturnValue);
    disabled: boolean;
    size: "small" | "medium" | "large";
    modelValue: import("./type").SwitchValue;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Switch;
