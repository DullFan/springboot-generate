declare const _default: import("vue").DefineComponent<{
    align: {
        type: import("vue").PropType<"center" | "left" | "right">;
        validator(val: "center" | "left" | "right"): boolean;
    };
    allowInputOverLimit: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoWidth: BooleanConstructor;
    decimalPlaces: {
        type: NumberConstructor;
        default: any;
    };
    disabled: BooleanConstructor;
    format: {
        type: import("vue").PropType<(value: import("./type").InputNumberValue, context?: {
            fixedNumber?: import("./type").InputNumberValue;
        }) => import("./type").InputNumberValue>;
    };
    inputProps: {
        type: import("vue").PropType<import("../input").InputProps<import("../input").InputValue>>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    largeNumber: BooleanConstructor;
    max: {
        type: import("vue").PropType<import("./type").InputNumberValue>;
        default: import("./type").InputNumberValue;
    };
    min: {
        type: import("vue").PropType<import("./type").InputNumberValue>;
        default: import("./type").InputNumberValue;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    readonly: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    step: {
        type: import("vue").PropType<import("./type").InputNumberValue>;
        default: import("./type").InputNumberValue;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    theme: {
        type: import("vue").PropType<"normal" | "column" | "row">;
        default: "normal" | "column" | "row";
        validator(val: "normal" | "column" | "row"): boolean;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").InputNumberValue>;
        default: import("./type").InputNumberValue;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").InputNumberValue>;
        default: import("./type").InputNumberValue;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").InputNumberValue>;
    };
    onBlur: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").InputNumberValue, context: import("./type").ChangeContext) => void>;
    onEnter: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
        e: FocusEvent;
    }) => void>;
    onKeydown: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeypress: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeyup: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onValidate: import("vue").PropType<(context: {
        error?: "exceed-maximum" | "below-minimum";
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    align: {
        type: import("vue").PropType<"center" | "left" | "right">;
        validator(val: "center" | "left" | "right"): boolean;
    };
    allowInputOverLimit: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoWidth: BooleanConstructor;
    decimalPlaces: {
        type: NumberConstructor;
        default: any;
    };
    disabled: BooleanConstructor;
    format: {
        type: import("vue").PropType<(value: import("./type").InputNumberValue, context?: {
            fixedNumber?: import("./type").InputNumberValue;
        }) => import("./type").InputNumberValue>;
    };
    inputProps: {
        type: import("vue").PropType<import("../input").InputProps<import("../input").InputValue>>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    largeNumber: BooleanConstructor;
    max: {
        type: import("vue").PropType<import("./type").InputNumberValue>;
        default: import("./type").InputNumberValue;
    };
    min: {
        type: import("vue").PropType<import("./type").InputNumberValue>;
        default: import("./type").InputNumberValue;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    readonly: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    step: {
        type: import("vue").PropType<import("./type").InputNumberValue>;
        default: import("./type").InputNumberValue;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    theme: {
        type: import("vue").PropType<"normal" | "column" | "row">;
        default: "normal" | "column" | "row";
        validator(val: "normal" | "column" | "row"): boolean;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").InputNumberValue>;
        default: import("./type").InputNumberValue;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").InputNumberValue>;
        default: import("./type").InputNumberValue;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").InputNumberValue>;
    };
    onBlur: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").InputNumberValue, context: import("./type").ChangeContext) => void>;
    onEnter: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
        e: FocusEvent;
    }) => void>;
    onKeydown: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeypress: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeyup: import("vue").PropType<(value: import("./type").InputNumberValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onValidate: import("vue").PropType<(context: {
        error?: "exceed-maximum" | "below-minimum";
    }) => void>;
}>>, {
    max: import("./type").InputNumberValue;
    value: import("./type").InputNumberValue;
    disabled: boolean;
    size: "small" | "medium" | "large";
    readonly: boolean;
    status: "error" | "default" | "success" | "warning";
    step: import("./type").InputNumberValue;
    placeholder: string;
    min: import("./type").InputNumberValue;
    modelValue: import("./type").InputNumberValue;
    theme: "normal" | "column" | "row";
    autoWidth: boolean;
    largeNumber: boolean;
    decimalPlaces: number;
    allowInputOverLimit: boolean;
}, {}>;
export default _default;
