declare const _default: import("vue").DefineComponent<{
    container: {
        type: import("vue").PropType<import("..").AttachNode>;
        default: import("..").AttachNode;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    shape: {
        type: import("vue").PropType<import("./type").BackTopShapeEnum>;
        default: import("./type").BackTopShapeEnum;
        validator(val: import("./type").BackTopShapeEnum): boolean;
    };
    size: {
        type: import("vue").PropType<"small" | "medium">;
        default: "small" | "medium";
        validator(val: "small" | "medium"): boolean;
    };
    target: {
        type: import("vue").PropType<import("..").AttachNode>;
        default: import("..").AttachNode;
    };
    theme: {
        type: import("vue").PropType<"dark" | "light" | "primary">;
        default: "dark" | "light" | "primary";
        validator(val: "dark" | "light" | "primary"): boolean;
    };
    visibleHeight: {
        type: import("vue").PropType<string | number>;
        default: string | number;
    };
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    container: {
        type: import("vue").PropType<import("..").AttachNode>;
        default: import("..").AttachNode;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    shape: {
        type: import("vue").PropType<import("./type").BackTopShapeEnum>;
        default: import("./type").BackTopShapeEnum;
        validator(val: import("./type").BackTopShapeEnum): boolean;
    };
    size: {
        type: import("vue").PropType<"small" | "medium">;
        default: "small" | "medium";
        validator(val: "small" | "medium"): boolean;
    };
    target: {
        type: import("vue").PropType<import("..").AttachNode>;
        default: import("..").AttachNode;
    };
    theme: {
        type: import("vue").PropType<"dark" | "light" | "primary">;
        default: "dark" | "light" | "primary";
        validator(val: "dark" | "light" | "primary"): boolean;
    };
    visibleHeight: {
        type: import("vue").PropType<string | number>;
        default: string | number;
    };
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}>>, {
    offset: (string | number)[];
    target: import("..").AttachNode;
    size: "small" | "medium";
    container: import("..").AttachNode;
    duration: number;
    shape: import("./type").BackTopShapeEnum;
    theme: "dark" | "light" | "primary";
    visibleHeight: string | number;
}, {}>;
export default _default;
