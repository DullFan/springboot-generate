import { TdTextareaProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    allowInputOverMax: {
        type: BooleanConstructor;
        default: boolean;
    };
    autofocus: BooleanConstructor;
    autosize: {
        type: PropType<boolean | {
            minRows?: number;
            maxRows?: number;
        }>;
        default: boolean | {
            minRows?: number;
            maxRows?: number;
        };
    };
    disabled: BooleanConstructor;
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: PropType<string | number>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    readonly: BooleanConstructor;
    status: {
        type: PropType<"error" | "default" | "success" | "warning">;
        validator(val: TdTextareaProps['status']): boolean;
    };
    tips: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: PropType<import("./type").TextareaValue>;
    };
    modelValue: {
        type: PropType<import("./type").TextareaValue>;
    };
    defaultValue: {
        type: PropType<import("./type").TextareaValue>;
    };
    onBlur: PropType<(value: import("./type").TextareaValue, context: {
        e: FocusEvent;
    }) => void>;
    onChange: PropType<(value: import("./type").TextareaValue, context?: {
        e?: InputEvent;
    }) => void>;
    onFocus: PropType<(value: import("./type").TextareaValue, context: {
        e: FocusEvent;
    }) => void>;
    onKeydown: PropType<(value: import("./type").TextareaValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeypress: PropType<(value: import("./type").TextareaValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeyup: PropType<(value: import("./type").TextareaValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onValidate: PropType<(context: {
        error?: "exceed-maximum" | "below-minimum";
    }) => void>;
};
export default _default;
