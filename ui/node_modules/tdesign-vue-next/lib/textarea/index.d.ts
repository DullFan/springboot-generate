import { TdTextareaProps } from './type';
import './style';
export * from './type';
export declare type TextareaProps = TdTextareaProps;
export declare const Textarea: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        allowInputOverMax: {
            type: BooleanConstructor;
            default: boolean;
        };
        autofocus: BooleanConstructor;
        autosize: {
            type: import("vue").PropType<boolean | {
                minRows?: number;
                maxRows?: number;
            }>;
            default: boolean | {
                minRows?: number;
                maxRows?: number;
            };
        };
        disabled: BooleanConstructor;
        maxcharacter: {
            type: NumberConstructor;
        };
        maxlength: {
            type: import("vue").PropType<string | number>;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        readonly: BooleanConstructor;
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").TextareaValue>;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TextareaValue>;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TextareaValue>;
        };
        onBlur: import("vue").PropType<(value: import("./type").TextareaValue, context: {
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").TextareaValue, context?: {
            e?: InputEvent;
        }) => void>;
        onFocus: import("vue").PropType<(value: import("./type").TextareaValue, context: {
            e: FocusEvent;
        }) => void>;
        onKeydown: import("vue").PropType<(value: import("./type").TextareaValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onKeypress: import("vue").PropType<(value: import("./type").TextareaValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onKeyup: import("vue").PropType<(value: import("./type").TextareaValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onValidate: import("vue").PropType<(context: {
            error?: "exceed-maximum" | "below-minimum";
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        allowInputOverMax: {
            type: BooleanConstructor;
            default: boolean;
        };
        autofocus: BooleanConstructor;
        autosize: {
            type: import("vue").PropType<boolean | {
                minRows?: number;
                maxRows?: number;
            }>;
            default: boolean | {
                minRows?: number;
                maxRows?: number;
            };
        };
        disabled: BooleanConstructor;
        maxcharacter: {
            type: NumberConstructor;
        };
        maxlength: {
            type: import("vue").PropType<string | number>;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        readonly: BooleanConstructor;
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").TextareaValue>;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TextareaValue>;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TextareaValue>;
        };
        onBlur: import("vue").PropType<(value: import("./type").TextareaValue, context: {
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").TextareaValue, context?: {
            e?: InputEvent;
        }) => void>;
        onFocus: import("vue").PropType<(value: import("./type").TextareaValue, context: {
            e: FocusEvent;
        }) => void>;
        onKeydown: import("vue").PropType<(value: import("./type").TextareaValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onKeypress: import("vue").PropType<(value: import("./type").TextareaValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onKeyup: import("vue").PropType<(value: import("./type").TextareaValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onValidate: import("vue").PropType<(context: {
            error?: "exceed-maximum" | "below-minimum";
        }) => void>;
    }>>, {
        name: string;
        autofocus: boolean;
        disabled: boolean;
        readonly: boolean;
        placeholder: string;
        autosize: boolean | {
            minRows?: number;
            maxRows?: number;
        };
        allowInputOverMax: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        allowInputOverMax: {
            type: BooleanConstructor;
            default: boolean;
        };
        autofocus: BooleanConstructor;
        autosize: {
            type: import("vue").PropType<boolean | {
                minRows?: number;
                maxRows?: number;
            }>;
            default: boolean | {
                minRows?: number;
                maxRows?: number;
            };
        };
        disabled: BooleanConstructor;
        maxcharacter: {
            type: NumberConstructor;
        };
        maxlength: {
            type: import("vue").PropType<string | number>;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        readonly: BooleanConstructor;
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").TextareaValue>;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TextareaValue>;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TextareaValue>;
        };
        onBlur: import("vue").PropType<(value: import("./type").TextareaValue, context: {
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").TextareaValue, context?: {
            e?: InputEvent;
        }) => void>;
        onFocus: import("vue").PropType<(value: import("./type").TextareaValue, context: {
            e: FocusEvent;
        }) => void>;
        onKeydown: import("vue").PropType<(value: import("./type").TextareaValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onKeypress: import("vue").PropType<(value: import("./type").TextareaValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onKeyup: import("vue").PropType<(value: import("./type").TextareaValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onValidate: import("vue").PropType<(context: {
            error?: "exceed-maximum" | "below-minimum";
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        name: string;
        autofocus: boolean;
        disabled: boolean;
        readonly: boolean;
        placeholder: string;
        autosize: boolean | {
            minRows?: number;
            maxRows?: number;
        };
        allowInputOverMax: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    allowInputOverMax: {
        type: BooleanConstructor;
        default: boolean;
    };
    autofocus: BooleanConstructor;
    autosize: {
        type: import("vue").PropType<boolean | {
            minRows?: number;
            maxRows?: number;
        }>;
        default: boolean | {
            minRows?: number;
            maxRows?: number;
        };
    };
    disabled: BooleanConstructor;
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: import("vue").PropType<string | number>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    readonly: BooleanConstructor;
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").TextareaValue>;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TextareaValue>;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TextareaValue>;
    };
    onBlur: import("vue").PropType<(value: import("./type").TextareaValue, context: {
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").TextareaValue, context?: {
        e?: InputEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: import("./type").TextareaValue, context: {
        e: FocusEvent;
    }) => void>;
    onKeydown: import("vue").PropType<(value: import("./type").TextareaValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeypress: import("vue").PropType<(value: import("./type").TextareaValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeyup: import("vue").PropType<(value: import("./type").TextareaValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onValidate: import("vue").PropType<(context: {
        error?: "exceed-maximum" | "below-minimum";
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    name: string;
    autofocus: boolean;
    disabled: boolean;
    readonly: boolean;
    placeholder: string;
    autosize: boolean | {
        minRows?: number;
        maxRows?: number;
    };
    allowInputOverMax: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Textarea;
