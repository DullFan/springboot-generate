import { TdTagInputProps } from './type';
import './style';
export * from './type';
export declare type TagInputProps = TdTagInputProps;
export declare const TagInput: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        autoWidth: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: import("./type").TagInputValue;
                collapsedSelectedItems: import("./type").TagInputValue;
                count: number;
                onClose: (context: {
                    index: number;
                    e?: MouseEvent;
                }) => void;
            }) => import("..").SlotReturnValue>;
        };
        disabled: BooleanConstructor;
        dragSort: BooleanConstructor;
        excessTagsDisplayType: {
            type: import("vue").PropType<"scroll" | "break-line">;
            default: "scroll" | "break-line";
            validator(val: "scroll" | "break-line"): boolean;
        };
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        inputValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        defaultInputValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        max: {
            type: NumberConstructor;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        tag: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: string | number;
            }) => import("..").SlotReturnValue)>;
        };
        tagProps: {
            type: import("vue").PropType<import("..").TdTagProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").TagInputValue>;
            default: import("./type").TagInputValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TagInputValue>;
            default: import("./type").TagInputValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TagInputValue>;
            default: () => import("./type").TagInputValue;
        };
        valueDisplay: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: import("./type").TagInputValue;
                onClose: (index: number, item?: any) => void;
            }) => import("..").SlotReturnValue)>;
        };
        onBlur: import("vue").PropType<(value: import("./type").TagInputValue, context: {
            inputValue: string;
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").TagInputValue, context: import("./type").TagInputChangeContext) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onDragSort: import("vue").PropType<(context: import("./type").TagInputDragSortContext) => void>;
        onEnter: import("vue").PropType<(value: import("./type").TagInputValue, context: {
            e: KeyboardEvent;
            inputValue: string;
        }) => void>;
        onFocus: import("vue").PropType<(value: import("./type").TagInputValue, context: {
            inputValue: string;
            e: FocusEvent;
        }) => void>;
        onInputChange: import("vue").PropType<(value: string, context?: import("./type").InputValueChangeContext) => void>;
        onMouseenter: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onMouseleave: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPaste: import("vue").PropType<(context: {
            e: ClipboardEvent;
            pasteValue: string;
        }) => void>;
        onRemove: import("vue").PropType<(context: import("./type").TagInputRemoveContext) => void>;
    }>>, {
        CLEAR_CLASS: import("vue").ComputedRef<string>;
        CloseCircleFilledIcon: import("tdesign-icons-vue-next").GlobalIconType;
        tagValue: import("vue").Ref<import("./type").TagInputValue>;
        tInputValue: import("vue").Ref<string>;
        isHover: import("vue").Ref<boolean>;
        tagInputPlaceholder: import("vue").ComputedRef<string>;
        showClearIcon: import("vue").ComputedRef<boolean>;
        tagInputRef: import("vue").Ref<any>;
        classPrefix: import("vue").ComputedRef<string>;
        isFocused: import("vue").Ref<boolean>;
        focus: () => void;
        blur: () => void;
        setTInputValue: import("../hooks").ChangeHandler<string, [context?: import("./type").InputValueChangeContext]>;
        onMouseEnter: (context: {
            e: MouseEvent;
        }) => void;
        onMouseLeave: (context: {
            e: MouseEvent;
        }) => void;
        onInnerFocus: (value: import("..").InputValue, context: {
            e: FocusEvent;
        }) => void;
        onInnerBlur: (value: import("..").InputValue, context: {
            e: FocusEvent;
        }) => void;
        onInnerChange: (value: string, context?: {
            e?: MouseEvent | CompositionEvent | InputEvent;
            trigger: "input" | "clear" | "initial";
        }) => void;
        addHover: (context: {
            e: MouseEvent;
        }) => void;
        cancelHover: (context: {
            e: MouseEvent;
        }) => void;
        onInputEnter: (value: string, context: {
            e: KeyboardEvent;
        }) => void;
        onInnerEnter: (value: string, context: {
            e: KeyboardEvent;
        }) => void;
        onInputBackspaceKeyUp: (value: import("..").InputValue) => void;
        onInputBackspaceKeyDown: (value: import("..").InputValue, context: {
            e: KeyboardEvent;
        }) => void;
        renderLabel: ({ displayNode, label }: {
            displayNode: any;
            label: any;
        }) => any[];
        onWheel: ({ e }: {
            e: WheelEvent;
        }) => void;
        scrollToRightOnEnter: () => void;
        scrollToLeftOnLeave: () => void;
        onClick: (context: {
            e: MouseEvent;
        }) => void;
        onClearClick: (context: {
            e: MouseEvent;
        }) => void;
        onClose: (p: {
            e?: MouseEvent;
            index: number;
        }) => void;
        onInputCompositionstart: (value: string, context: {
            e: CompositionEvent;
        }) => void;
        onInputCompositionend: (value: string, context: {
            e: CompositionEvent;
        }) => void;
        classes: import("vue").ComputedRef<(string | {
            [x: string]: boolean;
        })[]>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        autoWidth: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: import("./type").TagInputValue;
                collapsedSelectedItems: import("./type").TagInputValue;
                count: number;
                onClose: (context: {
                    index: number;
                    e?: MouseEvent;
                }) => void;
            }) => import("..").SlotReturnValue>;
        };
        disabled: BooleanConstructor;
        dragSort: BooleanConstructor;
        excessTagsDisplayType: {
            type: import("vue").PropType<"scroll" | "break-line">;
            default: "scroll" | "break-line";
            validator(val: "scroll" | "break-line"): boolean;
        };
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        inputValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        defaultInputValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        max: {
            type: NumberConstructor;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        tag: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: string | number;
            }) => import("..").SlotReturnValue)>;
        };
        tagProps: {
            type: import("vue").PropType<import("..").TdTagProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").TagInputValue>;
            default: import("./type").TagInputValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TagInputValue>;
            default: import("./type").TagInputValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TagInputValue>;
            default: () => import("./type").TagInputValue;
        };
        valueDisplay: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: import("./type").TagInputValue;
                onClose: (index: number, item?: any) => void;
            }) => import("..").SlotReturnValue)>;
        };
        onBlur: import("vue").PropType<(value: import("./type").TagInputValue, context: {
            inputValue: string;
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").TagInputValue, context: import("./type").TagInputChangeContext) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onDragSort: import("vue").PropType<(context: import("./type").TagInputDragSortContext) => void>;
        onEnter: import("vue").PropType<(value: import("./type").TagInputValue, context: {
            e: KeyboardEvent;
            inputValue: string;
        }) => void>;
        onFocus: import("vue").PropType<(value: import("./type").TagInputValue, context: {
            inputValue: string;
            e: FocusEvent;
        }) => void>;
        onInputChange: import("vue").PropType<(value: string, context?: import("./type").InputValueChangeContext) => void>;
        onMouseenter: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onMouseleave: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPaste: import("vue").PropType<(context: {
            e: ClipboardEvent;
            pasteValue: string;
        }) => void>;
        onRemove: import("vue").PropType<(context: import("./type").TagInputRemoveContext) => void>;
    }>>, {
        value: import("./type").TagInputValue;
        disabled: boolean;
        size: "small" | "medium" | "large";
        readonly: boolean;
        placeholder: string;
        modelValue: import("./type").TagInputValue;
        defaultValue: import("./type").TagInputValue;
        autoWidth: boolean;
        clearable: boolean;
        inputValue: string;
        excessTagsDisplayType: "scroll" | "break-line";
        defaultInputValue: string;
        dragSort: boolean;
        minCollapsedNum: number;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        autoWidth: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: import("./type").TagInputValue;
                collapsedSelectedItems: import("./type").TagInputValue;
                count: number;
                onClose: (context: {
                    index: number;
                    e?: MouseEvent;
                }) => void;
            }) => import("..").SlotReturnValue>;
        };
        disabled: BooleanConstructor;
        dragSort: BooleanConstructor;
        excessTagsDisplayType: {
            type: import("vue").PropType<"scroll" | "break-line">;
            default: "scroll" | "break-line";
            validator(val: "scroll" | "break-line"): boolean;
        };
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        inputValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        defaultInputValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        max: {
            type: NumberConstructor;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        tag: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: string | number;
            }) => import("..").SlotReturnValue)>;
        };
        tagProps: {
            type: import("vue").PropType<import("..").TdTagProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").TagInputValue>;
            default: import("./type").TagInputValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TagInputValue>;
            default: import("./type").TagInputValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TagInputValue>;
            default: () => import("./type").TagInputValue;
        };
        valueDisplay: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: import("./type").TagInputValue;
                onClose: (index: number, item?: any) => void;
            }) => import("..").SlotReturnValue)>;
        };
        onBlur: import("vue").PropType<(value: import("./type").TagInputValue, context: {
            inputValue: string;
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").TagInputValue, context: import("./type").TagInputChangeContext) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onDragSort: import("vue").PropType<(context: import("./type").TagInputDragSortContext) => void>;
        onEnter: import("vue").PropType<(value: import("./type").TagInputValue, context: {
            e: KeyboardEvent;
            inputValue: string;
        }) => void>;
        onFocus: import("vue").PropType<(value: import("./type").TagInputValue, context: {
            inputValue: string;
            e: FocusEvent;
        }) => void>;
        onInputChange: import("vue").PropType<(value: string, context?: import("./type").InputValueChangeContext) => void>;
        onMouseenter: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onMouseleave: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPaste: import("vue").PropType<(context: {
            e: ClipboardEvent;
            pasteValue: string;
        }) => void>;
        onRemove: import("vue").PropType<(context: import("./type").TagInputRemoveContext) => void>;
    }>>, {
        CLEAR_CLASS: import("vue").ComputedRef<string>;
        CloseCircleFilledIcon: import("tdesign-icons-vue-next").GlobalIconType;
        tagValue: import("vue").Ref<import("./type").TagInputValue>;
        tInputValue: import("vue").Ref<string>;
        isHover: import("vue").Ref<boolean>;
        tagInputPlaceholder: import("vue").ComputedRef<string>;
        showClearIcon: import("vue").ComputedRef<boolean>;
        tagInputRef: import("vue").Ref<any>;
        classPrefix: import("vue").ComputedRef<string>;
        isFocused: import("vue").Ref<boolean>;
        focus: () => void;
        blur: () => void;
        setTInputValue: import("../hooks").ChangeHandler<string, [context?: import("./type").InputValueChangeContext]>;
        onMouseEnter: (context: {
            e: MouseEvent;
        }) => void;
        onMouseLeave: (context: {
            e: MouseEvent;
        }) => void;
        onInnerFocus: (value: import("..").InputValue, context: {
            e: FocusEvent;
        }) => void;
        onInnerBlur: (value: import("..").InputValue, context: {
            e: FocusEvent;
        }) => void;
        onInnerChange: (value: string, context?: {
            e?: MouseEvent | CompositionEvent | InputEvent;
            trigger: "input" | "clear" | "initial";
        }) => void;
        addHover: (context: {
            e: MouseEvent;
        }) => void;
        cancelHover: (context: {
            e: MouseEvent;
        }) => void;
        onInputEnter: (value: string, context: {
            e: KeyboardEvent;
        }) => void;
        onInnerEnter: (value: string, context: {
            e: KeyboardEvent;
        }) => void;
        onInputBackspaceKeyUp: (value: import("..").InputValue) => void;
        onInputBackspaceKeyDown: (value: import("..").InputValue, context: {
            e: KeyboardEvent;
        }) => void;
        renderLabel: ({ displayNode, label }: {
            displayNode: any;
            label: any;
        }) => any[];
        onWheel: ({ e }: {
            e: WheelEvent;
        }) => void;
        scrollToRightOnEnter: () => void;
        scrollToLeftOnLeave: () => void;
        onClick: (context: {
            e: MouseEvent;
        }) => void;
        onClearClick: (context: {
            e: MouseEvent;
        }) => void;
        onClose: (p: {
            e?: MouseEvent;
            index: number;
        }) => void;
        onInputCompositionstart: (value: string, context: {
            e: CompositionEvent;
        }) => void;
        onInputCompositionend: (value: string, context: {
            e: CompositionEvent;
        }) => void;
        classes: import("vue").ComputedRef<(string | {
            [x: string]: boolean;
        })[]>;
    }, {}, {}, {}, {
        value: import("./type").TagInputValue;
        disabled: boolean;
        size: "small" | "medium" | "large";
        readonly: boolean;
        placeholder: string;
        modelValue: import("./type").TagInputValue;
        defaultValue: import("./type").TagInputValue;
        autoWidth: boolean;
        clearable: boolean;
        inputValue: string;
        excessTagsDisplayType: "scroll" | "break-line";
        defaultInputValue: string;
        dragSort: boolean;
        minCollapsedNum: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    autoWidth: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            value: import("./type").TagInputValue;
            collapsedSelectedItems: import("./type").TagInputValue;
            count: number;
            onClose: (context: {
                index: number;
                e?: MouseEvent;
            }) => void;
        }) => import("..").SlotReturnValue>;
    };
    disabled: BooleanConstructor;
    dragSort: BooleanConstructor;
    excessTagsDisplayType: {
        type: import("vue").PropType<"scroll" | "break-line">;
        default: "scroll" | "break-line";
        validator(val: "scroll" | "break-line"): boolean;
    };
    inputProps: {
        type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
    };
    inputValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    defaultInputValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    max: {
        type: NumberConstructor;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    tag: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: string | number;
        }) => import("..").SlotReturnValue)>;
    };
    tagProps: {
        type: import("vue").PropType<import("..").TdTagProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").TagInputValue>;
        default: import("./type").TagInputValue;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TagInputValue>;
        default: import("./type").TagInputValue;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TagInputValue>;
        default: () => import("./type").TagInputValue;
    };
    valueDisplay: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: import("./type").TagInputValue;
            onClose: (index: number, item?: any) => void;
        }) => import("..").SlotReturnValue)>;
    };
    onBlur: import("vue").PropType<(value: import("./type").TagInputValue, context: {
        inputValue: string;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").TagInputValue, context: import("./type").TagInputChangeContext) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onDragSort: import("vue").PropType<(context: import("./type").TagInputDragSortContext) => void>;
    onEnter: import("vue").PropType<(value: import("./type").TagInputValue, context: {
        e: KeyboardEvent;
        inputValue: string;
    }) => void>;
    onFocus: import("vue").PropType<(value: import("./type").TagInputValue, context: {
        inputValue: string;
        e: FocusEvent;
    }) => void>;
    onInputChange: import("vue").PropType<(value: string, context?: import("./type").InputValueChangeContext) => void>;
    onMouseenter: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPaste: import("vue").PropType<(context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void>;
    onRemove: import("vue").PropType<(context: import("./type").TagInputRemoveContext) => void>;
}>>, {
    CLEAR_CLASS: import("vue").ComputedRef<string>;
    CloseCircleFilledIcon: import("tdesign-icons-vue-next").GlobalIconType;
    tagValue: import("vue").Ref<import("./type").TagInputValue>;
    tInputValue: import("vue").Ref<string>;
    isHover: import("vue").Ref<boolean>;
    tagInputPlaceholder: import("vue").ComputedRef<string>;
    showClearIcon: import("vue").ComputedRef<boolean>;
    tagInputRef: import("vue").Ref<any>;
    classPrefix: import("vue").ComputedRef<string>;
    isFocused: import("vue").Ref<boolean>;
    focus: () => void;
    blur: () => void;
    setTInputValue: import("../hooks").ChangeHandler<string, [context?: import("./type").InputValueChangeContext]>;
    onMouseEnter: (context: {
        e: MouseEvent;
    }) => void;
    onMouseLeave: (context: {
        e: MouseEvent;
    }) => void;
    onInnerFocus: (value: import("..").InputValue, context: {
        e: FocusEvent;
    }) => void;
    onInnerBlur: (value: import("..").InputValue, context: {
        e: FocusEvent;
    }) => void;
    onInnerChange: (value: string, context?: {
        e?: MouseEvent | CompositionEvent | InputEvent;
        trigger: "input" | "clear" | "initial";
    }) => void;
    addHover: (context: {
        e: MouseEvent;
    }) => void;
    cancelHover: (context: {
        e: MouseEvent;
    }) => void;
    onInputEnter: (value: string, context: {
        e: KeyboardEvent;
    }) => void;
    onInnerEnter: (value: string, context: {
        e: KeyboardEvent;
    }) => void;
    onInputBackspaceKeyUp: (value: import("..").InputValue) => void;
    onInputBackspaceKeyDown: (value: import("..").InputValue, context: {
        e: KeyboardEvent;
    }) => void;
    renderLabel: ({ displayNode, label }: {
        displayNode: any;
        label: any;
    }) => any[];
    onWheel: ({ e }: {
        e: WheelEvent;
    }) => void;
    scrollToRightOnEnter: () => void;
    scrollToLeftOnLeave: () => void;
    onClick: (context: {
        e: MouseEvent;
    }) => void;
    onClearClick: (context: {
        e: MouseEvent;
    }) => void;
    onClose: (p: {
        e?: MouseEvent;
        index: number;
    }) => void;
    onInputCompositionstart: (value: string, context: {
        e: CompositionEvent;
    }) => void;
    onInputCompositionend: (value: string, context: {
        e: CompositionEvent;
    }) => void;
    classes: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: import("./type").TagInputValue;
    disabled: boolean;
    size: "small" | "medium" | "large";
    readonly: boolean;
    placeholder: string;
    modelValue: import("./type").TagInputValue;
    defaultValue: import("./type").TagInputValue;
    autoWidth: boolean;
    clearable: boolean;
    inputValue: string;
    excessTagsDisplayType: "scroll" | "break-line";
    defaultInputValue: string;
    dragSort: boolean;
    minCollapsedNum: number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default TagInput;
