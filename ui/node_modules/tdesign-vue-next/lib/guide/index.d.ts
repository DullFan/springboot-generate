import { TdGuideProps, GuideStep } from './type';
import './style';
export declare type TdGuideStepProps = GuideStep;
export * from './type';
export declare type GuideProps = TdGuideProps;
export declare const Guide: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        counter: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                current: number;
                total: number;
            }) => import("..").SlotReturnValue>;
        };
        current: {
            type: NumberConstructor;
            default: any;
        };
        modelValue: {
            type: NumberConstructor;
            default: any;
        };
        defaultCurrent: {
            type: NumberConstructor;
        };
        finishButtonProps: {
            type: import("vue").PropType<import("..").TdButtonProps>;
        };
        hideCounter: BooleanConstructor;
        hidePrev: BooleanConstructor;
        hideSkip: BooleanConstructor;
        highlightPadding: {
            type: NumberConstructor;
            default: number;
        };
        mode: {
            type: import("vue").PropType<"dialog" | "popup">;
            default: "dialog" | "popup";
            validator(val: "dialog" | "popup"): boolean;
        };
        nextButtonProps: {
            type: import("vue").PropType<import("..").TdButtonProps>;
        };
        prevButtonProps: {
            type: import("vue").PropType<import("..").TdButtonProps>;
        };
        showOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        skipButtonProps: {
            type: import("vue").PropType<import("..").TdButtonProps>;
        };
        steps: {
            type: import("vue").PropType<GuideStep[]>;
        };
        zIndex: {
            type: NumberConstructor;
            default: number;
        };
        onChange: import("vue").PropType<(current: number, context?: {
            e: MouseEvent;
            total: number;
        }) => void>;
        onFinish: import("vue").PropType<(context: {
            e: MouseEvent;
            current: number;
            total: number;
        }) => void>;
        onNextStepClick: import("vue").PropType<(context: {
            e: MouseEvent;
            next: number;
            current: number;
            total: number;
        }) => void>;
        onPrevStepClick: import("vue").PropType<(context: {
            e: MouseEvent;
            prev: number;
            current: number;
            total: number;
        }) => void>;
        onSkip: import("vue").PropType<(context: {
            e: MouseEvent;
            current: number;
            total: number;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        counter: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                current: number;
                total: number;
            }) => import("..").SlotReturnValue>;
        };
        current: {
            type: NumberConstructor;
            default: any;
        };
        modelValue: {
            type: NumberConstructor;
            default: any;
        };
        defaultCurrent: {
            type: NumberConstructor;
        };
        finishButtonProps: {
            type: import("vue").PropType<import("..").TdButtonProps>;
        };
        hideCounter: BooleanConstructor;
        hidePrev: BooleanConstructor;
        hideSkip: BooleanConstructor;
        highlightPadding: {
            type: NumberConstructor;
            default: number;
        };
        mode: {
            type: import("vue").PropType<"dialog" | "popup">;
            default: "dialog" | "popup";
            validator(val: "dialog" | "popup"): boolean;
        };
        nextButtonProps: {
            type: import("vue").PropType<import("..").TdButtonProps>;
        };
        prevButtonProps: {
            type: import("vue").PropType<import("..").TdButtonProps>;
        };
        showOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        skipButtonProps: {
            type: import("vue").PropType<import("..").TdButtonProps>;
        };
        steps: {
            type: import("vue").PropType<GuideStep[]>;
        };
        zIndex: {
            type: NumberConstructor;
            default: number;
        };
        onChange: import("vue").PropType<(current: number, context?: {
            e: MouseEvent;
            total: number;
        }) => void>;
        onFinish: import("vue").PropType<(context: {
            e: MouseEvent;
            current: number;
            total: number;
        }) => void>;
        onNextStepClick: import("vue").PropType<(context: {
            e: MouseEvent;
            next: number;
            current: number;
            total: number;
        }) => void>;
        onPrevStepClick: import("vue").PropType<(context: {
            e: MouseEvent;
            prev: number;
            current: number;
            total: number;
        }) => void>;
        onSkip: import("vue").PropType<(context: {
            e: MouseEvent;
            current: number;
            total: number;
        }) => void>;
    }>>, {
        zIndex: number;
        mode: "dialog" | "popup";
        modelValue: number;
        current: number;
        showOverlay: boolean;
        highlightPadding: number;
        hideCounter: boolean;
        hidePrev: boolean;
        hideSkip: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        counter: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                current: number;
                total: number;
            }) => import("..").SlotReturnValue>;
        };
        current: {
            type: NumberConstructor;
            default: any;
        };
        modelValue: {
            type: NumberConstructor;
            default: any;
        };
        defaultCurrent: {
            type: NumberConstructor;
        };
        finishButtonProps: {
            type: import("vue").PropType<import("..").TdButtonProps>;
        };
        hideCounter: BooleanConstructor;
        hidePrev: BooleanConstructor;
        hideSkip: BooleanConstructor;
        highlightPadding: {
            type: NumberConstructor;
            default: number;
        };
        mode: {
            type: import("vue").PropType<"dialog" | "popup">;
            default: "dialog" | "popup";
            validator(val: "dialog" | "popup"): boolean;
        };
        nextButtonProps: {
            type: import("vue").PropType<import("..").TdButtonProps>;
        };
        prevButtonProps: {
            type: import("vue").PropType<import("..").TdButtonProps>;
        };
        showOverlay: {
            type: BooleanConstructor;
            default: boolean;
        };
        skipButtonProps: {
            type: import("vue").PropType<import("..").TdButtonProps>;
        };
        steps: {
            type: import("vue").PropType<GuideStep[]>;
        };
        zIndex: {
            type: NumberConstructor;
            default: number;
        };
        onChange: import("vue").PropType<(current: number, context?: {
            e: MouseEvent;
            total: number;
        }) => void>;
        onFinish: import("vue").PropType<(context: {
            e: MouseEvent;
            current: number;
            total: number;
        }) => void>;
        onNextStepClick: import("vue").PropType<(context: {
            e: MouseEvent;
            next: number;
            current: number;
            total: number;
        }) => void>;
        onPrevStepClick: import("vue").PropType<(context: {
            e: MouseEvent;
            prev: number;
            current: number;
            total: number;
        }) => void>;
        onSkip: import("vue").PropType<(context: {
            e: MouseEvent;
            current: number;
            total: number;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        zIndex: number;
        mode: "dialog" | "popup";
        modelValue: number;
        current: number;
        showOverlay: boolean;
        highlightPadding: number;
        hideCounter: boolean;
        hidePrev: boolean;
        hideSkip: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    counter: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            current: number;
            total: number;
        }) => import("..").SlotReturnValue>;
    };
    current: {
        type: NumberConstructor;
        default: any;
    };
    modelValue: {
        type: NumberConstructor;
        default: any;
    };
    defaultCurrent: {
        type: NumberConstructor;
    };
    finishButtonProps: {
        type: import("vue").PropType<import("..").TdButtonProps>;
    };
    hideCounter: BooleanConstructor;
    hidePrev: BooleanConstructor;
    hideSkip: BooleanConstructor;
    highlightPadding: {
        type: NumberConstructor;
        default: number;
    };
    mode: {
        type: import("vue").PropType<"dialog" | "popup">;
        default: "dialog" | "popup";
        validator(val: "dialog" | "popup"): boolean;
    };
    nextButtonProps: {
        type: import("vue").PropType<import("..").TdButtonProps>;
    };
    prevButtonProps: {
        type: import("vue").PropType<import("..").TdButtonProps>;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    skipButtonProps: {
        type: import("vue").PropType<import("..").TdButtonProps>;
    };
    steps: {
        type: import("vue").PropType<GuideStep[]>;
    };
    zIndex: {
        type: NumberConstructor;
        default: number;
    };
    onChange: import("vue").PropType<(current: number, context?: {
        e: MouseEvent;
        total: number;
    }) => void>;
    onFinish: import("vue").PropType<(context: {
        e: MouseEvent;
        current: number;
        total: number;
    }) => void>;
    onNextStepClick: import("vue").PropType<(context: {
        e: MouseEvent;
        next: number;
        current: number;
        total: number;
    }) => void>;
    onPrevStepClick: import("vue").PropType<(context: {
        e: MouseEvent;
        prev: number;
        current: number;
        total: number;
    }) => void>;
    onSkip: import("vue").PropType<(context: {
        e: MouseEvent;
        current: number;
        total: number;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    zIndex: number;
    mode: "dialog" | "popup";
    modelValue: number;
    current: number;
    showOverlay: boolean;
    highlightPadding: number;
    hideCounter: boolean;
    hidePrev: boolean;
    hideSkip: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Guide;
