import './style';
export * from './interface';
export declare const Upload: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        abridgeName: {
            type: import("vue").PropType<number[]>;
        };
        accept: {
            type: StringConstructor;
            default: string;
        };
        action: {
            type: StringConstructor;
            default: string;
        };
        allowUploadDuplicateFile: BooleanConstructor;
        autoUpload: {
            type: BooleanConstructor;
            default: boolean;
        };
        beforeAllFilesUpload: {
            type: import("vue").PropType<(file: import("./type").UploadFile[]) => boolean | Promise<boolean>>;
        };
        beforeUpload: {
            type: import("vue").PropType<(file: import("./type").UploadFile) => boolean | Promise<boolean>>;
        };
        cancelUploadButton: {
            type: import("vue").PropType<import("..").TdButtonProps | ((h: typeof import("vue").h, props: {
                disabled: boolean;
                cancelUploadText: string;
                cancelUpload: (ctx: {
                    e: MouseEvent;
                }) => void;
            }) => import("..").SlotReturnValue)>;
        };
        data: {
            type: import("vue").PropType<Record<string, any> | ((files: import("./type").UploadFile[]) => Record<string, any>)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        dragContent: {
            type: import("vue").PropType<((h: typeof import("vue").h) => import("..").SlotReturnValue) | ((h: typeof import("vue").h, props: import("./type").TriggerContext) => import("..").SlotReturnValue)>;
        };
        draggable: {
            type: BooleanConstructor;
            default: any;
        };
        fileListDisplay: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                files: import("./type").UploadFile[];
                dragEvents?: import("..").UploadDisplayDragEvents;
            }) => import("..").SlotReturnValue>;
        };
        files: {
            type: import("vue").PropType<import("./type").UploadFile[]>;
            default: import("./type").UploadFile[];
        };
        defaultFiles: {
            type: import("vue").PropType<import("./type").UploadFile[]>;
            default: () => import("./type").UploadFile[];
        };
        format: {
            type: import("vue").PropType<(file: File) => import("./type").UploadFile>;
        };
        formatRequest: {
            type: import("vue").PropType<(requestData: {
                [key: string]: any;
            }) => {
                [key: string]: any;
            }>;
        };
        formatResponse: {
            type: import("vue").PropType<(response: any, context: import("./type").FormatResponseContext) => import("./type").ResponseType>;
        };
        headers: {
            type: import("vue").PropType<{
                [key: string]: string;
            }>;
        };
        imageViewerProps: {
            type: import("vue").PropType<import("..").TdImageViewerProps>;
        };
        inputAttributes: {
            type: import("vue").PropType<object>;
        };
        isBatchUpload: BooleanConstructor;
        locale: {
            type: import("vue").PropType<import("..").UploadConfig>;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        method: {
            type: import("vue").PropType<"option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch">;
            default: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch";
            validator(val: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch"): boolean;
        };
        mockProgressDuration: {
            type: NumberConstructor;
        };
        multiple: BooleanConstructor;
        name: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        requestMethod: {
            type: import("vue").PropType<(files: import("./type").UploadFile | import("./type").UploadFile[]) => Promise<import("./type").RequestMethodResponse>>;
        };
        showImageFileName: {
            type: BooleanConstructor;
            default: boolean;
        };
        showThumbnail: BooleanConstructor;
        showUploadProgress: {
            type: BooleanConstructor;
            default: boolean;
        };
        sizeLimit: {
            type: import("vue").PropType<number | import("./type").SizeLimitObj>;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        theme: {
            type: import("vue").PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
            default: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow";
            validator(val: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow"): boolean;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        trigger: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TriggerContext) => import("..").SlotReturnValue>;
        };
        triggerButtonProps: {
            type: import("vue").PropType<import("..").TdButtonProps>;
        };
        uploadAllFilesInOneRequest: BooleanConstructor;
        uploadButton: {
            type: import("vue").PropType<import("..").TdButtonProps | ((h: typeof import("vue").h, props: {
                disabled: boolean;
                uploading: boolean;
                uploadFiles: () => void;
                uploadText: string;
            }) => import("..").SlotReturnValue)>;
        };
        uploadPastedFiles: {
            type: BooleanConstructor;
            default: boolean;
        };
        useMockProgress: {
            type: BooleanConstructor;
            default: boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").UploadFile[]>;
            default: import("./type").UploadFile[];
        };
        modelValue: {
            type: import("vue").PropType<import("./type").UploadFile[]>;
            default: import("./type").UploadFile[];
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").UploadFile[]>;
            default: () => import("./type").UploadFile[];
        };
        withCredentials: BooleanConstructor;
        onCancelUpload: import("vue").PropType<() => void>;
        onChange: import("vue").PropType<(value: import("./type").UploadFile[], context: import("./type").UploadChangeContext) => void>;
        onDragenter: import("vue").PropType<(context: {
            e: DragEvent;
        }) => void>;
        onDragleave: import("vue").PropType<(context: {
            e: DragEvent;
        }) => void>;
        onDrop: import("vue").PropType<(context: {
            e: DragEvent;
        }) => void>;
        onFail: import("vue").PropType<(options: import("./type").UploadFailContext) => void>;
        onOneFileFail: import("vue").PropType<(options: import("./type").UploadFailContext) => void>;
        onOneFileSuccess: import("vue").PropType<(context: Pick<import("./type").SuccessContext, "file" | "e" | "response" | "XMLHttpRequest">) => void>;
        onPreview: import("vue").PropType<(options: {
            file: import("./type").UploadFile;
            index: number;
            e: MouseEvent;
        }) => void>;
        onProgress: import("vue").PropType<(options: import("./type").ProgressContext) => void>;
        onRemove: import("vue").PropType<(context: import("./type").UploadRemoveContext) => void>;
        onSelectChange: import("vue").PropType<(files: File[], context: import("./type").UploadSelectChangeContext) => void>;
        onSuccess: import("vue").PropType<(context: import("./type").SuccessContext) => void>;
        onValidate: import("vue").PropType<(context: {
            type: import("./type").UploadValidateType;
            files: import("./type").UploadFile[];
        }) => void>;
        onWaitingUploadFilesChange: import("vue").PropType<(context: {
            files: import("./type").UploadFile[];
            trigger: "remove" | "validate" | "uploaded";
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        abridgeName: {
            type: import("vue").PropType<number[]>;
        };
        accept: {
            type: StringConstructor;
            default: string;
        };
        action: {
            type: StringConstructor;
            default: string;
        };
        allowUploadDuplicateFile: BooleanConstructor;
        autoUpload: {
            type: BooleanConstructor;
            default: boolean;
        };
        beforeAllFilesUpload: {
            type: import("vue").PropType<(file: import("./type").UploadFile[]) => boolean | Promise<boolean>>;
        };
        beforeUpload: {
            type: import("vue").PropType<(file: import("./type").UploadFile) => boolean | Promise<boolean>>;
        };
        cancelUploadButton: {
            type: import("vue").PropType<import("..").TdButtonProps | ((h: typeof import("vue").h, props: {
                disabled: boolean;
                cancelUploadText: string;
                cancelUpload: (ctx: {
                    e: MouseEvent;
                }) => void;
            }) => import("..").SlotReturnValue)>;
        };
        data: {
            type: import("vue").PropType<Record<string, any> | ((files: import("./type").UploadFile[]) => Record<string, any>)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        dragContent: {
            type: import("vue").PropType<((h: typeof import("vue").h) => import("..").SlotReturnValue) | ((h: typeof import("vue").h, props: import("./type").TriggerContext) => import("..").SlotReturnValue)>;
        };
        draggable: {
            type: BooleanConstructor;
            default: any;
        };
        fileListDisplay: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                files: import("./type").UploadFile[];
                dragEvents?: import("..").UploadDisplayDragEvents;
            }) => import("..").SlotReturnValue>;
        };
        files: {
            type: import("vue").PropType<import("./type").UploadFile[]>;
            default: import("./type").UploadFile[];
        };
        defaultFiles: {
            type: import("vue").PropType<import("./type").UploadFile[]>;
            default: () => import("./type").UploadFile[];
        };
        format: {
            type: import("vue").PropType<(file: File) => import("./type").UploadFile>;
        };
        formatRequest: {
            type: import("vue").PropType<(requestData: {
                [key: string]: any;
            }) => {
                [key: string]: any;
            }>;
        };
        formatResponse: {
            type: import("vue").PropType<(response: any, context: import("./type").FormatResponseContext) => import("./type").ResponseType>;
        };
        headers: {
            type: import("vue").PropType<{
                [key: string]: string;
            }>;
        };
        imageViewerProps: {
            type: import("vue").PropType<import("..").TdImageViewerProps>;
        };
        inputAttributes: {
            type: import("vue").PropType<object>;
        };
        isBatchUpload: BooleanConstructor;
        locale: {
            type: import("vue").PropType<import("..").UploadConfig>;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        method: {
            type: import("vue").PropType<"option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch">;
            default: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch";
            validator(val: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch"): boolean;
        };
        mockProgressDuration: {
            type: NumberConstructor;
        };
        multiple: BooleanConstructor;
        name: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        requestMethod: {
            type: import("vue").PropType<(files: import("./type").UploadFile | import("./type").UploadFile[]) => Promise<import("./type").RequestMethodResponse>>;
        };
        showImageFileName: {
            type: BooleanConstructor;
            default: boolean;
        };
        showThumbnail: BooleanConstructor;
        showUploadProgress: {
            type: BooleanConstructor;
            default: boolean;
        };
        sizeLimit: {
            type: import("vue").PropType<number | import("./type").SizeLimitObj>;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        theme: {
            type: import("vue").PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
            default: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow";
            validator(val: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow"): boolean;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        trigger: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TriggerContext) => import("..").SlotReturnValue>;
        };
        triggerButtonProps: {
            type: import("vue").PropType<import("..").TdButtonProps>;
        };
        uploadAllFilesInOneRequest: BooleanConstructor;
        uploadButton: {
            type: import("vue").PropType<import("..").TdButtonProps | ((h: typeof import("vue").h, props: {
                disabled: boolean;
                uploading: boolean;
                uploadFiles: () => void;
                uploadText: string;
            }) => import("..").SlotReturnValue)>;
        };
        uploadPastedFiles: {
            type: BooleanConstructor;
            default: boolean;
        };
        useMockProgress: {
            type: BooleanConstructor;
            default: boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").UploadFile[]>;
            default: import("./type").UploadFile[];
        };
        modelValue: {
            type: import("vue").PropType<import("./type").UploadFile[]>;
            default: import("./type").UploadFile[];
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").UploadFile[]>;
            default: () => import("./type").UploadFile[];
        };
        withCredentials: BooleanConstructor;
        onCancelUpload: import("vue").PropType<() => void>;
        onChange: import("vue").PropType<(value: import("./type").UploadFile[], context: import("./type").UploadChangeContext) => void>;
        onDragenter: import("vue").PropType<(context: {
            e: DragEvent;
        }) => void>;
        onDragleave: import("vue").PropType<(context: {
            e: DragEvent;
        }) => void>;
        onDrop: import("vue").PropType<(context: {
            e: DragEvent;
        }) => void>;
        onFail: import("vue").PropType<(options: import("./type").UploadFailContext) => void>;
        onOneFileFail: import("vue").PropType<(options: import("./type").UploadFailContext) => void>;
        onOneFileSuccess: import("vue").PropType<(context: Pick<import("./type").SuccessContext, "file" | "e" | "response" | "XMLHttpRequest">) => void>;
        onPreview: import("vue").PropType<(options: {
            file: import("./type").UploadFile;
            index: number;
            e: MouseEvent;
        }) => void>;
        onProgress: import("vue").PropType<(options: import("./type").ProgressContext) => void>;
        onRemove: import("vue").PropType<(context: import("./type").UploadRemoveContext) => void>;
        onSelectChange: import("vue").PropType<(files: File[], context: import("./type").UploadSelectChangeContext) => void>;
        onSuccess: import("vue").PropType<(context: import("./type").SuccessContext) => void>;
        onValidate: import("vue").PropType<(context: {
            type: import("./type").UploadValidateType;
            files: import("./type").UploadFile[];
        }) => void>;
        onWaitingUploadFilesChange: import("vue").PropType<(context: {
            files: import("./type").UploadFile[];
            trigger: "remove" | "validate" | "uploaded";
        }) => void>;
    }>>, {
        max: number;
        name: string;
        value: import("./type").UploadFile[];
        action: string;
        method: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch";
        draggable: boolean;
        disabled: boolean;
        multiple: boolean;
        placeholder: string;
        accept: string;
        modelValue: import("./type").UploadFile[];
        defaultValue: import("./type").UploadFile[];
        theme: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow";
        files: import("./type").UploadFile[];
        defaultFiles: import("./type").UploadFile[];
        autoUpload: boolean;
        uploadPastedFiles: boolean;
        showUploadProgress: boolean;
        showImageFileName: boolean;
        showThumbnail: boolean;
        isBatchUpload: boolean;
        withCredentials: boolean;
        useMockProgress: boolean;
        uploadAllFilesInOneRequest: boolean;
        allowUploadDuplicateFile: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        abridgeName: {
            type: import("vue").PropType<number[]>;
        };
        accept: {
            type: StringConstructor;
            default: string;
        };
        action: {
            type: StringConstructor;
            default: string;
        };
        allowUploadDuplicateFile: BooleanConstructor;
        autoUpload: {
            type: BooleanConstructor;
            default: boolean;
        };
        beforeAllFilesUpload: {
            type: import("vue").PropType<(file: import("./type").UploadFile[]) => boolean | Promise<boolean>>;
        };
        beforeUpload: {
            type: import("vue").PropType<(file: import("./type").UploadFile) => boolean | Promise<boolean>>;
        };
        cancelUploadButton: {
            type: import("vue").PropType<import("..").TdButtonProps | ((h: typeof import("vue").h, props: {
                disabled: boolean;
                cancelUploadText: string;
                cancelUpload: (ctx: {
                    e: MouseEvent;
                }) => void;
            }) => import("..").SlotReturnValue)>;
        };
        data: {
            type: import("vue").PropType<Record<string, any> | ((files: import("./type").UploadFile[]) => Record<string, any>)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        dragContent: {
            type: import("vue").PropType<((h: typeof import("vue").h) => import("..").SlotReturnValue) | ((h: typeof import("vue").h, props: import("./type").TriggerContext) => import("..").SlotReturnValue)>;
        };
        draggable: {
            type: BooleanConstructor;
            default: any;
        };
        fileListDisplay: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                files: import("./type").UploadFile[];
                dragEvents?: import("..").UploadDisplayDragEvents;
            }) => import("..").SlotReturnValue>;
        };
        files: {
            type: import("vue").PropType<import("./type").UploadFile[]>;
            default: import("./type").UploadFile[];
        };
        defaultFiles: {
            type: import("vue").PropType<import("./type").UploadFile[]>;
            default: () => import("./type").UploadFile[];
        };
        format: {
            type: import("vue").PropType<(file: File) => import("./type").UploadFile>;
        };
        formatRequest: {
            type: import("vue").PropType<(requestData: {
                [key: string]: any;
            }) => {
                [key: string]: any;
            }>;
        };
        formatResponse: {
            type: import("vue").PropType<(response: any, context: import("./type").FormatResponseContext) => import("./type").ResponseType>;
        };
        headers: {
            type: import("vue").PropType<{
                [key: string]: string;
            }>;
        };
        imageViewerProps: {
            type: import("vue").PropType<import("..").TdImageViewerProps>;
        };
        inputAttributes: {
            type: import("vue").PropType<object>;
        };
        isBatchUpload: BooleanConstructor;
        locale: {
            type: import("vue").PropType<import("..").UploadConfig>;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        method: {
            type: import("vue").PropType<"option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch">;
            default: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch";
            validator(val: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch"): boolean;
        };
        mockProgressDuration: {
            type: NumberConstructor;
        };
        multiple: BooleanConstructor;
        name: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        requestMethod: {
            type: import("vue").PropType<(files: import("./type").UploadFile | import("./type").UploadFile[]) => Promise<import("./type").RequestMethodResponse>>;
        };
        showImageFileName: {
            type: BooleanConstructor;
            default: boolean;
        };
        showThumbnail: BooleanConstructor;
        showUploadProgress: {
            type: BooleanConstructor;
            default: boolean;
        };
        sizeLimit: {
            type: import("vue").PropType<number | import("./type").SizeLimitObj>;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        theme: {
            type: import("vue").PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
            default: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow";
            validator(val: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow"): boolean;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        trigger: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TriggerContext) => import("..").SlotReturnValue>;
        };
        triggerButtonProps: {
            type: import("vue").PropType<import("..").TdButtonProps>;
        };
        uploadAllFilesInOneRequest: BooleanConstructor;
        uploadButton: {
            type: import("vue").PropType<import("..").TdButtonProps | ((h: typeof import("vue").h, props: {
                disabled: boolean;
                uploading: boolean;
                uploadFiles: () => void;
                uploadText: string;
            }) => import("..").SlotReturnValue)>;
        };
        uploadPastedFiles: {
            type: BooleanConstructor;
            default: boolean;
        };
        useMockProgress: {
            type: BooleanConstructor;
            default: boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").UploadFile[]>;
            default: import("./type").UploadFile[];
        };
        modelValue: {
            type: import("vue").PropType<import("./type").UploadFile[]>;
            default: import("./type").UploadFile[];
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").UploadFile[]>;
            default: () => import("./type").UploadFile[];
        };
        withCredentials: BooleanConstructor;
        onCancelUpload: import("vue").PropType<() => void>;
        onChange: import("vue").PropType<(value: import("./type").UploadFile[], context: import("./type").UploadChangeContext) => void>;
        onDragenter: import("vue").PropType<(context: {
            e: DragEvent;
        }) => void>;
        onDragleave: import("vue").PropType<(context: {
            e: DragEvent;
        }) => void>;
        onDrop: import("vue").PropType<(context: {
            e: DragEvent;
        }) => void>;
        onFail: import("vue").PropType<(options: import("./type").UploadFailContext) => void>;
        onOneFileFail: import("vue").PropType<(options: import("./type").UploadFailContext) => void>;
        onOneFileSuccess: import("vue").PropType<(context: Pick<import("./type").SuccessContext, "file" | "e" | "response" | "XMLHttpRequest">) => void>;
        onPreview: import("vue").PropType<(options: {
            file: import("./type").UploadFile;
            index: number;
            e: MouseEvent;
        }) => void>;
        onProgress: import("vue").PropType<(options: import("./type").ProgressContext) => void>;
        onRemove: import("vue").PropType<(context: import("./type").UploadRemoveContext) => void>;
        onSelectChange: import("vue").PropType<(files: File[], context: import("./type").UploadSelectChangeContext) => void>;
        onSuccess: import("vue").PropType<(context: import("./type").SuccessContext) => void>;
        onValidate: import("vue").PropType<(context: {
            type: import("./type").UploadValidateType;
            files: import("./type").UploadFile[];
        }) => void>;
        onWaitingUploadFilesChange: import("vue").PropType<(context: {
            files: import("./type").UploadFile[];
            trigger: "remove" | "validate" | "uploaded";
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        max: number;
        name: string;
        value: import("./type").UploadFile[];
        action: string;
        method: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch";
        draggable: boolean;
        disabled: boolean;
        multiple: boolean;
        placeholder: string;
        accept: string;
        modelValue: import("./type").UploadFile[];
        defaultValue: import("./type").UploadFile[];
        theme: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow";
        files: import("./type").UploadFile[];
        defaultFiles: import("./type").UploadFile[];
        autoUpload: boolean;
        uploadPastedFiles: boolean;
        showUploadProgress: boolean;
        showImageFileName: boolean;
        showThumbnail: boolean;
        isBatchUpload: boolean;
        withCredentials: boolean;
        useMockProgress: boolean;
        uploadAllFilesInOneRequest: boolean;
        allowUploadDuplicateFile: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    abridgeName: {
        type: import("vue").PropType<number[]>;
    };
    accept: {
        type: StringConstructor;
        default: string;
    };
    action: {
        type: StringConstructor;
        default: string;
    };
    allowUploadDuplicateFile: BooleanConstructor;
    autoUpload: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeAllFilesUpload: {
        type: import("vue").PropType<(file: import("./type").UploadFile[]) => boolean | Promise<boolean>>;
    };
    beforeUpload: {
        type: import("vue").PropType<(file: import("./type").UploadFile) => boolean | Promise<boolean>>;
    };
    cancelUploadButton: {
        type: import("vue").PropType<import("..").TdButtonProps | ((h: typeof import("vue").h, props: {
            disabled: boolean;
            cancelUploadText: string;
            cancelUpload: (ctx: {
                e: MouseEvent;
            }) => void;
        }) => import("..").SlotReturnValue)>;
    };
    data: {
        type: import("vue").PropType<Record<string, any> | ((files: import("./type").UploadFile[]) => Record<string, any>)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    dragContent: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("..").SlotReturnValue) | ((h: typeof import("vue").h, props: import("./type").TriggerContext) => import("..").SlotReturnValue)>;
    };
    draggable: {
        type: BooleanConstructor;
        default: any;
    };
    fileListDisplay: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            files: import("./type").UploadFile[];
            dragEvents?: import("..").UploadDisplayDragEvents;
        }) => import("..").SlotReturnValue>;
    };
    files: {
        type: import("vue").PropType<import("./type").UploadFile[]>;
        default: import("./type").UploadFile[];
    };
    defaultFiles: {
        type: import("vue").PropType<import("./type").UploadFile[]>;
        default: () => import("./type").UploadFile[];
    };
    format: {
        type: import("vue").PropType<(file: File) => import("./type").UploadFile>;
    };
    formatRequest: {
        type: import("vue").PropType<(requestData: {
            [key: string]: any;
        }) => {
            [key: string]: any;
        }>;
    };
    formatResponse: {
        type: import("vue").PropType<(response: any, context: import("./type").FormatResponseContext) => import("./type").ResponseType>;
    };
    headers: {
        type: import("vue").PropType<{
            [key: string]: string;
        }>;
    };
    imageViewerProps: {
        type: import("vue").PropType<import("..").TdImageViewerProps>;
    };
    inputAttributes: {
        type: import("vue").PropType<object>;
    };
    isBatchUpload: BooleanConstructor;
    locale: {
        type: import("vue").PropType<import("..").UploadConfig>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    method: {
        type: import("vue").PropType<"option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch">;
        default: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch";
        validator(val: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch"): boolean;
    };
    mockProgressDuration: {
        type: NumberConstructor;
    };
    multiple: BooleanConstructor;
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    requestMethod: {
        type: import("vue").PropType<(files: import("./type").UploadFile | import("./type").UploadFile[]) => Promise<import("./type").RequestMethodResponse>>;
    };
    showImageFileName: {
        type: BooleanConstructor;
        default: boolean;
    };
    showThumbnail: BooleanConstructor;
    showUploadProgress: {
        type: BooleanConstructor;
        default: boolean;
    };
    sizeLimit: {
        type: import("vue").PropType<number | import("./type").SizeLimitObj>;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    theme: {
        type: import("vue").PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
        default: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow";
        validator(val: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow"): boolean;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    trigger: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TriggerContext) => import("..").SlotReturnValue>;
    };
    triggerButtonProps: {
        type: import("vue").PropType<import("..").TdButtonProps>;
    };
    uploadAllFilesInOneRequest: BooleanConstructor;
    uploadButton: {
        type: import("vue").PropType<import("..").TdButtonProps | ((h: typeof import("vue").h, props: {
            disabled: boolean;
            uploading: boolean;
            uploadFiles: () => void;
            uploadText: string;
        }) => import("..").SlotReturnValue)>;
    };
    uploadPastedFiles: {
        type: BooleanConstructor;
        default: boolean;
    };
    useMockProgress: {
        type: BooleanConstructor;
        default: boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").UploadFile[]>;
        default: import("./type").UploadFile[];
    };
    modelValue: {
        type: import("vue").PropType<import("./type").UploadFile[]>;
        default: import("./type").UploadFile[];
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").UploadFile[]>;
        default: () => import("./type").UploadFile[];
    };
    withCredentials: BooleanConstructor;
    onCancelUpload: import("vue").PropType<() => void>;
    onChange: import("vue").PropType<(value: import("./type").UploadFile[], context: import("./type").UploadChangeContext) => void>;
    onDragenter: import("vue").PropType<(context: {
        e: DragEvent;
    }) => void>;
    onDragleave: import("vue").PropType<(context: {
        e: DragEvent;
    }) => void>;
    onDrop: import("vue").PropType<(context: {
        e: DragEvent;
    }) => void>;
    onFail: import("vue").PropType<(options: import("./type").UploadFailContext) => void>;
    onOneFileFail: import("vue").PropType<(options: import("./type").UploadFailContext) => void>;
    onOneFileSuccess: import("vue").PropType<(context: Pick<import("./type").SuccessContext, "file" | "e" | "response" | "XMLHttpRequest">) => void>;
    onPreview: import("vue").PropType<(options: {
        file: import("./type").UploadFile;
        index: number;
        e: MouseEvent;
    }) => void>;
    onProgress: import("vue").PropType<(options: import("./type").ProgressContext) => void>;
    onRemove: import("vue").PropType<(context: import("./type").UploadRemoveContext) => void>;
    onSelectChange: import("vue").PropType<(files: File[], context: import("./type").UploadSelectChangeContext) => void>;
    onSuccess: import("vue").PropType<(context: import("./type").SuccessContext) => void>;
    onValidate: import("vue").PropType<(context: {
        type: import("./type").UploadValidateType;
        files: import("./type").UploadFile[];
    }) => void>;
    onWaitingUploadFilesChange: import("vue").PropType<(context: {
        files: import("./type").UploadFile[];
        trigger: "remove" | "validate" | "uploaded";
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    max: number;
    name: string;
    value: import("./type").UploadFile[];
    action: string;
    method: "option" | "get" | "post" | "POST" | "GET" | "PUT" | "OPTION" | "PATCH" | "put" | "patch";
    draggable: boolean;
    disabled: boolean;
    multiple: boolean;
    placeholder: string;
    accept: string;
    modelValue: import("./type").UploadFile[];
    defaultValue: import("./type").UploadFile[];
    theme: "file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow";
    files: import("./type").UploadFile[];
    defaultFiles: import("./type").UploadFile[];
    autoUpload: boolean;
    uploadPastedFiles: boolean;
    showUploadProgress: boolean;
    showImageFileName: boolean;
    showThumbnail: boolean;
    isBatchUpload: boolean;
    withCredentials: boolean;
    useMockProgress: boolean;
    uploadAllFilesInOneRequest: boolean;
    allowUploadDuplicateFile: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Upload;
