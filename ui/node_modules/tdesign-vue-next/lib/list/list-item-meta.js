/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

import { defineComponent, createVNode } from 'vue';
import props from './list-item-meta-props.js';
import { usePrefixClass } from '../hooks/useConfig.js';
import { useContent, useTNodeJSX } from '../hooks/tnode.js';
import isString from 'lodash/isString';
import '../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_chunks/dep-8e5c228b.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-d3784887.js';
import 'dayjs';
import 'lodash/isArray';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';

var _ListItemMeta = defineComponent({
  name: "TListItemMeta",
  props: props,
  setup: function setup(props2, ctx) {
    var COMPONENT_NAME = usePrefixClass("list-item__meta");
    var renderContent = useContent();
    var renderTNodeJSX = useTNodeJSX();
    var renderAvatar = function renderAvatar() {
      if (props2.avatar || ctx.slots.avatar) {
        console.warn("`avatar` is going to be deprecated, please use `image` instead");
      }
      var thumbnail = renderContent("avatar", "image");
      if (!thumbnail) return;
      if (isString(thumbnail)) {
        return createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-avatar")
        }, [createVNode("img", {
          "src": thumbnail
        }, null)]);
      }
      return createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "-avatar")
      }, [thumbnail]);
    };
    return function () {
      var propsTitleContent = renderTNodeJSX("title");
      var propsDescriptionContent = renderTNodeJSX("description");
      var listItemMetaContent = [renderAvatar(), createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "-content")
      }, [propsTitleContent && createVNode("h3", {
        "class": "".concat(COMPONENT_NAME.value, "-title")
      }, [propsTitleContent]), propsDescriptionContent && createVNode("p", {
        "class": "".concat(COMPONENT_NAME.value, "-description")
      }, [propsDescriptionContent])])];
      return createVNode("div", {
        "class": COMPONENT_NAME.value
      }, [listItemMetaContent]);
    };
  }
});

export { _ListItemMeta as default };
//# sourceMappingURL=list-item-meta.js.map
