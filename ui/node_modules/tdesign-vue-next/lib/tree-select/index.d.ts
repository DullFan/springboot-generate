import './style';
export * from './interface';
export declare const TreeSelect: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        autoWidth: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: import("..").TreeOptionData<string | number>[];
                collapsedSelectedItems: import("..").TreeOptionData<string | number>[];
                count: number;
                onClose: (context: {
                    index: number;
                    e?: MouseEvent;
                }) => void;
            }) => import("..").SlotReturnValue>;
        };
        data: {
            type: import("vue").PropType<import("..").TreeOptionData<string | number>[]>;
            default: () => import("..").TreeOptionData<string | number>[];
        };
        disabled: BooleanConstructor;
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
        filter: {
            type: import("vue").PropType<(filterWords: string, option: import("..").TreeOptionData<string | number>) => boolean>;
        };
        filterable: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        inputValue: {
            type: import("vue").PropType<string>;
            default: any;
        };
        defaultInputValue: {
            type: import("vue").PropType<string>;
        };
        keys: {
            type: import("vue").PropType<import("..").TreeKeysType>;
        };
        loading: BooleanConstructor;
        loadingText: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        popupVisible: {
            type: BooleanConstructor;
            default: any;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        selectInputProps: {
            type: import("vue").PropType<import("..").TdSelectInputProps>;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        tagProps: {
            type: import("vue").PropType<import("..").TdTagProps>;
        };
        treeProps: {
            type: import("vue").PropType<import("..").TreeProps>;
        };
        value: {
            type: import("vue").PropType<import("./type").TreeSelectValue>;
            default: import("./type").TreeSelectValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TreeSelectValue>;
            default: import("./type").TreeSelectValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TreeSelectValue>;
        };
        valueDisplay: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: import("..").TreeOptionData<string | number>[];
                onClose: () => void;
            }) => import("..").SlotReturnValue>;
        };
        valueType: {
            type: import("vue").PropType<"object" | "value">;
            default: "object" | "value";
            validator(val: "object" | "value"): boolean;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").TreeSelectValue;
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").TreeSelectValue, context: {
            node: import("..").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            trigger: import("./type").TreeSelectValueChangeTrigger;
            e?: MouseEvent | KeyboardEvent;
        }) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            value: import("./type").TreeSelectValue;
            e: FocusEvent;
        }) => void>;
        onInputChange: import("vue").PropType<(value: string, context?: import("..").SelectInputValueChangeContext) => void>;
        onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
        onRemove: import("vue").PropType<(options: import("./type").RemoveOptions<import("..").TreeOptionData<string | number>>) => void>;
        onSearch: import("vue").PropType<(filterWords: string) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        autoWidth: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: import("..").TreeOptionData<string | number>[];
                collapsedSelectedItems: import("..").TreeOptionData<string | number>[];
                count: number;
                onClose: (context: {
                    index: number;
                    e?: MouseEvent;
                }) => void;
            }) => import("..").SlotReturnValue>;
        };
        data: {
            type: import("vue").PropType<import("..").TreeOptionData<string | number>[]>;
            default: () => import("..").TreeOptionData<string | number>[];
        };
        disabled: BooleanConstructor;
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
        filter: {
            type: import("vue").PropType<(filterWords: string, option: import("..").TreeOptionData<string | number>) => boolean>;
        };
        filterable: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        inputValue: {
            type: import("vue").PropType<string>;
            default: any;
        };
        defaultInputValue: {
            type: import("vue").PropType<string>;
        };
        keys: {
            type: import("vue").PropType<import("..").TreeKeysType>;
        };
        loading: BooleanConstructor;
        loadingText: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        popupVisible: {
            type: BooleanConstructor;
            default: any;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        selectInputProps: {
            type: import("vue").PropType<import("..").TdSelectInputProps>;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        tagProps: {
            type: import("vue").PropType<import("..").TdTagProps>;
        };
        treeProps: {
            type: import("vue").PropType<import("..").TreeProps>;
        };
        value: {
            type: import("vue").PropType<import("./type").TreeSelectValue>;
            default: import("./type").TreeSelectValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TreeSelectValue>;
            default: import("./type").TreeSelectValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TreeSelectValue>;
        };
        valueDisplay: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: import("..").TreeOptionData<string | number>[];
                onClose: () => void;
            }) => import("..").SlotReturnValue>;
        };
        valueType: {
            type: import("vue").PropType<"object" | "value">;
            default: "object" | "value";
            validator(val: "object" | "value"): boolean;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").TreeSelectValue;
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").TreeSelectValue, context: {
            node: import("..").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            trigger: import("./type").TreeSelectValueChangeTrigger;
            e?: MouseEvent | KeyboardEvent;
        }) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            value: import("./type").TreeSelectValue;
            e: FocusEvent;
        }) => void>;
        onInputChange: import("vue").PropType<(value: string, context?: import("..").SelectInputValueChangeContext) => void>;
        onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
        onRemove: import("vue").PropType<(options: import("./type").RemoveOptions<import("..").TreeOptionData<string | number>>) => void>;
        onSearch: import("vue").PropType<(filterWords: string) => void>;
    }>>, {
        max: number;
        data: import("..").TreeOptionData<string | number>[];
        value: import("./type").TreeSelectValue;
        loading: boolean;
        disabled: boolean;
        multiple: boolean;
        size: "small" | "medium" | "large";
        readonly: boolean;
        empty: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        placeholder: string;
        modelValue: import("./type").TreeSelectValue;
        autoWidth: boolean;
        borderless: boolean;
        clearable: boolean;
        inputValue: string;
        minCollapsedNum: number;
        popupVisible: boolean;
        loadingText: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        valueType: "object" | "value";
        filterable: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        autoWidth: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: import("..").TreeOptionData<string | number>[];
                collapsedSelectedItems: import("..").TreeOptionData<string | number>[];
                count: number;
                onClose: (context: {
                    index: number;
                    e?: MouseEvent;
                }) => void;
            }) => import("..").SlotReturnValue>;
        };
        data: {
            type: import("vue").PropType<import("..").TreeOptionData<string | number>[]>;
            default: () => import("..").TreeOptionData<string | number>[];
        };
        disabled: BooleanConstructor;
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
        filter: {
            type: import("vue").PropType<(filterWords: string, option: import("..").TreeOptionData<string | number>) => boolean>;
        };
        filterable: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        inputValue: {
            type: import("vue").PropType<string>;
            default: any;
        };
        defaultInputValue: {
            type: import("vue").PropType<string>;
        };
        keys: {
            type: import("vue").PropType<import("..").TreeKeysType>;
        };
        loading: BooleanConstructor;
        loadingText: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        popupVisible: {
            type: BooleanConstructor;
            default: any;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        selectInputProps: {
            type: import("vue").PropType<import("..").TdSelectInputProps>;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        tagProps: {
            type: import("vue").PropType<import("..").TdTagProps>;
        };
        treeProps: {
            type: import("vue").PropType<import("..").TreeProps>;
        };
        value: {
            type: import("vue").PropType<import("./type").TreeSelectValue>;
            default: import("./type").TreeSelectValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TreeSelectValue>;
            default: import("./type").TreeSelectValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TreeSelectValue>;
        };
        valueDisplay: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: import("..").TreeOptionData<string | number>[];
                onClose: () => void;
            }) => import("..").SlotReturnValue>;
        };
        valueType: {
            type: import("vue").PropType<"object" | "value">;
            default: "object" | "value";
            validator(val: "object" | "value"): boolean;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").TreeSelectValue;
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").TreeSelectValue, context: {
            node: import("..").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            trigger: import("./type").TreeSelectValueChangeTrigger;
            e?: MouseEvent | KeyboardEvent;
        }) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            value: import("./type").TreeSelectValue;
            e: FocusEvent;
        }) => void>;
        onInputChange: import("vue").PropType<(value: string, context?: import("..").SelectInputValueChangeContext) => void>;
        onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
        onRemove: import("vue").PropType<(options: import("./type").RemoveOptions<import("..").TreeOptionData<string | number>>) => void>;
        onSearch: import("vue").PropType<(filterWords: string) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        max: number;
        data: import("..").TreeOptionData<string | number>[];
        value: import("./type").TreeSelectValue;
        loading: boolean;
        disabled: boolean;
        multiple: boolean;
        size: "small" | "medium" | "large";
        readonly: boolean;
        empty: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        placeholder: string;
        modelValue: import("./type").TreeSelectValue;
        autoWidth: boolean;
        borderless: boolean;
        clearable: boolean;
        inputValue: string;
        minCollapsedNum: number;
        popupVisible: boolean;
        loadingText: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        valueType: "object" | "value";
        filterable: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    autoWidth: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            value: import("..").TreeOptionData<string | number>[];
            collapsedSelectedItems: import("..").TreeOptionData<string | number>[];
            count: number;
            onClose: (context: {
                index: number;
                e?: MouseEvent;
            }) => void;
        }) => import("..").SlotReturnValue>;
    };
    data: {
        type: import("vue").PropType<import("..").TreeOptionData<string | number>[]>;
        default: () => import("..").TreeOptionData<string | number>[];
    };
    disabled: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string;
    };
    filter: {
        type: import("vue").PropType<(filterWords: string, option: import("..").TreeOptionData<string | number>) => boolean>;
    };
    filterable: BooleanConstructor;
    inputProps: {
        type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
    };
    inputValue: {
        type: import("vue").PropType<string>;
        default: any;
    };
    defaultInputValue: {
        type: import("vue").PropType<string>;
    };
    keys: {
        type: import("vue").PropType<import("..").TreeKeysType>;
    };
    loading: BooleanConstructor;
    loadingText: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: any;
    };
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    selectInputProps: {
        type: import("vue").PropType<import("..").TdSelectInputProps>;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    tagProps: {
        type: import("vue").PropType<import("..").TdTagProps>;
    };
    treeProps: {
        type: import("vue").PropType<import("..").TreeProps>;
    };
    value: {
        type: import("vue").PropType<import("./type").TreeSelectValue>;
        default: import("./type").TreeSelectValue;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TreeSelectValue>;
        default: import("./type").TreeSelectValue;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TreeSelectValue>;
    };
    valueDisplay: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            value: import("..").TreeOptionData<string | number>[];
            onClose: () => void;
        }) => import("..").SlotReturnValue>;
    };
    valueType: {
        type: import("vue").PropType<"object" | "value">;
        default: "object" | "value";
        validator(val: "object" | "value"): boolean;
    };
    onBlur: import("vue").PropType<(context: {
        value: import("./type").TreeSelectValue;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").TreeSelectValue, context: {
        node: import("..").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        trigger: import("./type").TreeSelectValueChangeTrigger;
        e?: MouseEvent | KeyboardEvent;
    }) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        value: import("./type").TreeSelectValue;
        e: FocusEvent;
    }) => void>;
    onInputChange: import("vue").PropType<(value: string, context?: import("..").SelectInputValueChangeContext) => void>;
    onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
    onRemove: import("vue").PropType<(options: import("./type").RemoveOptions<import("..").TreeOptionData<string | number>>) => void>;
    onSearch: import("vue").PropType<(filterWords: string) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    max: number;
    data: import("..").TreeOptionData<string | number>[];
    value: import("./type").TreeSelectValue;
    loading: boolean;
    disabled: boolean;
    multiple: boolean;
    size: "small" | "medium" | "large";
    readonly: boolean;
    empty: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    placeholder: string;
    modelValue: import("./type").TreeSelectValue;
    autoWidth: boolean;
    borderless: boolean;
    clearable: boolean;
    inputValue: string;
    minCollapsedNum: number;
    popupVisible: boolean;
    loadingText: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    valueType: "object" | "value";
    filterable: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default TreeSelect;
