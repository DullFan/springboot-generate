/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

import { defineComponent, toRefs, provide, reactive, createVNode, mergeProps } from 'vue';
import props from './props.js';
import _BreadcrumbItem from './breadcrumb-item.js';
import { useTNodeJSX } from '../hooks/tnode.js';
import { usePrefixClass } from '../hooks/useConfig.js';
import '@babel/runtime/helpers/defineProperty';
import 'tdesign-icons-vue-next';
import './breadcrumb-item-props.js';
import '../tooltip/index.js';
import '../tooltip/tooltip.js';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/isFunction';
import 'lodash/omit';
import '../tooltip/props.js';
import '../popup/props.js';
import '../popup/index.js';
import '../popup/popup.js';
import '@popperjs/core';
import 'lodash/isObject';
import 'lodash/debounce';
import 'lodash/isString';
import '../hooks/useVModel.js';
import 'lodash/kebabCase';
import '../utils/dom.js';
import '../_chunks/dep-d3784887.js';
import 'lodash/isArray';
import '../utils/easing.js';
import '../_common/js/utils/set-style.js';
import '../popup/container.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../hooks/useResizeObserver.js';
import '../utils/withInstall.js';
import '../config-provider/useConfig.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_chunks/dep-8e5c228b.js';
import '@babel/runtime/helpers/typeof';
import 'dayjs';
import 'lodash/camelCase';
import '../utils/render-tnode.js';
import 'lodash/isEmpty';
import '../tooltip/util.js';
import '../hooks/useGlobalIcon.js';

var _Breadcrumb = defineComponent({
  name: "TBreadcrumb",
  props: props,
  setup: function setup(props2, _ref) {
    var slots = _ref.slots;
    var _toRefs = toRefs(props2),
      separator = _toRefs.separator,
      theme = _toRefs.theme,
      maxItemWidth = _toRefs.maxItemWidth;
    var COMPONENT_NAME = usePrefixClass("breadcrumb");
    provide("tBreadcrumb", reactive({
      separator: separator,
      theme: theme,
      slots: {
        separator: slots.separator
      },
      maxItemWidth: maxItemWidth
    }));
    var renderTNodeJSX = useTNodeJSX();
    return function () {
      var content = renderTNodeJSX("default");
      if (props2.options && props2.options.length) {
        content = props2.options.map(function (option, index) {
          return createVNode(_BreadcrumbItem, mergeProps(option, {
            "key": index
          }), {
            "default": function _default() {
              return [option["default"] || option.content];
            }
          });
        });
      }
      return createVNode("div", {
        "class": COMPONENT_NAME.value
      }, [content]);
    };
  }
});

export { _Breadcrumb as default };
//# sourceMappingURL=breadcrumb.js.map
