export * from './type';
export declare const Watermark: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        alpha: {
            type: NumberConstructor;
            default: number;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        height: {
            type: NumberConstructor;
        };
        isRepeat: {
            type: BooleanConstructor;
            default: boolean;
        };
        lineSpace: {
            type: NumberConstructor;
            default: number;
        };
        movable: BooleanConstructor;
        moveInterval: {
            type: NumberConstructor;
            default: number;
        };
        offset: {
            type: import("vue").PropType<number[]>;
        };
        removable: {
            type: BooleanConstructor;
            default: boolean;
        };
        rotate: {
            type: NumberConstructor;
            default: number;
        };
        watermarkContent: {
            type: import("vue").PropType<import("./type").WatermarkText | import("./type").WatermarkImage | (import("./type").WatermarkText | import("./type").WatermarkImage)[]>;
        };
        width: {
            type: NumberConstructor;
        };
        x: {
            type: NumberConstructor;
        };
        y: {
            type: NumberConstructor;
        };
        zIndex: {
            type: NumberConstructor;
        };
    }>>, {
        gapX: import("vue").ComputedRef<number>;
        gapY: import("vue").ComputedRef<number>;
        backgroundRepeat: import("vue").ComputedRef<"no-repeat" | "repeat">;
        backgroundImage: import("vue").Ref<string>;
        watermarkRef: import("vue").Ref<HTMLElement>;
        watermarkContentRef: import("vue").Ref<HTMLElement>;
        bgImageOptions: import("vue").ComputedRef<{
            width: number;
            height: number;
            rotate: number;
            lineSpace: number;
            alpha: number;
            gapX: number;
            gapY: number;
            watermarkContent: unknown;
            offsetLeft: number;
            offsetTop: number;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        alpha: {
            type: NumberConstructor;
            default: number;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        height: {
            type: NumberConstructor;
        };
        isRepeat: {
            type: BooleanConstructor;
            default: boolean;
        };
        lineSpace: {
            type: NumberConstructor;
            default: number;
        };
        movable: BooleanConstructor;
        moveInterval: {
            type: NumberConstructor;
            default: number;
        };
        offset: {
            type: import("vue").PropType<number[]>;
        };
        removable: {
            type: BooleanConstructor;
            default: boolean;
        };
        rotate: {
            type: NumberConstructor;
            default: number;
        };
        watermarkContent: {
            type: import("vue").PropType<import("./type").WatermarkText | import("./type").WatermarkImage | (import("./type").WatermarkText | import("./type").WatermarkImage)[]>;
        };
        width: {
            type: NumberConstructor;
        };
        x: {
            type: NumberConstructor;
        };
        y: {
            type: NumberConstructor;
        };
        zIndex: {
            type: NumberConstructor;
        };
    }>>, {
        alpha: number;
        rotate: number;
        removable: boolean;
        lineSpace: number;
        isRepeat: boolean;
        movable: boolean;
        moveInterval: number;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        alpha: {
            type: NumberConstructor;
            default: number;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        height: {
            type: NumberConstructor;
        };
        isRepeat: {
            type: BooleanConstructor;
            default: boolean;
        };
        lineSpace: {
            type: NumberConstructor;
            default: number;
        };
        movable: BooleanConstructor;
        moveInterval: {
            type: NumberConstructor;
            default: number;
        };
        offset: {
            type: import("vue").PropType<number[]>;
        };
        removable: {
            type: BooleanConstructor;
            default: boolean;
        };
        rotate: {
            type: NumberConstructor;
            default: number;
        };
        watermarkContent: {
            type: import("vue").PropType<import("./type").WatermarkText | import("./type").WatermarkImage | (import("./type").WatermarkText | import("./type").WatermarkImage)[]>;
        };
        width: {
            type: NumberConstructor;
        };
        x: {
            type: NumberConstructor;
        };
        y: {
            type: NumberConstructor;
        };
        zIndex: {
            type: NumberConstructor;
        };
    }>>, {
        gapX: import("vue").ComputedRef<number>;
        gapY: import("vue").ComputedRef<number>;
        backgroundRepeat: import("vue").ComputedRef<"no-repeat" | "repeat">;
        backgroundImage: import("vue").Ref<string>;
        watermarkRef: import("vue").Ref<HTMLElement>;
        watermarkContentRef: import("vue").Ref<HTMLElement>;
        bgImageOptions: import("vue").ComputedRef<{
            width: number;
            height: number;
            rotate: number;
            lineSpace: number;
            alpha: number;
            gapX: number;
            gapY: number;
            watermarkContent: unknown;
            offsetLeft: number;
            offsetTop: number;
        }>;
    }, {}, {}, {}, {
        alpha: number;
        rotate: number;
        removable: boolean;
        lineSpace: number;
        isRepeat: boolean;
        movable: boolean;
        moveInterval: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    alpha: {
        type: NumberConstructor;
        default: number;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    height: {
        type: NumberConstructor;
    };
    isRepeat: {
        type: BooleanConstructor;
        default: boolean;
    };
    lineSpace: {
        type: NumberConstructor;
        default: number;
    };
    movable: BooleanConstructor;
    moveInterval: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: import("vue").PropType<number[]>;
    };
    removable: {
        type: BooleanConstructor;
        default: boolean;
    };
    rotate: {
        type: NumberConstructor;
        default: number;
    };
    watermarkContent: {
        type: import("vue").PropType<import("./type").WatermarkText | import("./type").WatermarkImage | (import("./type").WatermarkText | import("./type").WatermarkImage)[]>;
    };
    width: {
        type: NumberConstructor;
    };
    x: {
        type: NumberConstructor;
    };
    y: {
        type: NumberConstructor;
    };
    zIndex: {
        type: NumberConstructor;
    };
}>>, {
    gapX: import("vue").ComputedRef<number>;
    gapY: import("vue").ComputedRef<number>;
    backgroundRepeat: import("vue").ComputedRef<"no-repeat" | "repeat">;
    backgroundImage: import("vue").Ref<string>;
    watermarkRef: import("vue").Ref<HTMLElement>;
    watermarkContentRef: import("vue").Ref<HTMLElement>;
    bgImageOptions: import("vue").ComputedRef<{
        width: number;
        height: number;
        rotate: number;
        lineSpace: number;
        alpha: number;
        gapX: number;
        gapY: number;
        watermarkContent: unknown;
        offsetLeft: number;
        offsetTop: number;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    alpha: number;
    rotate: number;
    removable: boolean;
    lineSpace: number;
    isRepeat: boolean;
    movable: boolean;
    moveInterval: number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Watermark;
