import { Slots, Ref } from 'vue';
import { TdSelectProps, TdOptionProps, SelectOptionGroup, SelectValue, SelectOption } from '../type';
import { KeysType } from '../../common';
declare type UniOption = (TdOptionProps | SelectOptionGroup) & {
    index?: number;
    slots?: Slots;
};
export declare const useSelectOptions: (props: TdSelectProps, keys: Ref<KeysType>, inputValue: Ref<string>) => {
    options: import("vue").ComputedRef<UniOption[]>;
    optionsMap: import("vue").ComputedRef<Map<SelectValue<SelectOption>, TdOptionProps>>;
    optionsList: import("vue").ComputedRef<TdOptionProps[]>;
    optionsCache: Ref<(import("../../common").PlainObject | {
        checkAll?: boolean;
        content?: string | ((h: typeof import("vue").h) => import("../../common").SlotReturnValue);
        default?: string | ((h: typeof import("vue").h) => import("../../common").SlotReturnValue);
        disabled?: boolean;
        label?: string;
        title?: string;
        value?: string | number;
    } | {
        group: string;
        children: {
            checkAll?: boolean;
            content?: string | ((h: typeof import("vue").h) => import("../../common").SlotReturnValue);
            default?: string | ((h: typeof import("vue").h) => import("../../common").SlotReturnValue);
            disabled?: boolean;
            label?: string;
            title?: string;
            value?: string | number;
        }[];
        divider?: boolean;
        label?: string;
    })[]>;
    displayOptions: import("vue").ComputedRef<SelectOption[]>;
};
export {};
