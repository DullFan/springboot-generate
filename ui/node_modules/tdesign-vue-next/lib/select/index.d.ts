import { TdSelectProps, TdOptionProps, TdOptionGroupProps, SelectOption } from './type';
import './style';
export * from './type';
export declare type SelectProps<T = SelectOption> = TdSelectProps<T>;
export declare type OptionProps = TdOptionProps;
export declare type OptionGroupProps = TdOptionGroupProps;
export declare const Select: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        valueDisplayOptions: {
            type: import("vue").PropType<import("../select-input/useSingle").SelectInputValueDisplayOptions>;
        };
        autoWidth: BooleanConstructor;
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: SelectOption[];
                collapsedSelectedItems: SelectOption[];
                count: number;
                onClose: (context: {
                    index: number;
                    e?: MouseEvent;
                }) => void;
            }) => import("..").SlotReturnValue>;
        };
        creatable: BooleanConstructor;
        disabled: BooleanConstructor;
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        filter: {
            type: import("vue").PropType<(filterWords: string, option: SelectOption) => boolean | Promise<boolean>>;
        };
        filterable: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        inputValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        defaultInputValue: {
            type: import("vue").PropType<string>;
        };
        keys: {
            type: import("vue").PropType<import("..").KeysType>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        loading: BooleanConstructor;
        loadingText: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        options: {
            type: import("vue").PropType<SelectOption[]>;
        };
        panelBottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        panelTopContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        popupVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultPopupVisible: BooleanConstructor;
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        reserveKeyword: BooleanConstructor;
        scroll: {
            type: import("vue").PropType<import("..").TScroll>;
        };
        selectInputProps: {
            type: import("vue").PropType<import("..").TdSelectInputProps>;
        };
        showArrow: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        tagInputProps: {
            type: import("vue").PropType<import("..").TdTagInputProps>;
        };
        tagProps: {
            type: import("vue").PropType<import("..").TdTagProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").SelectValue<SelectOption>>;
            default: import("./type").SelectValue<SelectOption>;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").SelectValue<SelectOption>>;
            default: import("./type").SelectValue<SelectOption>;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").SelectValue<SelectOption>>;
            default: any;
        };
        valueDisplay: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: import("./type").SelectValue<SelectOption>;
                onClose: (index: number) => void;
                displayValue?: import("./type").SelectValue<SelectOption>;
            }) => import("..").SlotReturnValue)>;
        };
        valueType: {
            type: import("vue").PropType<"object" | "value">;
            default: "object" | "value";
            validator(val: "object" | "value"): boolean;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").SelectValue<SelectOption>;
            e: FocusEvent | KeyboardEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").SelectValue<SelectOption>, context: {
            option?: SelectOption;
            selectedOptions: SelectOption[];
            trigger: import("./type").SelectValueChangeTrigger;
            e?: MouseEvent | KeyboardEvent;
        }) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onCreate: import("vue").PropType<(value: string | number) => void>;
        onEnter: import("vue").PropType<(context: {
            inputValue: string;
            e: KeyboardEvent;
            value: import("./type").SelectValue<SelectOption>;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            value: import("./type").SelectValue<SelectOption>;
            e: FocusEvent | KeyboardEvent;
        }) => void>;
        onInputChange: import("vue").PropType<(value: string, context?: import("..").SelectInputValueChangeContext) => void>;
        onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
        onRemove: import("vue").PropType<(options: import("./type").SelectRemoveContext<SelectOption>) => void>;
        onSearch: import("vue").PropType<(filterWords: string, context: {
            e: KeyboardEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        valueDisplayOptions: {
            type: import("vue").PropType<import("../select-input/useSingle").SelectInputValueDisplayOptions>;
        };
        autoWidth: BooleanConstructor;
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: SelectOption[];
                collapsedSelectedItems: SelectOption[];
                count: number;
                onClose: (context: {
                    index: number;
                    e?: MouseEvent;
                }) => void;
            }) => import("..").SlotReturnValue>;
        };
        creatable: BooleanConstructor;
        disabled: BooleanConstructor;
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        filter: {
            type: import("vue").PropType<(filterWords: string, option: SelectOption) => boolean | Promise<boolean>>;
        };
        filterable: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        inputValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        defaultInputValue: {
            type: import("vue").PropType<string>;
        };
        keys: {
            type: import("vue").PropType<import("..").KeysType>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        loading: BooleanConstructor;
        loadingText: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        options: {
            type: import("vue").PropType<SelectOption[]>;
        };
        panelBottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        panelTopContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        popupVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultPopupVisible: BooleanConstructor;
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        reserveKeyword: BooleanConstructor;
        scroll: {
            type: import("vue").PropType<import("..").TScroll>;
        };
        selectInputProps: {
            type: import("vue").PropType<import("..").TdSelectInputProps>;
        };
        showArrow: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        tagInputProps: {
            type: import("vue").PropType<import("..").TdTagInputProps>;
        };
        tagProps: {
            type: import("vue").PropType<import("..").TdTagProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").SelectValue<SelectOption>>;
            default: import("./type").SelectValue<SelectOption>;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").SelectValue<SelectOption>>;
            default: import("./type").SelectValue<SelectOption>;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").SelectValue<SelectOption>>;
            default: any;
        };
        valueDisplay: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: import("./type").SelectValue<SelectOption>;
                onClose: (index: number) => void;
                displayValue?: import("./type").SelectValue<SelectOption>;
            }) => import("..").SlotReturnValue)>;
        };
        valueType: {
            type: import("vue").PropType<"object" | "value">;
            default: "object" | "value";
            validator(val: "object" | "value"): boolean;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").SelectValue<SelectOption>;
            e: FocusEvent | KeyboardEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").SelectValue<SelectOption>, context: {
            option?: SelectOption;
            selectedOptions: SelectOption[];
            trigger: import("./type").SelectValueChangeTrigger;
            e?: MouseEvent | KeyboardEvent;
        }) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onCreate: import("vue").PropType<(value: string | number) => void>;
        onEnter: import("vue").PropType<(context: {
            inputValue: string;
            e: KeyboardEvent;
            value: import("./type").SelectValue<SelectOption>;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            value: import("./type").SelectValue<SelectOption>;
            e: FocusEvent | KeyboardEvent;
        }) => void>;
        onInputChange: import("vue").PropType<(value: string, context?: import("..").SelectInputValueChangeContext) => void>;
        onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
        onRemove: import("vue").PropType<(options: import("./type").SelectRemoveContext<SelectOption>) => void>;
        onSearch: import("vue").PropType<(filterWords: string, context: {
            e: KeyboardEvent;
        }) => void>;
    }>>, {
        max: number;
        value: string | number | boolean | import("..").PlainObject | TdOptionProps | import("./type").SelectOptionGroup | import("./type").SelectValue<SelectOption>[];
        loading: boolean;
        autofocus: boolean;
        disabled: boolean;
        multiple: boolean;
        size: import("..").SizeEnum;
        readonly: boolean;
        status: "error" | "default" | "success" | "warning";
        placeholder: string;
        modelValue: string | number | boolean | import("..").PlainObject | TdOptionProps | import("./type").SelectOptionGroup | import("./type").SelectValue<SelectOption>[];
        defaultValue: any;
        showArrow: boolean;
        autoWidth: boolean;
        borderless: boolean;
        clearable: boolean;
        inputValue: string;
        minCollapsedNum: number;
        popupVisible: boolean;
        defaultPopupVisible: boolean;
        reserveKeyword: boolean;
        valueType: "object" | "value";
        creatable: boolean;
        filterable: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        valueDisplayOptions: {
            type: import("vue").PropType<import("../select-input/useSingle").SelectInputValueDisplayOptions>;
        };
        autoWidth: BooleanConstructor;
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: SelectOption[];
                collapsedSelectedItems: SelectOption[];
                count: number;
                onClose: (context: {
                    index: number;
                    e?: MouseEvent;
                }) => void;
            }) => import("..").SlotReturnValue>;
        };
        creatable: BooleanConstructor;
        disabled: BooleanConstructor;
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        filter: {
            type: import("vue").PropType<(filterWords: string, option: SelectOption) => boolean | Promise<boolean>>;
        };
        filterable: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        inputValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        defaultInputValue: {
            type: import("vue").PropType<string>;
        };
        keys: {
            type: import("vue").PropType<import("..").KeysType>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        loading: BooleanConstructor;
        loadingText: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        options: {
            type: import("vue").PropType<SelectOption[]>;
        };
        panelBottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        panelTopContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        popupVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultPopupVisible: BooleanConstructor;
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        reserveKeyword: BooleanConstructor;
        scroll: {
            type: import("vue").PropType<import("..").TScroll>;
        };
        selectInputProps: {
            type: import("vue").PropType<import("..").TdSelectInputProps>;
        };
        showArrow: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        tagInputProps: {
            type: import("vue").PropType<import("..").TdTagInputProps>;
        };
        tagProps: {
            type: import("vue").PropType<import("..").TdTagProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").SelectValue<SelectOption>>;
            default: import("./type").SelectValue<SelectOption>;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").SelectValue<SelectOption>>;
            default: import("./type").SelectValue<SelectOption>;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").SelectValue<SelectOption>>;
            default: any;
        };
        valueDisplay: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: import("./type").SelectValue<SelectOption>;
                onClose: (index: number) => void;
                displayValue?: import("./type").SelectValue<SelectOption>;
            }) => import("..").SlotReturnValue)>;
        };
        valueType: {
            type: import("vue").PropType<"object" | "value">;
            default: "object" | "value";
            validator(val: "object" | "value"): boolean;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").SelectValue<SelectOption>;
            e: FocusEvent | KeyboardEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").SelectValue<SelectOption>, context: {
            option?: SelectOption;
            selectedOptions: SelectOption[];
            trigger: import("./type").SelectValueChangeTrigger;
            e?: MouseEvent | KeyboardEvent;
        }) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onCreate: import("vue").PropType<(value: string | number) => void>;
        onEnter: import("vue").PropType<(context: {
            inputValue: string;
            e: KeyboardEvent;
            value: import("./type").SelectValue<SelectOption>;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            value: import("./type").SelectValue<SelectOption>;
            e: FocusEvent | KeyboardEvent;
        }) => void>;
        onInputChange: import("vue").PropType<(value: string, context?: import("..").SelectInputValueChangeContext) => void>;
        onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
        onRemove: import("vue").PropType<(options: import("./type").SelectRemoveContext<SelectOption>) => void>;
        onSearch: import("vue").PropType<(filterWords: string, context: {
            e: KeyboardEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        max: number;
        value: string | number | boolean | import("..").PlainObject | TdOptionProps | import("./type").SelectOptionGroup | import("./type").SelectValue<SelectOption>[];
        loading: boolean;
        autofocus: boolean;
        disabled: boolean;
        multiple: boolean;
        size: import("..").SizeEnum;
        readonly: boolean;
        status: "error" | "default" | "success" | "warning";
        placeholder: string;
        modelValue: string | number | boolean | import("..").PlainObject | TdOptionProps | import("./type").SelectOptionGroup | import("./type").SelectValue<SelectOption>[];
        defaultValue: any;
        showArrow: boolean;
        autoWidth: boolean;
        borderless: boolean;
        clearable: boolean;
        inputValue: string;
        minCollapsedNum: number;
        popupVisible: boolean;
        defaultPopupVisible: boolean;
        reserveKeyword: boolean;
        valueType: "object" | "value";
        creatable: boolean;
        filterable: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    valueDisplayOptions: {
        type: import("vue").PropType<import("../select-input/useSingle").SelectInputValueDisplayOptions>;
    };
    autoWidth: BooleanConstructor;
    autofocus: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            value: SelectOption[];
            collapsedSelectedItems: SelectOption[];
            count: number;
            onClose: (context: {
                index: number;
                e?: MouseEvent;
            }) => void;
        }) => import("..").SlotReturnValue>;
    };
    creatable: BooleanConstructor;
    disabled: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    filter: {
        type: import("vue").PropType<(filterWords: string, option: SelectOption) => boolean | Promise<boolean>>;
    };
    filterable: BooleanConstructor;
    inputProps: {
        type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
    };
    inputValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    defaultInputValue: {
        type: import("vue").PropType<string>;
    };
    keys: {
        type: import("vue").PropType<import("..").KeysType>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    loading: BooleanConstructor;
    loadingText: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    options: {
        type: import("vue").PropType<SelectOption[]>;
    };
    panelBottomContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    panelTopContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultPopupVisible: BooleanConstructor;
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    reserveKeyword: BooleanConstructor;
    scroll: {
        type: import("vue").PropType<import("..").TScroll>;
    };
    selectInputProps: {
        type: import("vue").PropType<import("..").TdSelectInputProps>;
    };
    showArrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("..").SizeEnum>;
        default: import("..").SizeEnum;
        validator(val: import("..").SizeEnum): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    tagInputProps: {
        type: import("vue").PropType<import("..").TdTagInputProps>;
    };
    tagProps: {
        type: import("vue").PropType<import("..").TdTagProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").SelectValue<SelectOption>>;
        default: import("./type").SelectValue<SelectOption>;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").SelectValue<SelectOption>>;
        default: import("./type").SelectValue<SelectOption>;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").SelectValue<SelectOption>>;
        default: any;
    };
    valueDisplay: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: import("./type").SelectValue<SelectOption>;
            onClose: (index: number) => void;
            displayValue?: import("./type").SelectValue<SelectOption>;
        }) => import("..").SlotReturnValue)>;
    };
    valueType: {
        type: import("vue").PropType<"object" | "value">;
        default: "object" | "value";
        validator(val: "object" | "value"): boolean;
    };
    onBlur: import("vue").PropType<(context: {
        value: import("./type").SelectValue<SelectOption>;
        e: FocusEvent | KeyboardEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").SelectValue<SelectOption>, context: {
        option?: SelectOption;
        selectedOptions: SelectOption[];
        trigger: import("./type").SelectValueChangeTrigger;
        e?: MouseEvent | KeyboardEvent;
    }) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onCreate: import("vue").PropType<(value: string | number) => void>;
    onEnter: import("vue").PropType<(context: {
        inputValue: string;
        e: KeyboardEvent;
        value: import("./type").SelectValue<SelectOption>;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        value: import("./type").SelectValue<SelectOption>;
        e: FocusEvent | KeyboardEvent;
    }) => void>;
    onInputChange: import("vue").PropType<(value: string, context?: import("..").SelectInputValueChangeContext) => void>;
    onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
    onRemove: import("vue").PropType<(options: import("./type").SelectRemoveContext<SelectOption>) => void>;
    onSearch: import("vue").PropType<(filterWords: string, context: {
        e: KeyboardEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    max: number;
    value: string | number | boolean | import("..").PlainObject | TdOptionProps | import("./type").SelectOptionGroup | import("./type").SelectValue<SelectOption>[];
    loading: boolean;
    autofocus: boolean;
    disabled: boolean;
    multiple: boolean;
    size: import("..").SizeEnum;
    readonly: boolean;
    status: "error" | "default" | "success" | "warning";
    placeholder: string;
    modelValue: string | number | boolean | import("..").PlainObject | TdOptionProps | import("./type").SelectOptionGroup | import("./type").SelectValue<SelectOption>[];
    defaultValue: any;
    showArrow: boolean;
    autoWidth: boolean;
    borderless: boolean;
    clearable: boolean;
    inputValue: string;
    minCollapsedNum: number;
    popupVisible: boolean;
    defaultPopupVisible: boolean;
    reserveKeyword: boolean;
    valueType: "object" | "value";
    creatable: boolean;
    filterable: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const Option: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        createAble: BooleanConstructor;
        multiple: BooleanConstructor;
        index: NumberConstructor;
        rowIndex: NumberConstructor;
        trs: MapConstructor;
        scrollType: StringConstructor;
        isVirtual: BooleanConstructor;
        bufferSize: NumberConstructor;
        checkAll: BooleanConstructor;
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        label: {
            type: StringConstructor;
            default: string;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        value: {
            type: import("vue").PropType<string | number>;
        };
    }>> & {
        "onRow-mounted"?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "row-mounted"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        createAble: BooleanConstructor;
        multiple: BooleanConstructor;
        index: NumberConstructor;
        rowIndex: NumberConstructor;
        trs: MapConstructor;
        scrollType: StringConstructor;
        isVirtual: BooleanConstructor;
        bufferSize: NumberConstructor;
        checkAll: BooleanConstructor;
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        label: {
            type: StringConstructor;
            default: string;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        value: {
            type: import("vue").PropType<string | number>;
        };
    }>> & {
        "onRow-mounted"?: (...args: any[]) => any;
    }, {
        label: string;
        title: string;
        disabled: boolean;
        multiple: boolean;
        checkAll: boolean;
        createAble: boolean;
        isVirtual: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        createAble: BooleanConstructor;
        multiple: BooleanConstructor;
        index: NumberConstructor;
        rowIndex: NumberConstructor;
        trs: MapConstructor;
        scrollType: StringConstructor;
        isVirtual: BooleanConstructor;
        bufferSize: NumberConstructor;
        checkAll: BooleanConstructor;
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        label: {
            type: StringConstructor;
            default: string;
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        value: {
            type: import("vue").PropType<string | number>;
        };
    }>> & {
        "onRow-mounted"?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        label: string;
        title: string;
        disabled: boolean;
        multiple: boolean;
        checkAll: boolean;
        createAble: boolean;
        isVirtual: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    createAble: BooleanConstructor;
    multiple: BooleanConstructor;
    index: NumberConstructor;
    rowIndex: NumberConstructor;
    trs: MapConstructor;
    scrollType: StringConstructor;
    isVirtual: BooleanConstructor;
    bufferSize: NumberConstructor;
    checkAll: BooleanConstructor;
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    label: {
        type: StringConstructor;
        default: string;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    value: {
        type: import("vue").PropType<string | number>;
    };
}>> & {
    "onRow-mounted"?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "row-mounted"[], "row-mounted", {
    label: string;
    title: string;
    disabled: boolean;
    multiple: boolean;
    checkAll: boolean;
    createAble: boolean;
    isVirtual: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const OptionGroup: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        divider: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        divider: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
    }>>, {
        label: string;
        divider: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        divider: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        label: string;
        divider: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    divider: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    label: string;
    divider: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Select;
