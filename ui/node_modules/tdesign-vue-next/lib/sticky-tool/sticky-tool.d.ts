import type { TdStickyItemProps } from './type';
declare const _default: import("vue").DefineComponent<{
    list: {
        type: import("vue").PropType<TdStickyItemProps[]>;
        default: () => TdStickyItemProps[];
    };
    offset: {
        type: import("vue").PropType<(string | number)[]>;
    };
    placement: {
        type: import("vue").PropType<"left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center">;
        default: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
        validator(val: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center"): boolean;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    shape: {
        type: import("vue").PropType<"square" | "round">;
        default: "square" | "round";
        validator(val: "square" | "round"): boolean;
    };
    type: {
        type: import("vue").PropType<"normal" | "compact">;
        default: "normal" | "compact";
        validator(val: "normal" | "compact"): boolean;
    };
    width: {
        type: import("vue").PropType<string | number>;
    };
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
        item: TdStickyItemProps;
    }) => void>;
    onHover: import("vue").PropType<(context: {
        e: MouseEvent;
        item: TdStickyItemProps;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    list: {
        type: import("vue").PropType<TdStickyItemProps[]>;
        default: () => TdStickyItemProps[];
    };
    offset: {
        type: import("vue").PropType<(string | number)[]>;
    };
    placement: {
        type: import("vue").PropType<"left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center">;
        default: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
        validator(val: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center"): boolean;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    shape: {
        type: import("vue").PropType<"square" | "round">;
        default: "square" | "round";
        validator(val: "square" | "round"): boolean;
    };
    type: {
        type: import("vue").PropType<"normal" | "compact">;
        default: "normal" | "compact";
        validator(val: "normal" | "compact"): boolean;
    };
    width: {
        type: import("vue").PropType<string | number>;
    };
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
        item: TdStickyItemProps;
    }) => void>;
    onHover: import("vue").PropType<(context: {
        e: MouseEvent;
        item: TdStickyItemProps;
    }) => void>;
}>>, {
    type: "normal" | "compact";
    list: TdStickyItemProps[];
    shape: "square" | "round";
    placement: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
}, {}>;
export default _default;
