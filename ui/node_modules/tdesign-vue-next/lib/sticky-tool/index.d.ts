import { TdStickyToolProps, TdStickyItemProps } from './type';
import './style';
export * from './type';
export declare type StickyToolProps = TdStickyToolProps;
export declare type StickyItemProps = TdStickyItemProps;
export declare const StickyItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        type: {
            type: import("vue").PropType<"normal" | "compact">;
            default: "normal" | "compact";
            validator(val: "normal" | "compact"): boolean;
        };
        shape: {
            type: import("vue").PropType<"square" | "round">;
            default: "square" | "round";
            validator(val: "square" | "round"): boolean;
        };
        placement: {
            type: import("vue").PropType<"left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center">;
            default: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
            validator(val: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center"): boolean;
        };
        basePopupProps: import("vue").PropType<import("..").TdPopupProps>;
        baseWidth: {
            type: import("vue").PropType<string | number>;
        };
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
            item: TdStickyItemProps;
        }) => void>;
        onHover: import("vue").PropType<(context: {
            e: MouseEvent;
            item: TdStickyItemProps;
        }) => void>;
        icon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        popup: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        trigger: {
            type: import("vue").PropType<"click" | "hover">;
            default: "click" | "hover";
            validator(val: "click" | "hover"): boolean;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        type: {
            type: import("vue").PropType<"normal" | "compact">;
            default: "normal" | "compact";
            validator(val: "normal" | "compact"): boolean;
        };
        shape: {
            type: import("vue").PropType<"square" | "round">;
            default: "square" | "round";
            validator(val: "square" | "round"): boolean;
        };
        placement: {
            type: import("vue").PropType<"left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center">;
            default: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
            validator(val: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center"): boolean;
        };
        basePopupProps: import("vue").PropType<import("..").TdPopupProps>;
        baseWidth: {
            type: import("vue").PropType<string | number>;
        };
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
            item: TdStickyItemProps;
        }) => void>;
        onHover: import("vue").PropType<(context: {
            e: MouseEvent;
            item: TdStickyItemProps;
        }) => void>;
        icon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        popup: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        trigger: {
            type: import("vue").PropType<"click" | "hover">;
            default: "click" | "hover";
            validator(val: "click" | "hover"): boolean;
        };
    }>>, {
        type: "normal" | "compact";
        shape: "square" | "round";
        trigger: "click" | "hover";
        placement: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        type: {
            type: import("vue").PropType<"normal" | "compact">;
            default: "normal" | "compact";
            validator(val: "normal" | "compact"): boolean;
        };
        shape: {
            type: import("vue").PropType<"square" | "round">;
            default: "square" | "round";
            validator(val: "square" | "round"): boolean;
        };
        placement: {
            type: import("vue").PropType<"left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center">;
            default: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
            validator(val: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center"): boolean;
        };
        basePopupProps: import("vue").PropType<import("..").TdPopupProps>;
        baseWidth: {
            type: import("vue").PropType<string | number>;
        };
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
            item: TdStickyItemProps;
        }) => void>;
        onHover: import("vue").PropType<(context: {
            e: MouseEvent;
            item: TdStickyItemProps;
        }) => void>;
        icon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        popup: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        trigger: {
            type: import("vue").PropType<"click" | "hover">;
            default: "click" | "hover";
            validator(val: "click" | "hover"): boolean;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        type: "normal" | "compact";
        shape: "square" | "round";
        trigger: "click" | "hover";
        placement: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    type: {
        type: import("vue").PropType<"normal" | "compact">;
        default: "normal" | "compact";
        validator(val: "normal" | "compact"): boolean;
    };
    shape: {
        type: import("vue").PropType<"square" | "round">;
        default: "square" | "round";
        validator(val: "square" | "round"): boolean;
    };
    placement: {
        type: import("vue").PropType<"left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center">;
        default: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
        validator(val: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center"): boolean;
    };
    basePopupProps: import("vue").PropType<import("..").TdPopupProps>;
    baseWidth: {
        type: import("vue").PropType<string | number>;
    };
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
        item: TdStickyItemProps;
    }) => void>;
    onHover: import("vue").PropType<(context: {
        e: MouseEvent;
        item: TdStickyItemProps;
    }) => void>;
    icon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    popup: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    trigger: {
        type: import("vue").PropType<"click" | "hover">;
        default: "click" | "hover";
        validator(val: "click" | "hover"): boolean;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    type: "normal" | "compact";
    shape: "square" | "round";
    trigger: "click" | "hover";
    placement: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const StickyTool: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        list: {
            type: import("vue").PropType<TdStickyItemProps[]>;
            default: () => TdStickyItemProps[];
        };
        offset: {
            type: import("vue").PropType<(string | number)[]>;
        };
        placement: {
            type: import("vue").PropType<"left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center">;
            default: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
            validator(val: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center"): boolean;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        shape: {
            type: import("vue").PropType<"square" | "round">;
            default: "square" | "round";
            validator(val: "square" | "round"): boolean;
        };
        type: {
            type: import("vue").PropType<"normal" | "compact">;
            default: "normal" | "compact";
            validator(val: "normal" | "compact"): boolean;
        };
        width: {
            type: import("vue").PropType<string | number>;
        };
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
            item: TdStickyItemProps;
        }) => void>;
        onHover: import("vue").PropType<(context: {
            e: MouseEvent;
            item: TdStickyItemProps;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        list: {
            type: import("vue").PropType<TdStickyItemProps[]>;
            default: () => TdStickyItemProps[];
        };
        offset: {
            type: import("vue").PropType<(string | number)[]>;
        };
        placement: {
            type: import("vue").PropType<"left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center">;
            default: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
            validator(val: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center"): boolean;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        shape: {
            type: import("vue").PropType<"square" | "round">;
            default: "square" | "round";
            validator(val: "square" | "round"): boolean;
        };
        type: {
            type: import("vue").PropType<"normal" | "compact">;
            default: "normal" | "compact";
            validator(val: "normal" | "compact"): boolean;
        };
        width: {
            type: import("vue").PropType<string | number>;
        };
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
            item: TdStickyItemProps;
        }) => void>;
        onHover: import("vue").PropType<(context: {
            e: MouseEvent;
            item: TdStickyItemProps;
        }) => void>;
    }>>, {
        type: "normal" | "compact";
        list: TdStickyItemProps[];
        shape: "square" | "round";
        placement: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        list: {
            type: import("vue").PropType<TdStickyItemProps[]>;
            default: () => TdStickyItemProps[];
        };
        offset: {
            type: import("vue").PropType<(string | number)[]>;
        };
        placement: {
            type: import("vue").PropType<"left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center">;
            default: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
            validator(val: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center"): boolean;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        shape: {
            type: import("vue").PropType<"square" | "round">;
            default: "square" | "round";
            validator(val: "square" | "round"): boolean;
        };
        type: {
            type: import("vue").PropType<"normal" | "compact">;
            default: "normal" | "compact";
            validator(val: "normal" | "compact"): boolean;
        };
        width: {
            type: import("vue").PropType<string | number>;
        };
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
            item: TdStickyItemProps;
        }) => void>;
        onHover: import("vue").PropType<(context: {
            e: MouseEvent;
            item: TdStickyItemProps;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        type: "normal" | "compact";
        list: TdStickyItemProps[];
        shape: "square" | "round";
        placement: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    list: {
        type: import("vue").PropType<TdStickyItemProps[]>;
        default: () => TdStickyItemProps[];
    };
    offset: {
        type: import("vue").PropType<(string | number)[]>;
    };
    placement: {
        type: import("vue").PropType<"left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center">;
        default: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
        validator(val: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center"): boolean;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    shape: {
        type: import("vue").PropType<"square" | "round">;
        default: "square" | "round";
        validator(val: "square" | "round"): boolean;
    };
    type: {
        type: import("vue").PropType<"normal" | "compact">;
        default: "normal" | "compact";
        validator(val: "normal" | "compact"): boolean;
    };
    width: {
        type: import("vue").PropType<string | number>;
    };
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
        item: TdStickyItemProps;
    }) => void>;
    onHover: import("vue").PropType<(context: {
        e: MouseEvent;
        item: TdStickyItemProps;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    type: "normal" | "compact";
    list: TdStickyItemProps[];
    shape: "square" | "round";
    placement: "left-top" | "left-bottom" | "right-top" | "right-bottom" | "right-center" | "left-center";
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default StickyTool;
