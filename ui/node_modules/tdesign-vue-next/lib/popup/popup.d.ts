declare const _default: import("vue").DefineComponent<{
    expandAnimation: {
        type: BooleanConstructor;
    };
    attach: {
        type: import("vue").PropType<import("..").AttachNode>;
        default: import("..").AttachNode;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    delay: {
        type: import("vue").PropType<number | number[]>;
    };
    destroyOnClose: BooleanConstructor;
    disabled: BooleanConstructor;
    hideEmptyPopup: BooleanConstructor;
    overlayClassName: {
        type: import("vue").PropType<import("..").ClassName>;
    };
    overlayInnerClassName: {
        type: import("vue").PropType<import("..").ClassName>;
    };
    overlayInnerStyle: {
        type: import("vue").PropType<import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles)>;
    };
    overlayStyle: {
        type: import("vue").PropType<import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles)>;
    };
    placement: {
        type: import("vue").PropType<import("./type").PopupPlacement>;
        default: string;
    };
    popperOptions: {
        type: import("vue").PropType<object>;
    };
    showArrow: BooleanConstructor;
    trigger: {
        type: import("vue").PropType<"click" | "focus" | "mousedown" | "context-menu" | "hover">;
        default: "click" | "focus" | "mousedown" | "context-menu" | "hover";
        validator(val: "click" | "focus" | "mousedown" | "context-menu" | "hover"): boolean;
    };
    triggerElement: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onOverlayClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onScroll: import("vue").PropType<(context: {
        e: WheelEvent;
    }) => void>;
    onScrollToBottom: import("vue").PropType<(context: {
        e: WheelEvent;
    }) => void>;
    onVisibleChange: import("vue").PropType<(visible: boolean, context: import("./type").PopupVisibleChangeContext) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    expandAnimation: {
        type: BooleanConstructor;
    };
    attach: {
        type: import("vue").PropType<import("..").AttachNode>;
        default: import("..").AttachNode;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    delay: {
        type: import("vue").PropType<number | number[]>;
    };
    destroyOnClose: BooleanConstructor;
    disabled: BooleanConstructor;
    hideEmptyPopup: BooleanConstructor;
    overlayClassName: {
        type: import("vue").PropType<import("..").ClassName>;
    };
    overlayInnerClassName: {
        type: import("vue").PropType<import("..").ClassName>;
    };
    overlayInnerStyle: {
        type: import("vue").PropType<import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles)>;
    };
    overlayStyle: {
        type: import("vue").PropType<import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles)>;
    };
    placement: {
        type: import("vue").PropType<import("./type").PopupPlacement>;
        default: string;
    };
    popperOptions: {
        type: import("vue").PropType<object>;
    };
    showArrow: BooleanConstructor;
    trigger: {
        type: import("vue").PropType<"click" | "focus" | "mousedown" | "context-menu" | "hover">;
        default: "click" | "focus" | "mousedown" | "context-menu" | "hover";
        validator(val: "click" | "focus" | "mousedown" | "context-menu" | "hover"): boolean;
    };
    triggerElement: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onOverlayClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onScroll: import("vue").PropType<(context: {
        e: WheelEvent;
    }) => void>;
    onScrollToBottom: import("vue").PropType<(context: {
        e: WheelEvent;
    }) => void>;
    onVisibleChange: import("vue").PropType<(visible: boolean, context: import("./type").PopupVisibleChangeContext) => void>;
}>>, {
    visible: boolean;
    disabled: boolean;
    trigger: "click" | "focus" | "mousedown" | "context-menu" | "hover";
    modelValue: boolean;
    placement: import("./type").PopupPlacement;
    attach: import("..").AttachNode;
    expandAnimation: boolean;
    destroyOnClose: boolean;
    hideEmptyPopup: boolean;
    showArrow: boolean;
    defaultVisible: boolean;
}, {}>;
export default _default;
