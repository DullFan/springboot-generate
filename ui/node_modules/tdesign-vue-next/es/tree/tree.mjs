/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-2dead3b8.mjs';
import { isVNode, defineComponent, createVNode, TransitionGroup } from 'vue';
import { u as upperFirst_1 } from '../_chunks/dep-084c0ba6.mjs';
import { i as isFunction_1 } from '../_chunks/dep-706c37a3.mjs';
import { getCreateElement, getScopedSlots } from './adapt.mjs';
import props from './props.mjs';
import useTreeStore from './hooks/useTreeStore.mjs';
import useTreeStyles from './hooks/useTreeStyles.mjs';
import useTreeState from './hooks/useTreeState.mjs';
import useTreeAction from './hooks/useTreeAction.mjs';
import useTreeScroll from './hooks/useTreeScroll.mjs';
import useTreeNodes from './hooks/useTreeNodes.mjs';
import useDragHandle from './hooks/useDragHandle.mjs';
import { renderTNodeJSX } from '../utils/render-tnode.mjs';
import { getNode } from './util.mjs';
import { useConfig } from '../config-provider/useConfig.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import '../_chunks/dep-8a6a0750.mjs';
import '../_chunks/dep-ad0f5c12.mjs';
import '../_chunks/dep-056e3d49.mjs';
import '../_chunks/dep-de0d9668.mjs';
import '../_chunks/dep-4ef63f67.mjs';
import '../_chunks/dep-f5bde8c1.mjs';
import '../_chunks/dep-8e0cf610.mjs';
import '../_chunks/dep-c23362d5.mjs';
import '../_chunks/dep-07b6df34.mjs';
import '../_chunks/dep-441fa01f.mjs';
import '../_chunks/dep-7d8aa418.mjs';
import '../_chunks/dep-a053ff3d.mjs';
import '../_chunks/dep-65c48aa3.mjs';
import '../utils/withInstall.mjs';
import '../hooks/useVModel.mjs';
import '../_chunks/dep-dab87894.mjs';
import '../hooks/useDefaultValue.mjs';
import 'tdesign-icons-vue-next';
import '../checkbox/index.mjs';
import '../checkbox/checkbox.mjs';
import '../_chunks/dep-f29ee43a.mjs';
import '../_chunks/dep-04fa0fa7.mjs';
import '../checkbox/props.mjs';
import '../hooks/useRipple.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../_chunks/dep-88e27495.mjs';
import '../_chunks/dep-b1040349.mjs';
import '../_chunks/dep-203afd59.mjs';
import '../_chunks/dep-48235a7f.mjs';
import '../_chunks/dep-82bdd07b.mjs';
import '../_chunks/dep-bfe0dcb6.mjs';
import '../_chunks/dep-1a2263f9.mjs';
import '../_chunks/dep-0126dffd.mjs';
import '../_chunks/dep-64862a5a.mjs';
import '../_chunks/dep-e8c6972d.mjs';
import '../_chunks/dep-b15f1e4a.mjs';
import '../_chunks/dep-c6ed1157.mjs';
import '../_chunks/dep-9b1e7043.mjs';
import '../_chunks/dep-5b74d046.mjs';
import '../_chunks/dep-551a93fd.mjs';
import '../_chunks/dep-672a56f9.mjs';
import '../_chunks/dep-8c0df173.mjs';
import '../_chunks/dep-c3f9042a.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-841260ab.mjs';
import '../_chunks/dep-22c04ae0.mjs';
import '../_chunks/dep-886b81c5.mjs';
import '../utils/set-style.mjs';
import '../hooks/tnode.mjs';
import '../checkbox/constants.mjs';
import '../checkbox/hooks/useCheckboxLazyLoad.mjs';
import '../_common/js/utils/observe.mjs';
import '../checkbox/hooks/useKeyboardEvent.mjs';
import '../_common/js/common.mjs';
import '../hooks/useDisabled.mjs';
import '../_chunks/dep-fb48187a.mjs';
import '../_chunks/dep-70894ccf.mjs';
import '../_chunks/dep-12db5b5b.mjs';
import '../_chunks/dep-f8f5e5fe.mjs';
import '../_chunks/dep-5c0cf5f9.mjs';
import '../_chunks/dep-45a70a53.mjs';
import '../_chunks/dep-d5cc8b5d.mjs';
import '../config-provider/type.mjs';
import '../_chunks/dep-a56119c3.mjs';
import '../checkbox/group.mjs';
import '../_chunks/dep-83cdf63a.mjs';
import '../_chunks/dep-a5f8156f.mjs';
import '../_chunks/dep-1cfe79e3.mjs';
import '../_chunks/dep-f5c953e5.mjs';
import '../_chunks/dep-fb07e55c.mjs';
import '../checkbox/checkbox-group-props.mjs';
import '../hooks/slot.mjs';
import './style/css.mjs';
import '../checkbox/type.mjs';
import '../loading/index.mjs';
import '../_chunks/dep-600393b8.mjs';
import '../_chunks/dep-7c4d232a.mjs';
import '../_chunks/dep-2a455a8f.mjs';
import '../_chunks/dep-87670918.mjs';
import '../_chunks/dep-ee7aa1c5.mjs';
import '../_chunks/dep-6f363254.mjs';
import '../_chunks/dep-09c30dd8.mjs';
import '../loading/plugin.mjs';
import '../loading/loading.mjs';
import '../loading/icon/gradient.mjs';
import '../_common/js/loading/circle-adapter.mjs';
import '../_common/js/utils/set-style.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-28f56d24.mjs';
import '../_chunks/dep-660119a6.mjs';
import '../_chunks/dep-844e471b.mjs';
import '../utils/dom.mjs';
import '../utils/easing.mjs';
import '../loading/props.mjs';
import '../hooks/useTeleport.mjs';
import '../loading/type.mjs';
import '../hooks/useGlobalIcon.mjs';
import '../hooks/useLazyLoad.mjs';
import '../hooks/useVirtualScrollNew.mjs';
import '../hooks/useResizeObserver.mjs';
import '../_chunks/dep-eb82bf9c.mjs';
import '../_chunks/dep-6cd78bb0.mjs';
import '../_chunks/dep-786a7628.mjs';
import '../_common/js/tree/tree-node.mjs';
import '../_chunks/dep-8a25f93c.mjs';
import '../_chunks/dep-d470848d.mjs';
import '../_chunks/dep-4c520782.mjs';
import '../_chunks/dep-252b88a1.mjs';
import '../_common/js/tree/tree-node-model.mjs';
import '../_chunks/dep-281dbb92.mjs';
import '../_chunks/dep-c0c2d9c7.mjs';
import '../_chunks/dep-a1a5cc96.mjs';
import '../_common/js/log/log.mjs';
import '../_common/js/log/index.mjs';
import '../_chunks/dep-85cd63c4.mjs';
import '../_chunks/dep-f6f516d9.mjs';
import '../_common/js/tree/tree-store.mjs';
import '../_chunks/dep-e0d538ce.mjs';
import '../_chunks/dep-9cc70af8.mjs';
import 'mitt';
import './tree-item.mjs';
import './hooks/useItemState.mjs';
import './hooks/useTreeItem.mjs';
import './hooks/useItemEvents.mjs';
import './hooks/useRenderIcon.mjs';
import './hooks/useRenderLabel.mjs';
import './hooks/useRenderLine.mjs';
import './hooks/useRenderOperations.mjs';
import './hooks/useDraggable.mjs';
import './hooks/useTreeEvents.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var _TdTree = defineComponent({
  name: "TTree",
  model: {
    prop: "value",
    event: "change"
  },
  props: _objectSpread({}, props),
  setup: function setup(props2, context) {
    var _useConfig = useConfig("tree"),
      t = _useConfig.t,
      global = _useConfig.global;
    var classPrefix = usePrefixClass();
    var componentName = usePrefixClass("tree");
    var _useTreeState = useTreeState(props2, context),
      state = _useTreeState.state;
    var treeContentRef = state.treeContentRef,
      isScrolling = state.isScrolling;
    var _useTreeStore = useTreeStore(state),
      store = _useTreeStore.store,
      updateStoreConfig = _useTreeStore.updateStoreConfig,
      rebuild = _useTreeStore.rebuild;
    useDragHandle(state);
    var _useTreeAction = useTreeAction(state),
      setActived = _useTreeAction.setActived,
      setExpanded = _useTreeAction.setExpanded,
      setChecked = _useTreeAction.setChecked;
    var _useTreeScroll = useTreeScroll(state),
      onInnerVirtualScroll = _useTreeScroll.onInnerVirtualScroll,
      virtualConfig = _useTreeScroll.virtualConfig;
    var _useTreeNodes = useTreeNodes(state),
      renderTreeNodes = _useTreeNodes.renderTreeNodes,
      nodesEmpty = _useTreeNodes.nodesEmpty;
    var _useTreeStyles = useTreeStyles(state),
      treeClasses = _useTreeStyles.treeClasses,
      treeContentStyles = _useTreeStyles.treeContentStyles,
      scrollStyles = _useTreeStyles.scrollStyles,
      cursorStyles = _useTreeStyles.cursorStyles;
    return {
      t: t,
      global: global,
      classPrefix: classPrefix,
      componentName: componentName,
      state: state,
      store: store,
      treeClasses: treeClasses,
      treeContentRef: treeContentRef,
      rebuild: rebuild,
      updateStoreConfig: updateStoreConfig,
      setActived: setActived,
      setExpanded: setExpanded,
      setChecked: setChecked,
      renderTreeNodes: renderTreeNodes,
      nodesEmpty: nodesEmpty,
      isScrolling: isScrolling,
      onInnerVirtualScroll: onInnerVirtualScroll,
      treeContentStyles: treeContentStyles,
      scrollStyles: scrollStyles,
      cursorStyles: cursorStyles,
      virtualConfig: virtualConfig,
      scrollToElement: virtualConfig.scrollToElement
    };
  },
  watch: {
    data: function data(list) {
      this.rebuild(list);
    }
  },
  methods: {
    refresh: function refresh() {
      this.store.refreshState();
    },
    setItem: function setItem(value, options) {
      var _this = this;
      var node = this.store.getNode(value);
      var spec = options;
      var keys = Object.keys(spec);
      if (node && spec) {
        ["expanded", "actived", "checked"].forEach(function (name) {
          if (keys.includes(name)) {
            var val = spec[name];
            delete spec[name];
            var methodName = "set".concat(upperFirst_1(name));
            var setupMethod = _this[methodName];
            if (isFunction_1(setupMethod)) {
              setupMethod.call(_this, node, val);
            }
          }
        });
        node.set(spec);
      }
    },
    getItem: function getItem(value) {
      var node = this.store.getNode(value);
      return node === null || node === void 0 ? void 0 : node.getModel();
    },
    getItems: function getItems(value) {
      var nodes = this.store.getNodes(value);
      return nodes.map(function (node) {
        return node.getModel();
      });
    },
    appendTo: function appendTo(para, item) {
      var store = this.store;
      var list = [];
      if (Array.isArray(item)) {
        list = item;
      } else {
        list = [item];
      }
      list.forEach(function (item2) {
        var val = (item2 === null || item2 === void 0 ? void 0 : item2.value) || "";
        var node = getNode(store, val);
        if (node) {
          store.appendNodes(para, node);
        } else {
          store.appendNodes(para, item2);
        }
      });
    },
    insertBefore: function insertBefore(value, item) {
      var store = this.store;
      var val = (item === null || item === void 0 ? void 0 : item.value) || "";
      var node = getNode(store, val);
      if (node) {
        store.insertBefore(value, node);
      } else {
        store.insertBefore(value, item);
      }
    },
    insertAfter: function insertAfter(value, item) {
      var store = this.store;
      var val = (item === null || item === void 0 ? void 0 : item.value) || "";
      var node = getNode(store, val);
      if (node) {
        store.insertAfter(value, node);
      } else {
        store.insertAfter(value, item);
      }
    },
    remove: function remove(value) {
      return this.store.remove(value);
    },
    getIndex: function getIndex(value) {
      return this.store.getNodeIndex(value);
    },
    getParent: function getParent(value) {
      var node = this.store.getParent(value);
      return node === null || node === void 0 ? void 0 : node.getModel();
    },
    getParents: function getParents(value) {
      var nodes = this.store.getParents(value);
      return nodes.map(function (node) {
        return node.getModel();
      });
    },
    getPath: function getPath(value) {
      var node = this.store.getNode(value);
      var pathNodes = [];
      if (node) {
        pathNodes = node.getPath().map(function (node2) {
          return node2.getModel();
        });
      }
      return pathNodes;
    },
    getTreeData: function getTreeData(value) {
      var list = [];
      if (value) {
        var node = this.store.getNode(value);
        if (!node) return [];
        list = this.store.getNodes(value);
      } else {
        list = this.store.getNodes();
      }
      var nodeMap = {};
      var treeNodes = [];
      list.forEach(function (item) {
        var value2 = item.value;
        var itemData = _objectSpread(_objectSpread({}, item.data), {}, {
          value: value2
        });
        delete itemData.children;
        nodeMap[value2] = itemData;
        var parent = item.getParent();
        if (!parent) {
          treeNodes.push(itemData);
        } else {
          var parentData = nodeMap[parent.value];
          if (!parentData) {
            treeNodes.push(itemData);
          } else {
            if (!Array.isArray(parentData.children)) {
              parentData.children = [];
            }
            parentData.children.push(itemData);
          }
        }
      });
      return treeNodes;
    }
  },
  render: function render(h) {
    var _allNodes$value$filte, _allNodes$value, _refProps$scroll$valu, _refProps$scroll$valu2;
    var state = this.state,
      treeClasses = this.treeClasses,
      updateStoreConfig = this.updateStoreConfig,
      renderTreeNodes = this.renderTreeNodes,
      nodesEmpty = this.nodesEmpty,
      isScrolling = this.isScrolling,
      virtualConfig = this.virtualConfig,
      treeContentStyles = this.treeContentStyles,
      scrollStyles = this.scrollStyles,
      cursorStyles = this.cursorStyles;
    var createElement = getCreateElement(h);
    var scope = state.scope,
      allNodes = state.allNodes,
      refProps = state.refProps;
    scope.scopedSlots = getScopedSlots(this);
    updateStoreConfig();
    var treeNodeViews = renderTreeNodes(createElement);
    var cname = this.componentName;
    var isVirtual = virtualConfig.isVirtualScroll.value;
    var emptyNode = null;
    if (nodesEmpty) {
      var useLocale = !this.empty && !this.$slots.empty;
      var emptyContent = useLocale ? this.t(this.global.empty) : renderTNodeJSX(this, "empty");
      emptyNode = createVNode("div", {
        "class": "".concat(cname, "__empty")
      }, [emptyContent]);
    } else if (treeNodeViews.length <= 0) {
      emptyNode = createVNode("div", null, null);
    }
    var $props = this.$props;
    var transition = $props.transition;
    var treeNodeList = null;
    if (!transition || isVirtual && isScrolling) {
      treeNodeList = createVNode("div", {
        "class": "".concat(cname, "__list"),
        "style": scrollStyles
      }, [treeNodeViews]);
    } else {
      treeNodeList = createVNode(TransitionGroup, {
        "tag": "div",
        "class": "".concat(cname, "__list"),
        "enter-active-class": "".concat(cname, "__item--enter-active"),
        "leave-active-class": "".concat(cname, "__item--leave-active"),
        "style": scrollStyles
      }, _isSlot(treeNodeViews) ? treeNodeViews : {
        "default": function _default() {
          return [treeNodeViews];
        }
      });
    }
    var topValue = ((_allNodes$value$filte = (_allNodes$value = allNodes.value) === null || _allNodes$value === void 0 ? void 0 : _allNodes$value.filter(function (node) {
      return node.visible;
    }).length) !== null && _allNodes$value$filte !== void 0 ? _allNodes$value$filte : 0) * ((_refProps$scroll$valu = (_refProps$scroll$valu2 = refProps.scroll.value) === null || _refProps$scroll$valu2 === void 0 ? void 0 : _refProps$scroll$valu2.rowHeight) !== null && _refProps$scroll$valu !== void 0 ? _refProps$scroll$valu : 34);
    var placeholderStyles = {
      width: "1px",
      height: "1px",
      opacity: 0,
      pointerEvents: "none",
      position: "absolute",
      left: 0,
      top: "".concat(topValue, "px")
    };
    var placeholderEl = createVNode("div", {
      "style": placeholderStyles
    }, null);
    var treeNode = createVNode("div", {
      "class": treeClasses,
      "ref": "treeContentRef",
      "onScroll": this.onInnerVirtualScroll,
      "style": treeContentStyles
    }, [isVirtual && createVNode("div", {
      "class": "".concat(cname, "__vscroll-cursor"),
      "style": cursorStyles
    }, null), emptyNode || treeNodeList, isVirtual && placeholderEl]);
    return treeNode;
  }
});

export { _TdTree as default };
//# sourceMappingURL=tree.mjs.map
