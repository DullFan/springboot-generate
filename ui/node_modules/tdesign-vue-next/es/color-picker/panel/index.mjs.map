{"version":3,"file":"index.mjs","sources":["../../../src/color-picker/panel/index.tsx"],"sourcesContent":["import { defineComponent, ref, toRefs, watch, computed } from 'vue';\nimport { useCommonClassName, useConfig } from '../../hooks/useConfig';\nimport props from '../props';\nimport {\n  DEFAULT_COLOR,\n  DEFAULT_LINEAR_GRADIENT,\n  TD_COLOR_USED_COLORS_MAX_SIZE,\n  DEFAULT_SYSTEM_SWATCH_COLORS,\n} from '../const';\nimport PanelHeader from './header';\nimport LinearGradient from './linear-gradient';\nimport SaturationPanel from './saturation';\nimport HueSlider from './hue';\nimport AlphaSlider from './alpha';\nimport FormatPanel from './format';\nimport SwatchesPanel from './swatches';\nimport { Color, getColorObject, GradientColorPoint } from '../utils';\nimport { TdColorPickerProps, ColorPickerChangeTrigger } from '../type';\nimport { TdColorModes } from '../interfaces';\nimport { useBaseClassName } from '../hooks';\nimport useVModel from '../../hooks/useVModel';\nimport useDefaultValue from '../../hooks/useDefaultValue';\nimport cloneDeep from 'lodash/cloneDeep';\n\nexport default defineComponent({\n  name: 'ColorPanel',\n  props: {\n    ...props,\n    togglePopup: {\n      type: Function,\n    },\n  },\n\n  setup(props) {\n    const baseClassName = useBaseClassName();\n    const { STATUS } = useCommonClassName();\n    const { t, globalConfig } = useConfig('colorPicker');\n    const statusClassNames = STATUS.value;\n    const { value: inputValue, modelValue, recentColors } = toRefs(props);\n    const [innerValue, setInnerValue] = useVModel(inputValue, modelValue, props.defaultValue, props.onChange);\n\n    const defaultEmptyColor = computed(() => (isGradient.value ? DEFAULT_LINEAR_GRADIENT : DEFAULT_COLOR));\n\n    const mode = ref<TdColorModes>(props.colorModes?.length === 1 ? props.colorModes[0] : 'monochrome');\n    const isGradient = computed(() => mode.value === 'linear-gradient');\n\n    const color = ref(new Color(innerValue.value || defaultEmptyColor.value));\n    const updateColor = () => color.value.update(innerValue.value || defaultEmptyColor.value);\n\n    const formatModel = ref<TdColorPickerProps['format']>(color.value.isGradient ? 'CSS' : 'RGB');\n\n    const [recentlyUsedColors, setRecentlyUsedColors] = useDefaultValue(\n      recentColors,\n      props.defaultRecentColors,\n      props.onRecentColorsChange,\n      'recentColors',\n    );\n\n    const formatValue = () => {\n      // 渐变模式下直接输出css样式\n      if (mode.value === 'linear-gradient') {\n        return color.value.linearGradient;\n      }\n      return color.value.getFormatsColorMap()[props.format] || color.value.css;\n    };\n\n    /**\n     * 添加最近使用颜色\n     * @returns void\n     */\n    const addRecentlyUsedColor = () => {\n      if (recentlyUsedColors.value === null || recentlyUsedColors.value === false) {\n        return;\n      }\n      const colors = cloneDeep(recentlyUsedColors.value as string[]) || [];\n      const currentColor = color.value.isGradient ? color.value.linearGradient : color.value.rgba;\n      const index = colors.indexOf(currentColor);\n      if (index > -1) {\n        colors.splice(index, 1);\n      }\n      colors.unshift(currentColor);\n      if (colors.length > TD_COLOR_USED_COLORS_MAX_SIZE) {\n        colors.length = TD_COLOR_USED_COLORS_MAX_SIZE;\n      }\n      handleRecentlyUsedColorsChange(colors);\n    };\n\n    /**\n     * 最近使用颜色变更时触发\n     * @param colors\n     */\n    const handleRecentlyUsedColorsChange = (colors: string[]) => {\n      setRecentlyUsedColors(colors);\n    };\n\n    /**\n     * onChange\n     * @param trigger\n     */\n    const emitColorChange = (trigger?: ColorPickerChangeTrigger) => {\n      setInnerValue(formatValue(), {\n        color: getColorObject(color.value),\n        trigger: trigger || 'palette-saturation-brightness',\n      });\n    };\n\n    watch(() => [props.defaultValue, props.enableAlpha], updateColor);\n\n    watch(\n      () => innerValue.value,\n      (newColor) => {\n        if (newColor !== formatValue()) {\n          updateColor();\n          mode.value = color.value.isGradient ? 'linear-gradient' : 'monochrome';\n        }\n      },\n    );\n\n    /**\n     * mode change\n     * @param value\n     * @returns\n     */\n    const handleModeChange = (value: TdColorModes) => {\n      mode.value = value;\n      if (value === 'linear-gradient') {\n        color.value.update(\n          color.value.gradientColors.length > 0 ? color.value.linearGradient : DEFAULT_LINEAR_GRADIENT,\n        );\n      } else {\n        color.value.update(color.value.rgba);\n      }\n\n      emitColorChange();\n    };\n\n    /**\n     * 格式变化\n     * @param format\n     * @returns\n     */\n    const handleFormatModeChange = (format: TdColorPickerProps['format']) => (formatModel.value = format);\n\n    /**\n     * 饱和度亮度变化\n     * @param param0\n     */\n    const handleSatAndValueChange = ({ saturation, value }: { saturation: number; value: number }) => {\n      const { saturation: sat, value: val } = color.value;\n      let changeTrigger: ColorPickerChangeTrigger = 'palette-saturation-brightness';\n      if (value !== val && saturation !== sat) {\n        color.value.saturation = saturation;\n        color.value.value = value;\n        changeTrigger = 'palette-saturation-brightness';\n      } else if (saturation !== sat) {\n        color.value.saturation = saturation;\n        changeTrigger = 'palette-saturation';\n      } else if (value !== val) {\n        color.value.value = value;\n        changeTrigger = 'palette-brightness';\n      } else {\n        return;\n      }\n\n      color.value.update(color.value.rgba);\n      emitColorChange(changeTrigger);\n    };\n\n    /**\n     * 色相变化\n     * @param hue\n     */\n    const handleHueChange = (hue: number) => {\n      color.value.hue = hue;\n      emitColorChange('palette-hue-bar');\n      props.onPaletteBarChange?.({\n        color: getColorObject(color.value),\n      });\n    };\n\n    /**\n     * 透明度变化\n     * @param alpha\n     */\n    const handleAlphaChange = (alpha: number) => {\n      color.value.alpha = alpha;\n      emitColorChange('palette-alpha-bar');\n    };\n\n    /**\n     * 输入框触发改变\n     * @param input\n     * @param alpha\n     */\n    const handleInputChange = (input: string, alpha?: number) => {\n      color.value.update(input);\n      color.value.alpha = alpha;\n      emitColorChange('input');\n    };\n\n    /**\n     * 渐变改变\n     * @param param0\n     */\n    const handleGradientChange = ({\n      key,\n      payload,\n    }: {\n      key: 'degree' | 'selectedId' | 'colors';\n      payload: number | string | GradientColorPoint[];\n    }) => {\n      let trigger: ColorPickerChangeTrigger = 'palette-saturation-brightness';\n      switch (key) {\n        case 'degree':\n          color.value.gradientDegree = payload as number;\n          trigger = 'input';\n          break;\n        case 'selectedId':\n          color.value.gradientSelectedId = payload as string;\n          break;\n        case 'colors':\n          color.value.gradientColors = payload as GradientColorPoint[];\n          break;\n      }\n      emitColorChange(trigger);\n    };\n\n    /**\n     * 色块点击\n     * @param type\n     * @param value\n     */\n    const handleSetColor = (type: 'system' | 'used', value: string) => {\n      const isGradientValue = Color.isGradientColor(value);\n      if (isGradientValue) {\n        if (props.colorModes.includes('linear-gradient')) {\n          mode.value = 'linear-gradient';\n          color.value.update(value);\n          color.value.updateCurrentGradientColor();\n        } else {\n          console.warn('该模式不支持渐变色');\n        }\n      } else if (mode.value === 'linear-gradient') {\n        color.value.updateStates(value);\n        color.value.updateCurrentGradientColor();\n      } else {\n        color.value.update(value);\n      }\n      emitColorChange();\n    };\n\n    return {\n      baseClassName,\n      statusClassNames,\n      t,\n      globalConfig,\n      color,\n      mode,\n      formatModel,\n      recentlyUsedColors,\n      isGradient,\n      addRecentlyUsedColor,\n      handleModeChange,\n      handleSatAndValueChange,\n      handleHueChange,\n      handleAlphaChange,\n      handleGradientChange,\n      handleSetColor,\n      handleFormatModeChange,\n      handleInputChange,\n      handleRecentlyUsedColorsChange,\n    };\n  },\n  render() {\n    const {\n      t,\n      baseClassName,\n      statusClassNames,\n      globalConfig,\n      recentColors,\n      swatchColors,\n      showPrimaryColorPreview,\n      isGradient,\n    } = this;\n    const baseProps = {\n      color: this.color,\n      disabled: this.disabled,\n    };\n    const showUsedColors = recentColors !== null && recentColors !== false;\n\n    let systemColors = swatchColors;\n    if (systemColors === undefined) {\n      systemColors = [...DEFAULT_SYSTEM_SWATCH_COLORS];\n    }\n    const showSystemColors = systemColors?.length > 0;\n\n    const renderSwatches = () => {\n      if (!showSystemColors && !showUsedColors) {\n        return null;\n      }\n      return (\n        <>\n          <div class={`${baseClassName}__swatches-wrap`}>\n            {showUsedColors ? (\n              <SwatchesPanel\n                {...baseProps}\n                title={t(globalConfig.recentColorTitle)}\n                editable\n                colors={this.recentlyUsedColors as string[]}\n                handleAddColor={this.addRecentlyUsedColor}\n                onSetColor={(color: string) => this.handleSetColor('used', color)}\n                onChange={this.handleRecentlyUsedColorsChange}\n              />\n            ) : null}\n            {showSystemColors ? (\n              <SwatchesPanel\n                {...baseProps}\n                title={t(globalConfig.swatchColorTitle)}\n                colors={systemColors}\n                onSetColor={(color: string) => this.handleSetColor('system', color)}\n              />\n            ) : null}\n          </div>\n        </>\n      );\n    };\n\n    return (\n      <div class={[`${baseClassName}__panel`, this.disabled ? statusClassNames.disabled : false]}>\n        <PanelHeader {...this.$props} mode={this.mode} onModeChange={this.handleModeChange} />\n        <div class={[`${baseClassName}__body`]}>\n          {isGradient ? (\n            <LinearGradient\n              {...baseProps}\n              onChange={this.handleGradientChange}\n              enableMultipleGradient={this.enableMultipleGradient}\n            />\n          ) : null}\n\n          <SaturationPanel {...baseProps} onChange={this.handleSatAndValueChange} />\n\n          <div class={[`${baseClassName}__sliders-wrapper`]}>\n            <div class={[`${baseClassName}__sliders`]}>\n              <HueSlider {...baseProps} onChange={this.handleHueChange} />\n              {this.enableAlpha ? <AlphaSlider {...baseProps} onChange={this.handleAlphaChange} /> : null}\n            </div>\n\n            {showPrimaryColorPreview ? (\n              <div class={[`${baseClassName}__sliders-preview`, `${baseClassName}--bg-alpha`]}>\n                <span\n                  class={`${baseClassName}__sliders-preview-inner`}\n                  style={{\n                    background: isGradient ? this.color.linearGradient : this.color.rgba,\n                  }}\n                />\n              </div>\n            ) : null}\n          </div>\n\n          <FormatPanel\n            {...this.$props}\n            color={this.color}\n            format={this.formatModel}\n            onModeChange={this.handleFormatModeChange}\n            onInputChange={this.handleInputChange}\n          />\n          {renderSwatches()}\n        </div>\n      </div>\n    );\n  },\n});\n"],"names":["defineComponent","name","props","_objectSpread","togglePopup","type","Function","setup","_props2$colorModes","baseClassName","useBaseClassName","_useCommonClassName","useCommonClassName","STATUS","_useConfig","useConfig","t","globalConfig","statusClassNames","value","_toRefs","toRefs","inputValue","modelValue","recentColors","_useVModel","useVModel","defaultValue","onChange","_useVModel2","_slicedToArray","innerValue","setInnerValue","defaultEmptyColor","computed","isGradient","DEFAULT_LINEAR_GRADIENT","DEFAULT_COLOR","mode","ref","colorModes","length","color","Color","updateColor","update","formatModel","_useDefaultValue","useDefaultValue","defaultRecentColors","onRecentColorsChange","_useDefaultValue2","recentlyUsedColors","setRecentlyUsedColors","formatValue","linearGradient","getFormatsColorMap","format","css","addRecentlyUsedColor","colors","cloneDeep","currentColor","rgba","index","indexOf","splice","unshift","TD_COLOR_USED_COLORS_MAX_SIZE","handleRecentlyUsedColorsChange","emitColorChange","trigger","getColorObject","watch","enableAlpha","newColor","handleModeChange","gradientColors","handleFormatModeChange","handleSatAndValueChange","_ref","saturation","_color$value","sat","val","changeTrigger","handleHueChange","hue","_props2$onPaletteBarC","onPaletteBarChange","handleAlphaChange","alpha","handleInputChange","input","handleGradientChange","key","_ref2","payload","gradientDegree","gradientSelectedId","handleSetColor","isGradientValue","isGradientColor","includes","updateCurrentGradientColor","console","warn","updateStates","render","_systemColors","_this","swatchColors","showPrimaryColorPreview","baseProps","disabled","showUsedColors","systemColors","_toConsumableArray","DEFAULT_SYSTEM_SWATCH_COLORS","showSystemColors","renderSwatches","_createVNode","_Fragment","concat","SwatchesPanel","_mergeProps","recentColorTitle","onSetColor","swatchColorTitle","PanelHeader","$props","LinearGradient","enableMultipleGradient","SaturationPanel","HueSlider","background","FormatPanel"],"mappings":"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"}