import { h } from 'vue';
declare const _default: import("vue").DefineComponent<{
    closable: BooleanConstructor;
    color: {
        type: StringConstructor;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof h) => import("../common").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof h) => import("../common").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    icon: {
        type: import("vue").PropType<(h: typeof h) => import("../common").SlotReturnValue>;
        default: any;
    };
    maxWidth: {
        type: import("vue").PropType<string | number>;
    };
    shape: {
        type: import("vue").PropType<"square" | "round" | "mark">;
        default: "square" | "round" | "mark";
        validator(val: "square" | "round" | "mark"): boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "success" | "primary" | "warning" | "danger">;
        default: "default" | "success" | "primary" | "warning" | "danger";
        validator(val: "default" | "success" | "primary" | "warning" | "danger"): boolean;
    };
    variant: {
        type: import("vue").PropType<"outline" | "dark" | "light" | "light-outline">;
        default: "outline" | "dark" | "light" | "light-outline";
        validator(val: "outline" | "dark" | "light" | "light-outline"): boolean;
    };
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClose: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    closable: BooleanConstructor;
    color: {
        type: StringConstructor;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof h) => import("../common").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof h) => import("../common").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    icon: {
        type: import("vue").PropType<(h: typeof h) => import("../common").SlotReturnValue>;
        default: any;
    };
    maxWidth: {
        type: import("vue").PropType<string | number>;
    };
    shape: {
        type: import("vue").PropType<"square" | "round" | "mark">;
        default: "square" | "round" | "mark";
        validator(val: "square" | "round" | "mark"): boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "success" | "primary" | "warning" | "danger">;
        default: "default" | "success" | "primary" | "warning" | "danger";
        validator(val: "default" | "success" | "primary" | "warning" | "danger"): boolean;
    };
    variant: {
        type: import("vue").PropType<"outline" | "dark" | "light" | "light-outline">;
        default: "outline" | "dark" | "light" | "light-outline";
        validator(val: "outline" | "dark" | "light" | "light-outline"): boolean;
    };
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClose: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}>>, {
    color: string;
    disabled: boolean;
    size: import("../common").SizeEnum;
    icon: (h: typeof h) => import("../common").SlotReturnValue;
    shape: "square" | "round" | "mark";
    variant: "outline" | "dark" | "light" | "light-outline";
    theme: "default" | "success" | "primary" | "warning" | "danger";
    closable: boolean;
}, {}>;
export default _default;
