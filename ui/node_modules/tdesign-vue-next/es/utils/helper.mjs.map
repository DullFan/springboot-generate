{"version":3,"file":"helper.mjs","sources":["../../src/utils/helper.ts"],"sourcesContent":["import camelCase from 'lodash/camelCase';\nimport isUndefined from 'lodash/isUndefined';\nimport isNull from 'lodash/isNull';\nimport isArray from 'lodash/isArray';\nimport isNumber from 'lodash/isNumber';\nimport isString from 'lodash/isString';\n\nexport function omit(obj: object, fields: string[]): object {\n  const shallowCopy = {\n    ...obj,\n  };\n  for (let i = 0; i < fields.length; i++) {\n    const key = fields[i];\n    delete shallowCopy[key];\n  }\n  return shallowCopy;\n}\n\nexport function removeEmptyAttrs<T>(obj: T): Partial<T> {\n  const newObj = {};\n\n  Object.keys(obj).forEach((key) => {\n    if (!isUndefined(obj[key]) || isNull(obj[key])) {\n      newObj[key] = obj[key];\n    }\n  });\n\n  return newObj;\n}\n\nexport function getTabElementByValue(tabs: [] = [], value: string): object {\n  const [result] = tabs.filter((item) => {\n    const { id } = item;\n    return `${id}` === `${value}`;\n  });\n  return result || null;\n}\n\nexport function firstUpperCase(str: string): string {\n  return str.toLowerCase().replace(/( |^)[a-z]/g, (char: string) => char.toUpperCase());\n}\n\nexport type Gradients = { [percent: string]: string };\nexport type FromTo = { from: string; to: string };\nexport type LinearGradient = { direction?: string } & (Gradients | FromTo);\nexport function getBackgroundColor(color: string | string[] | LinearGradient): string {\n  if (isString(color)) {\n    return color;\n  }\n  if (isArray(color)) {\n    if (color[0] && color[0][0] === '#') {\n      color.unshift('90deg');\n    }\n    return `linear-gradient( ${color.join(',')} )`;\n  }\n  const { from, to, direction = 'to right', ...rest } = color;\n  let keys = Object.keys(rest);\n  if (keys.length) {\n    keys = keys.sort((a, b) => parseFloat(a.substr(0, a.length - 1)) - parseFloat(b.substr(0, b.length - 1)));\n    const tempArr = keys.map((key: any) => `${rest[key]} ${key}`);\n    return `linear-gradient(${direction}, ${tempArr.join(',')})`;\n  }\n  return `linear-gradient(${direction}, ${from}, ${to})`;\n}\n\n// keyboard-event => onKeyboardEvent\nexport function getPropsApiByEvent(eventName: string) {\n  return camelCase(`on-${eventName}`);\n}\n\n/**\n * 兼容样式中支持number/string类型的传值 得出最后的结果。\n * @param param number或string类型的可用于样式上的值\n * @returns 可使用的样式值。\n */\nexport function pxCompat(param: string | number) {\n  return isNumber(param) ? `${param}px` : param;\n}\n"],"names":["omit","obj","fields","shallowCopy","_objectSpread","i","length","key","removeEmptyAttrs","newObj","Object","keys","forEach","isUndefined","isNull","getTabElementByValue","tabs","arguments","undefined","value","_tabs$filter","filter","item","id","concat","_tabs$filter2","_slicedToArray","result","firstUpperCase","str","toLowerCase","replace","char","toUpperCase","getBackgroundColor","color","isString","isArray","unshift","join","from","to","_color$direction","direction","rest","_excluded","sort","a","b","parseFloat","substr","tempArr","map","getPropsApiByEvent","eventName","camelCase","pxCompat","param","isNumber"],"mappings":"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"}