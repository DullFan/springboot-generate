/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

import './dep-ad0f5c12.mjs';
import { c as _overArg, b as _isPrototype } from './dep-1a2263f9.mjs';
import { a as _getNative, _ as _Map, b as _toSource } from './dep-48235a7f.mjs';
import { b as _root, _ as _baseGetTag } from './dep-de0d9668.mjs';
import { _ as _Set } from './dep-5c0cf5f9.mjs';

var overArg = _overArg;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys$1 = overArg(Object.keys, Object);
var _nativeKeys = nativeKeys$1;

var isPrototype = _isPrototype,
  nativeKeys = _nativeKeys;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}
var _baseKeys = baseKeys;

var getNative$2 = _getNative,
  root$2 = _root;

/* Built-in method references that are verified to be native. */
var DataView$1 = getNative$2(root$2, 'DataView');
var _DataView = DataView$1;

var getNative$1 = _getNative,
  root$1 = _root;

/* Built-in method references that are verified to be native. */
var Promise$2 = getNative$1(root$1, 'Promise');
var _Promise = Promise$2;

var getNative = _getNative,
  root = _root;

/* Built-in method references that are verified to be native. */
var WeakMap$1 = getNative(root, 'WeakMap');
var _WeakMap = WeakMap$1;

var DataView = _DataView,
  Map = _Map,
  Promise$1 = _Promise,
  Set = _Set,
  WeakMap = _WeakMap,
  baseGetTag = _baseGetTag,
  toSource = _toSource;

/** `Object#toString` result references. */
var mapTag = '[object Map]',
  objectTag = '[object Object]',
  promiseTag = '[object Promise]',
  setTag = '[object Set]',
  weakMapTag = '[object WeakMap]';
var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
  mapCtorString = toSource(Map),
  promiseCtorString = toSource(Promise$1),
  setCtorString = toSource(Set),
  weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise$1 && getTag(Promise$1.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
  getTag = function getTag(value) {
    var result = baseGetTag(value),
      Ctor = result == objectTag ? value.constructor : undefined,
      ctorString = Ctor ? toSource(Ctor) : '';
    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag;
        case mapCtorString:
          return mapTag;
        case promiseCtorString:
          return promiseTag;
        case setCtorString:
          return setTag;
        case weakMapCtorString:
          return weakMapTag;
      }
    }
    return result;
  };
}
var _getTag = getTag;

export { _getTag as _, _baseKeys as a };
//# sourceMappingURL=dep-f8f5e5fe.mjs.map
