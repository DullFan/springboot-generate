{"version":3,"file":"useTagList.mjs","sources":["../../src/tag-input/useTagList.tsx"],"sourcesContent":["import { ref, toRefs } from 'vue';\nimport { TagInputValue, TagInputChangeContext } from './type';\nimport { TagInputProps } from './interface';\nimport { InputValue } from '../input';\nimport Tag from '../tag';\nimport useVModel from '../hooks/useVModel';\nimport { usePrefixClass } from '../hooks/useConfig';\nimport { useTNodeJSX } from '../hooks/tnode';\n\nexport type ChangeParams = [TagInputChangeContext];\n\n// handle tag add and remove\nexport default function useTagList(props: TagInputProps) {\n  const renderTNode = useTNodeJSX();\n  const classPrefix = usePrefixClass();\n  const { value, modelValue, onRemove, max, minCollapsedNum, size, disabled, readonly, tagProps, getDragProps } =\n    toRefs(props);\n  // handle controlled property and uncontrolled property\n  const [tagValue, setTagValue] = useVModel(value, modelValue, props.defaultValue || [], props.onChange);\n  const oldInputValue = ref<InputValue>();\n\n  // 点击标签关闭按钮，删除标签\n  const onClose = (p: { e?: MouseEvent; index: number }) => {\n    const arr = [...tagValue.value];\n    const [item] = arr.splice(p.index, 1); // 当前删除的item无需参数传递\n    setTagValue(arr, { trigger: 'tag-remove', ...p, item });\n    onRemove.value?.({ ...p, item, trigger: 'tag-remove', value: arr });\n  };\n\n  const clearAll = (context: { e: MouseEvent }) => {\n    setTagValue([], { trigger: 'clear', e: context.e });\n  };\n\n  // 按下 Enter 键，新增标签\n  const onInnerEnter = (value: string, context: { e: KeyboardEvent }) => {\n    const valueStr = value ? String(value).trim() : '';\n    const isLimitExceeded = max && tagValue.value?.length >= max.value;\n    let newValue: TagInputValue = tagValue.value;\n    if (!isLimitExceeded && valueStr) {\n      newValue = tagValue.value instanceof Array ? tagValue.value.concat(String(valueStr)) : [valueStr];\n      setTagValue(newValue, {\n        trigger: 'enter',\n        index: newValue.length - 1,\n        item: valueStr,\n        e: context.e,\n      });\n    }\n    props?.onEnter?.(newValue, { ...context, inputValue: value });\n  };\n\n  // 按下回退键，删除标签\n  const onInputBackspaceKeyUp = (value: InputValue) => {\n    if (!tagValue.value || !tagValue.value.length) return;\n    oldInputValue.value = value;\n  };\n  // 按下回退键，删除标签\n  const onInputBackspaceKeyDown = (value: InputValue, context: { e: KeyboardEvent }) => {\n    const { e } = context;\n    if (!tagValue.value || !tagValue.value.length || e.key === 'Process') return;\n    // 回车键删除，输入框值为空时，才允许 Backspace 删除标签\n    const isDelete = /(Backspace|NumpadDelete)/i.test(e.code) || /(Backspace|NumpadDelete)/i.test(e.key);\n    if (!value && isDelete) {\n      const index = tagValue.value.length - 1;\n      const item = tagValue.value[index];\n      const trigger = 'backspace';\n      const newValue = tagValue.value.slice(0, -1);\n      setTagValue(newValue, { e, index, item, trigger });\n      onRemove.value?.({ e, index, item, trigger, value: newValue });\n    }\n    oldInputValue.value = value;\n  };\n\n  const renderLabel = ({ displayNode, label }: { displayNode: any; label: any }) => {\n    const newList = minCollapsedNum.value ? tagValue.value.slice(0, minCollapsedNum.value) : tagValue.value;\n    const list = displayNode\n      ? [displayNode]\n      : newList?.map?.((item, index) => {\n          const tagContent = renderTNode('tag', { params: { value: item } });\n          return (\n            <Tag\n              key={`${item}${index}`}\n              size={size.value}\n              disabled={disabled.value}\n              onClose={(context: { e: MouseEvent }) => onClose({ e: context.e, index })}\n              closable={!readonly.value && !disabled.value}\n              {...getDragProps.value?.(index, item)}\n              {...tagProps.value}\n            >\n              {tagContent ?? item}\n            </Tag>\n          );\n        }) || [];\n    if (![null, undefined, ''].includes(label)) {\n      list.unshift(\n        <div class={`${classPrefix.value}-tag-input__prefix`} key=\"label\">\n          {label}\n        </div>,\n      );\n    }\n    // 超出省略\n    if (newList.length !== (tagValue.value || []).length) {\n      const len = tagValue.value.length - newList.length;\n      const more = renderTNode('collapsedItems', {\n        params: {\n          value: tagValue.value,\n          count: tagValue.value.length - minCollapsedNum.value,\n          collapsedTags: tagValue.value.slice(minCollapsedNum.value, tagValue.value.length),\n          collapsedSelectedItems: tagValue.value.slice(minCollapsedNum.value, tagValue.value.length),\n          onClose,\n        },\n      });\n      list.push(\n        more ?? (\n          <Tag key=\"more\" size={size.value}>\n            +{len}\n          </Tag>\n        ),\n      );\n    }\n    return list;\n  };\n\n  return {\n    tagValue,\n    clearAll,\n    onClose,\n    onInnerEnter,\n    onInputBackspaceKeyUp,\n    onInputBackspaceKeyDown,\n    renderLabel,\n  };\n}\n"],"names":["useTagList","props","renderTNode","useTNodeJSX","classPrefix","usePrefixClass","_toRefs","toRefs","value","modelValue","onRemove","max","minCollapsedNum","size","disabled","readonly","tagProps","getDragProps","_useVModel","useVModel","defaultValue","onChange","_useVModel2","_slicedToArray","tagValue","setTagValue","oldInputValue","ref","onClose","p","_onRemove$value","arr","_toConsumableArray","_arr$splice","splice","index","_arr$splice2","item","trigger","call","_objectSpread","clearAll","context","e","onInnerEnter","_tagValue$value","_props$onEnter","valueStr","String","trim","isLimitExceeded","length","newValue","Array","concat","onEnter","inputValue","onInputBackspaceKeyUp","onInputBackspaceKeyDown","key","isDelete","test","code","_onRemove$value2","slice","renderLabel","_ref","_newList$map","displayNode","label","newList","list","map","_getDragProps$value","tagContent","params","_createVNode","Tag","_mergeProps","_default","includes","unshift","len","more","count","collapsedTags","collapsedSelectedItems","push"],"mappings":"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"}