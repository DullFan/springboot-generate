import { TdTimeRangePickerProps } from '../time-picker/type';
import { PropType } from 'vue';
declare const _default: {
    allowInput: BooleanConstructor;
    clearable: BooleanConstructor;
    disableTime: {
        type: PropType<(h: number, m: number, s: number, context: {
            partial: import("../time-picker/type").TimeRangePickerPartial;
        }) => Partial<{
            hour: number[];
            minute: number[];
            second: number[];
        }>>;
    };
    disabled: {
        type: PropType<boolean | boolean[]>;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    hideDisabledTime: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: PropType<string | string[]>;
        default: string | string[];
    };
    popupProps: {
        type: PropType<import("..").TdPopupProps>;
    };
    presets: {
        type: PropType<import("../time-picker/type").PresetTimeRange>;
    };
    rangeInputProps: {
        type: PropType<import("..").TdRangeInputProps>;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: TdTimeRangePickerProps['size']): boolean;
    };
    status: {
        type: PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: TdTimeRangePickerProps['status']): boolean;
    };
    steps: {
        type: PropType<(string | number)[]>;
        default: () => TdTimeRangePickerProps['steps'];
    };
    tips: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: PropType<import("../time-picker/type").TimeRangeValue>;
        default: import("../time-picker/type").TimeRangeValue;
    };
    modelValue: {
        type: PropType<import("../time-picker/type").TimeRangeValue>;
        default: import("../time-picker/type").TimeRangeValue;
    };
    defaultValue: {
        type: PropType<import("../time-picker/type").TimeRangeValue>;
    };
    onBlur: PropType<(context: {
        value: import("../time-picker/type").TimeRangeValue;
        e?: FocusEvent;
        position?: import("../time-picker/type").TimeRangePickerPartial;
    }) => void>;
    onChange: PropType<(value: import("../time-picker/type").TimeRangeValue) => void>;
    onFocus: PropType<(context?: {
        value: import("../time-picker/type").TimeRangeValue;
        e?: FocusEvent;
        position?: import("../time-picker/type").TimeRangePickerPartial;
    }) => void>;
    onInput: PropType<(context: {
        value: import("../time-picker/type").TimeRangeValue;
        e?: InputEvent;
        position?: import("../time-picker/type").TimeRangePickerPartial;
    }) => void>;
    onPick: PropType<(value: import("../time-picker/type").TimeRangeValue, context: {
        e: MouseEvent;
        position?: import("../time-picker/type").TimeRangePickerPartial;
    }) => void>;
};
export default _default;
