import { TdLinkProps } from './type';
import './style';
export * from './type';
export declare type LinkProps = TdLinkProps;
export declare const Link: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        download: {
            type: import("vue").PropType<string | boolean>;
        };
        hover: {
            type: import("vue").PropType<"color" | "underline">;
            default: "color" | "underline";
            validator(val: "color" | "underline"): boolean;
        };
        href: {
            type: StringConstructor;
            default: string;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        target: {
            type: StringConstructor;
            default: string;
        };
        theme: {
            type: import("vue").PropType<"default" | "success" | "primary" | "warning" | "danger">;
            default: "default" | "success" | "primary" | "warning" | "danger";
            validator(val: "default" | "success" | "primary" | "warning" | "danger"): boolean;
        };
        underline: BooleanConstructor;
        onClick: import("vue").PropType<(e: MouseEvent) => void>;
    }>> & {
        onClick?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        download: {
            type: import("vue").PropType<string | boolean>;
        };
        hover: {
            type: import("vue").PropType<"color" | "underline">;
            default: "color" | "underline";
            validator(val: "color" | "underline"): boolean;
        };
        href: {
            type: StringConstructor;
            default: string;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        target: {
            type: StringConstructor;
            default: string;
        };
        theme: {
            type: import("vue").PropType<"default" | "success" | "primary" | "warning" | "danger">;
            default: "default" | "success" | "primary" | "warning" | "danger";
            validator(val: "default" | "success" | "primary" | "warning" | "danger"): boolean;
        };
        underline: BooleanConstructor;
        onClick: import("vue").PropType<(e: MouseEvent) => void>;
    }>> & {
        onClick?: (...args: any[]) => any;
    }, {
        target: string;
        disabled: boolean;
        size: import("..").SizeEnum;
        underline: boolean;
        href: string;
        theme: "default" | "success" | "primary" | "warning" | "danger";
        hover: "color" | "underline";
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        download: {
            type: import("vue").PropType<string | boolean>;
        };
        hover: {
            type: import("vue").PropType<"color" | "underline">;
            default: "color" | "underline";
            validator(val: "color" | "underline"): boolean;
        };
        href: {
            type: StringConstructor;
            default: string;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        target: {
            type: StringConstructor;
            default: string;
        };
        theme: {
            type: import("vue").PropType<"default" | "success" | "primary" | "warning" | "danger">;
            default: "default" | "success" | "primary" | "warning" | "danger";
            validator(val: "default" | "success" | "primary" | "warning" | "danger"): boolean;
        };
        underline: BooleanConstructor;
        onClick: import("vue").PropType<(e: MouseEvent) => void>;
    }>> & {
        onClick?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        target: string;
        disabled: boolean;
        size: import("..").SizeEnum;
        underline: boolean;
        href: string;
        theme: "default" | "success" | "primary" | "warning" | "danger";
        hover: "color" | "underline";
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    download: {
        type: import("vue").PropType<string | boolean>;
    };
    hover: {
        type: import("vue").PropType<"color" | "underline">;
        default: "color" | "underline";
        validator(val: "color" | "underline"): boolean;
    };
    href: {
        type: StringConstructor;
        default: string;
    };
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    size: {
        type: import("vue").PropType<import("..").SizeEnum>;
        default: import("..").SizeEnum;
        validator(val: import("..").SizeEnum): boolean;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    target: {
        type: StringConstructor;
        default: string;
    };
    theme: {
        type: import("vue").PropType<"default" | "success" | "primary" | "warning" | "danger">;
        default: "default" | "success" | "primary" | "warning" | "danger";
        validator(val: "default" | "success" | "primary" | "warning" | "danger"): boolean;
    };
    underline: BooleanConstructor;
    onClick: import("vue").PropType<(e: MouseEvent) => void>;
}>> & {
    onClick?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", {
    target: string;
    disabled: boolean;
    size: import("..").SizeEnum;
    underline: boolean;
    href: string;
    theme: "default" | "success" | "primary" | "warning" | "danger";
    hover: "color" | "underline";
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Link;
