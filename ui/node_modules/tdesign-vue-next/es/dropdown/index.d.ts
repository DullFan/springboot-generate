import { TdDropdownProps, TdDropdownItemProps } from './type';
import './style';
export * from './type';
export declare type DropdownProps = TdDropdownProps;
export declare type DropdownItemProps = TdDropdownItemProps;
export declare type DropdownMenuProps = TdDropdownProps;
export declare const Dropdown: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        direction: {
            type: import("vue").PropType<"left" | "right">;
            default: "left" | "right";
            validator(val: "left" | "right"): boolean;
        };
        disabled: BooleanConstructor;
        hideAfterItemClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxColumnWidth: {
            type: import("vue").PropType<string | number>;
            default: string | number;
        };
        maxHeight: {
            type: NumberConstructor;
            default: number;
        };
        minColumnWidth: {
            type: import("vue").PropType<string | number>;
            default: string | number;
        };
        options: {
            type: import("vue").PropType<import("./type").DropdownOption[]>;
            default: () => import("./type").DropdownOption[];
        };
        panelBottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        panelTopContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        placement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
            default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
            validator(val: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        trigger: {
            type: import("vue").PropType<"click" | "focus" | "context-menu" | "hover">;
            default: "click" | "focus" | "context-menu" | "hover";
            validator(val: "click" | "focus" | "context-menu" | "hover"): boolean;
        };
        onClick: import("vue").PropType<(dropdownItem: import("./type").DropdownOption, context: {
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        direction: {
            type: import("vue").PropType<"left" | "right">;
            default: "left" | "right";
            validator(val: "left" | "right"): boolean;
        };
        disabled: BooleanConstructor;
        hideAfterItemClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxColumnWidth: {
            type: import("vue").PropType<string | number>;
            default: string | number;
        };
        maxHeight: {
            type: NumberConstructor;
            default: number;
        };
        minColumnWidth: {
            type: import("vue").PropType<string | number>;
            default: string | number;
        };
        options: {
            type: import("vue").PropType<import("./type").DropdownOption[]>;
            default: () => import("./type").DropdownOption[];
        };
        panelBottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        panelTopContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        placement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
            default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
            validator(val: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        trigger: {
            type: import("vue").PropType<"click" | "focus" | "context-menu" | "hover">;
            default: "click" | "focus" | "context-menu" | "hover";
            validator(val: "click" | "focus" | "context-menu" | "hover"): boolean;
        };
        onClick: import("vue").PropType<(dropdownItem: import("./type").DropdownOption, context: {
            e: MouseEvent;
        }) => void>;
    }>>, {
        direction: "left" | "right";
        maxHeight: number;
        disabled: boolean;
        options: import("./type").DropdownOption[];
        trigger: "click" | "focus" | "context-menu" | "hover";
        placement: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        maxColumnWidth: string | number;
        minColumnWidth: string | number;
        hideAfterItemClick: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        direction: {
            type: import("vue").PropType<"left" | "right">;
            default: "left" | "right";
            validator(val: "left" | "right"): boolean;
        };
        disabled: BooleanConstructor;
        hideAfterItemClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxColumnWidth: {
            type: import("vue").PropType<string | number>;
            default: string | number;
        };
        maxHeight: {
            type: NumberConstructor;
            default: number;
        };
        minColumnWidth: {
            type: import("vue").PropType<string | number>;
            default: string | number;
        };
        options: {
            type: import("vue").PropType<import("./type").DropdownOption[]>;
            default: () => import("./type").DropdownOption[];
        };
        panelBottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        panelTopContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        placement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
            default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
            validator(val: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        trigger: {
            type: import("vue").PropType<"click" | "focus" | "context-menu" | "hover">;
            default: "click" | "focus" | "context-menu" | "hover";
            validator(val: "click" | "focus" | "context-menu" | "hover"): boolean;
        };
        onClick: import("vue").PropType<(dropdownItem: import("./type").DropdownOption, context: {
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        direction: "left" | "right";
        maxHeight: number;
        disabled: boolean;
        options: import("./type").DropdownOption[];
        trigger: "click" | "focus" | "context-menu" | "hover";
        placement: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        maxColumnWidth: string | number;
        minColumnWidth: string | number;
        hideAfterItemClick: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    direction: {
        type: import("vue").PropType<"left" | "right">;
        default: "left" | "right";
        validator(val: "left" | "right"): boolean;
    };
    disabled: BooleanConstructor;
    hideAfterItemClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxColumnWidth: {
        type: import("vue").PropType<string | number>;
        default: string | number;
    };
    maxHeight: {
        type: NumberConstructor;
        default: number;
    };
    minColumnWidth: {
        type: import("vue").PropType<string | number>;
        default: string | number;
    };
    options: {
        type: import("vue").PropType<import("./type").DropdownOption[]>;
        default: () => import("./type").DropdownOption[];
    };
    panelBottomContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    panelTopContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    placement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
        default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        validator(val: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    trigger: {
        type: import("vue").PropType<"click" | "focus" | "context-menu" | "hover">;
        default: "click" | "focus" | "context-menu" | "hover";
        validator(val: "click" | "focus" | "context-menu" | "hover"): boolean;
    };
    onClick: import("vue").PropType<(dropdownItem: import("./type").DropdownOption, context: {
        e: MouseEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    direction: "left" | "right";
    maxHeight: number;
    disabled: boolean;
    options: import("./type").DropdownOption[];
    trigger: "click" | "focus" | "context-menu" | "hover";
    placement: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
    maxColumnWidth: string | number;
    minColumnWidth: string | number;
    hideAfterItemClick: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const DropdownItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        maxColumnWidth: {
            type: import("vue").PropType<string | number>;
            default: number;
        };
        minColumnWidth: {
            type: import("vue").PropType<string | number>;
            default: number;
        };
        isSubmenu: BooleanConstructor;
        active: BooleanConstructor;
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
        disabled: BooleanConstructor;
        divider: BooleanConstructor;
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        theme: {
            type: import("vue").PropType<import("./type").DropdownItemTheme>;
            default: import("./type").DropdownItemTheme;
            validator(val: import("./type").DropdownItemTheme): boolean;
        };
        value: {
            type: import("vue").PropType<string | number | {
                [key: string]: any;
            }>;
        };
        onClick: import("vue").PropType<(dropdownItem: import("./type").DropdownOption, context: {
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        maxColumnWidth: {
            type: import("vue").PropType<string | number>;
            default: number;
        };
        minColumnWidth: {
            type: import("vue").PropType<string | number>;
            default: number;
        };
        isSubmenu: BooleanConstructor;
        active: BooleanConstructor;
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
        disabled: BooleanConstructor;
        divider: BooleanConstructor;
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        theme: {
            type: import("vue").PropType<import("./type").DropdownItemTheme>;
            default: import("./type").DropdownItemTheme;
            validator(val: import("./type").DropdownItemTheme): boolean;
        };
        value: {
            type: import("vue").PropType<string | number | {
                [key: string]: any;
            }>;
        };
        onClick: import("vue").PropType<(dropdownItem: import("./type").DropdownOption, context: {
            e: MouseEvent;
        }) => void>;
    }>>, {
        active: boolean;
        content: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        disabled: boolean;
        theme: import("./type").DropdownItemTheme;
        divider: boolean;
        maxColumnWidth: string | number;
        minColumnWidth: string | number;
        isSubmenu: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        maxColumnWidth: {
            type: import("vue").PropType<string | number>;
            default: number;
        };
        minColumnWidth: {
            type: import("vue").PropType<string | number>;
            default: number;
        };
        isSubmenu: BooleanConstructor;
        active: BooleanConstructor;
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
        disabled: BooleanConstructor;
        divider: BooleanConstructor;
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        theme: {
            type: import("vue").PropType<import("./type").DropdownItemTheme>;
            default: import("./type").DropdownItemTheme;
            validator(val: import("./type").DropdownItemTheme): boolean;
        };
        value: {
            type: import("vue").PropType<string | number | {
                [key: string]: any;
            }>;
        };
        onClick: import("vue").PropType<(dropdownItem: import("./type").DropdownOption, context: {
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        active: boolean;
        content: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        disabled: boolean;
        theme: import("./type").DropdownItemTheme;
        divider: boolean;
        maxColumnWidth: string | number;
        minColumnWidth: string | number;
        isSubmenu: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    maxColumnWidth: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
    minColumnWidth: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
    isSubmenu: BooleanConstructor;
    active: BooleanConstructor;
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string;
    };
    disabled: BooleanConstructor;
    divider: BooleanConstructor;
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    theme: {
        type: import("vue").PropType<import("./type").DropdownItemTheme>;
        default: import("./type").DropdownItemTheme;
        validator(val: import("./type").DropdownItemTheme): boolean;
    };
    value: {
        type: import("vue").PropType<string | number | {
            [key: string]: any;
        }>;
    };
    onClick: import("vue").PropType<(dropdownItem: import("./type").DropdownOption, context: {
        e: MouseEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    active: boolean;
    content: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    disabled: boolean;
    theme: import("./type").DropdownItemTheme;
    divider: boolean;
    maxColumnWidth: string | number;
    minColumnWidth: string | number;
    isSubmenu: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const DropdownMenu: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        direction: {
            type: import("vue").PropType<"left" | "right">;
            default: "left" | "right";
            validator(val: "left" | "right"): boolean;
        };
        disabled: BooleanConstructor;
        hideAfterItemClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxColumnWidth: {
            type: import("vue").PropType<string | number>;
            default: string | number;
        };
        maxHeight: {
            type: NumberConstructor;
            default: number;
        };
        minColumnWidth: {
            type: import("vue").PropType<string | number>;
            default: string | number;
        };
        options: {
            type: import("vue").PropType<import("./type").DropdownOption[]>;
            default: () => import("./type").DropdownOption[];
        };
        panelBottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        panelTopContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        placement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
            default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
            validator(val: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        trigger: {
            type: import("vue").PropType<"click" | "focus" | "context-menu" | "hover">;
            default: "click" | "focus" | "context-menu" | "hover";
            validator(val: "click" | "focus" | "context-menu" | "hover"): boolean;
        };
        onClick: import("vue").PropType<(dropdownItem: import("./type").DropdownOption, context: {
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        direction: {
            type: import("vue").PropType<"left" | "right">;
            default: "left" | "right";
            validator(val: "left" | "right"): boolean;
        };
        disabled: BooleanConstructor;
        hideAfterItemClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxColumnWidth: {
            type: import("vue").PropType<string | number>;
            default: string | number;
        };
        maxHeight: {
            type: NumberConstructor;
            default: number;
        };
        minColumnWidth: {
            type: import("vue").PropType<string | number>;
            default: string | number;
        };
        options: {
            type: import("vue").PropType<import("./type").DropdownOption[]>;
            default: () => import("./type").DropdownOption[];
        };
        panelBottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        panelTopContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        placement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
            default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
            validator(val: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        trigger: {
            type: import("vue").PropType<"click" | "focus" | "context-menu" | "hover">;
            default: "click" | "focus" | "context-menu" | "hover";
            validator(val: "click" | "focus" | "context-menu" | "hover"): boolean;
        };
        onClick: import("vue").PropType<(dropdownItem: import("./type").DropdownOption, context: {
            e: MouseEvent;
        }) => void>;
    }>>, {
        direction: "left" | "right";
        maxHeight: number;
        disabled: boolean;
        options: import("./type").DropdownOption[];
        trigger: "click" | "focus" | "context-menu" | "hover";
        placement: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        maxColumnWidth: string | number;
        minColumnWidth: string | number;
        hideAfterItemClick: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        direction: {
            type: import("vue").PropType<"left" | "right">;
            default: "left" | "right";
            validator(val: "left" | "right"): boolean;
        };
        disabled: BooleanConstructor;
        hideAfterItemClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxColumnWidth: {
            type: import("vue").PropType<string | number>;
            default: string | number;
        };
        maxHeight: {
            type: NumberConstructor;
            default: number;
        };
        minColumnWidth: {
            type: import("vue").PropType<string | number>;
            default: string | number;
        };
        options: {
            type: import("vue").PropType<import("./type").DropdownOption[]>;
            default: () => import("./type").DropdownOption[];
        };
        panelBottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        panelTopContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        placement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
            default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
            validator(val: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        trigger: {
            type: import("vue").PropType<"click" | "focus" | "context-menu" | "hover">;
            default: "click" | "focus" | "context-menu" | "hover";
            validator(val: "click" | "focus" | "context-menu" | "hover"): boolean;
        };
        onClick: import("vue").PropType<(dropdownItem: import("./type").DropdownOption, context: {
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        direction: "left" | "right";
        maxHeight: number;
        disabled: boolean;
        options: import("./type").DropdownOption[];
        trigger: "click" | "focus" | "context-menu" | "hover";
        placement: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        maxColumnWidth: string | number;
        minColumnWidth: string | number;
        hideAfterItemClick: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    direction: {
        type: import("vue").PropType<"left" | "right">;
        default: "left" | "right";
        validator(val: "left" | "right"): boolean;
    };
    disabled: BooleanConstructor;
    hideAfterItemClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxColumnWidth: {
        type: import("vue").PropType<string | number>;
        default: string | number;
    };
    maxHeight: {
        type: NumberConstructor;
        default: number;
    };
    minColumnWidth: {
        type: import("vue").PropType<string | number>;
        default: string | number;
    };
    options: {
        type: import("vue").PropType<import("./type").DropdownOption[]>;
        default: () => import("./type").DropdownOption[];
    };
    panelBottomContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    panelTopContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    placement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
        default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        validator(val: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    trigger: {
        type: import("vue").PropType<"click" | "focus" | "context-menu" | "hover">;
        default: "click" | "focus" | "context-menu" | "hover";
        validator(val: "click" | "focus" | "context-menu" | "hover"): boolean;
    };
    onClick: import("vue").PropType<(dropdownItem: import("./type").DropdownOption, context: {
        e: MouseEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    direction: "left" | "right";
    maxHeight: number;
    disabled: boolean;
    options: import("./type").DropdownOption[];
    trigger: "click" | "focus" | "context-menu" | "hover";
    placement: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
    maxColumnWidth: string | number;
    minColumnWidth: string | number;
    hideAfterItemClick: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Dropdown;
