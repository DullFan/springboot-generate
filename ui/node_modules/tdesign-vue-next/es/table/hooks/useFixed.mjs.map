{"version":3,"file":"useFixed.mjs","sources":["../../../node_modules/lodash/noop.js","../../../node_modules/lodash/_createSet.js","../../../node_modules/lodash/_baseUniq.js","../../../node_modules/lodash/_baseXor.js","../../../node_modules/lodash/xorWith.js","../../../src/table/hooks/useFixed.ts"],"sourcesContent":["/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nmodule.exports = noop;\n","var Set = require('./_Set'),\n    noop = require('./noop'),\n    setToArray = require('./_setToArray');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Creates a set object of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n */\nvar createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n  return new Set(values);\n};\n\nmodule.exports = createSet;\n","var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    cacheHas = require('./_cacheHas'),\n    createSet = require('./_createSet'),\n    setToArray = require('./_setToArray');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  }\n  else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n    if (set) {\n      return setToArray(set);\n    }\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache;\n  }\n  else {\n    seen = iteratee ? [] : result;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n      if (iteratee) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n    else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseUniq;\n","var baseDifference = require('./_baseDifference'),\n    baseFlatten = require('./_baseFlatten'),\n    baseUniq = require('./_baseUniq');\n\n/**\n * The base implementation of methods like `_.xor`, without support for\n * iteratee shorthands, that accepts an array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of values.\n */\nfunction baseXor(arrays, iteratee, comparator) {\n  var length = arrays.length;\n  if (length < 2) {\n    return length ? baseUniq(arrays[0]) : [];\n  }\n  var index = -1,\n      result = Array(length);\n\n  while (++index < length) {\n    var array = arrays[index],\n        othIndex = -1;\n\n    while (++othIndex < length) {\n      if (othIndex != index) {\n        result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n      }\n    }\n  }\n  return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n}\n\nmodule.exports = baseXor;\n","var arrayFilter = require('./_arrayFilter'),\n    baseRest = require('./_baseRest'),\n    baseXor = require('./_baseXor'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    last = require('./last');\n\n/**\n * This method is like `_.xor` except that it accepts `comparator` which is\n * invoked to compare elements of `arrays`. The order of result values is\n * determined by the order they occur in the arrays. The comparator is invoked\n * with two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.xorWith(objects, others, _.isEqual);\n * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n */\nvar xorWith = baseRest(function(arrays) {\n  var comparator = last(arrays);\n  comparator = typeof comparator == 'function' ? comparator : undefined;\n  return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n});\n\nmodule.exports = xorWith;\n","import {\n  ref,\n  reactive,\n  watch,\n  toRefs,\n  SetupContext,\n  onMounted,\n  computed,\n  ComputedRef,\n  onBeforeUnmount,\n  Ref,\n} from 'vue';\nimport get from 'lodash/get';\nimport debounce from 'lodash/debounce';\nimport xorWith from 'lodash/xorWith';\nimport log from '../../_common/js/log';\nimport { ClassName, Styles } from '../../common';\nimport { BaseTableCol, BaseTableInstanceFunctions, TableRowData, TdBaseTableProps } from '../type';\nimport { getScrollbarWidthWithCSS } from '../../_common/js/utils/getScrollbarWidth';\nimport { on, off } from '../../utils/dom';\nimport { FixedColumnInfo, TableRowFixedClasses, RowAndColFixedPosition, TableColFixedClasses } from '../interface';\nimport { getIEVersion } from '../../_common/js/utils/helper';\nimport pick from 'lodash/pick';\n\n// 固定列相关类名处理\nexport function getColumnFixedStyles(\n  col: TdBaseTableProps['columns'][0],\n  index: number,\n  rowAndColFixedPosition: RowAndColFixedPosition,\n  tableColFixedClasses: TableColFixedClasses,\n): { style?: Styles; classes?: ClassName } {\n  const fixedPos = rowAndColFixedPosition?.get(col.colKey || index);\n  if (!fixedPos) return {};\n  const thClasses = {\n    [tableColFixedClasses.left]: col.fixed === 'left',\n    [tableColFixedClasses.right]: col.fixed === 'right',\n    [tableColFixedClasses.lastLeft]: col.fixed === 'left' && fixedPos.lastLeftFixedCol,\n    [tableColFixedClasses.firstRight]: col.fixed === 'right' && fixedPos.firstRightFixedCol,\n  };\n  const thStyles = {\n    left: col.fixed === 'left' ? `${fixedPos.left}px` : undefined,\n    right: col.fixed === 'right' ? `${fixedPos.right}px` : undefined,\n  };\n  return {\n    style: thStyles,\n    classes: thClasses,\n  };\n}\n\n// 固定行相关类名处理\nexport function getRowFixedStyles(\n  rowId: string | number,\n  rowIndex: number,\n  rowLength: number,\n  fixedRows: TdBaseTableProps['fixedRows'],\n  rowAndColFixedPosition: RowAndColFixedPosition,\n  tableRowFixedClasses: TableRowFixedClasses,\n): { style: Styles; classes: ClassName } {\n  if (!fixedRows || !fixedRows.length) return { style: undefined, classes: undefined };\n  const fixedTop = rowIndex < fixedRows[0];\n  const fixedBottom = rowIndex > rowLength - 1 - fixedRows[1];\n  const firstFixedBottomRow = rowLength - fixedRows[1];\n  const fixedPos = rowAndColFixedPosition?.get(rowId) || {};\n  const rowClasses = {\n    [tableRowFixedClasses.top]: fixedTop,\n    [tableRowFixedClasses.bottom]: fixedBottom,\n    [tableRowFixedClasses.firstBottom]: rowIndex === firstFixedBottomRow,\n    [tableRowFixedClasses.withoutBorderBottom]: rowIndex === firstFixedBottomRow - 1,\n  };\n  const rowStyles = {\n    top: fixedTop ? `${fixedPos.top}px` : undefined,\n    bottom: fixedBottom ? `${fixedPos.bottom}px` : undefined,\n  };\n  return {\n    style: rowStyles,\n    classes: rowClasses,\n  };\n}\n\nexport default function useFixed(\n  props: TdBaseTableProps,\n  context: SetupContext,\n  finalColumns: ComputedRef<BaseTableCol<TableRowData>[]>,\n  affixRef: Record<string, Ref>,\n) {\n  const {\n    columns,\n    tableLayout,\n    tableContentWidth,\n    fixedRows,\n    firstFullRow,\n    lastFullRow,\n    maxHeight,\n    headerAffixedTop,\n    footerAffixedBottom,\n    bordered,\n    resizable,\n    allowResizeColumnWidth,\n  } = toRefs(props);\n  const data = ref<TableRowData[]>([]);\n  const tableRef = ref<HTMLDivElement>();\n  const tableContentRef = ref<HTMLDivElement>();\n  const isFixedHeader = ref(false);\n  const isWidthOverflow = ref(false);\n  const tableElmRef = ref<HTMLTableElement>();\n  // CSS 样式设置了固定 6px\n  const scrollbarWidth = ref(6);\n  // 固定列、固定表头、固定表尾等内容的位置信息\n  const rowAndColFixedPosition = ref<RowAndColFixedPosition>(new Map());\n  const showColumnShadow = reactive({\n    left: false,\n    right: false,\n  });\n  // 虚拟滚动不能使用 CSS sticky 固定表头\n  const virtualScrollHeaderPos = ref<{ left: number; top: number }>({ left: 0, top: 0 });\n  const tableWidth = ref(0);\n  const tableElmWidth = ref(0);\n  const thWidthList = ref<{ [colKey: string]: number }>({});\n\n  const isFixedColumn = ref(false);\n  const isFixedRightColumn = ref(false);\n  const isFixedLeftColumn = ref(false);\n\n  const columnResizable = computed(() => allowResizeColumnWidth.value ?? resizable.value ?? false);\n\n  // 没有表头吸顶，没有虚拟滚动，则不需要表头宽度计算\n  const notNeedThWidthList = computed(\n    () =>\n      !(\n        props.headerAffixedTop ||\n        props.footerAffixedBottom ||\n        props.horizontalScrollAffixedBottom ||\n        props.scroll?.type === 'virtual'\n      ),\n  );\n\n  function setUseFixedTableElmRef(val: HTMLTableElement) {\n    tableElmRef.value = val;\n  }\n\n  function getColumnMap(\n    columns: BaseTableCol[],\n    map: RowAndColFixedPosition = new Map(),\n    levelNodes: FixedColumnInfo[][] = [],\n    level = 0,\n    parent?: FixedColumnInfo,\n  ) {\n    for (let i = 0, len = columns.length; i < len; i++) {\n      const col = columns[i];\n      if (['left', 'right'].includes(col.fixed)) {\n        isFixedColumn.value = true;\n      }\n      if (col.fixed === 'right') {\n        isFixedRightColumn.value = true;\n      }\n      if (col.fixed === 'left') {\n        isFixedLeftColumn.value = true;\n      }\n      const key = col.colKey || i;\n      const columnInfo: FixedColumnInfo = { col, parent, index: i };\n      map.set(key, columnInfo);\n      if (col.children?.length) {\n        getColumnMap(col.children, map, levelNodes, level + 1, columnInfo);\n      }\n      if (levelNodes[level]) {\n        levelNodes[level].push(columnInfo);\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        levelNodes[level] = [columnInfo];\n      }\n    }\n    return {\n      newColumnsMap: map,\n      levelNodes,\n    };\n  }\n\n  const setFixedLeftPos = (\n    columns: BaseTableCol[],\n    initialColumnMap: RowAndColFixedPosition,\n    parent: FixedColumnInfo = {},\n  ) => {\n    for (let i = 0, len = columns.length; i < len; i++) {\n      const col = columns[i];\n      if (col.fixed === 'right') return;\n      const colInfo = initialColumnMap.get(col.colKey || i);\n      let lastColIndex = i - 1;\n      while (lastColIndex >= 0 && columns[lastColIndex].fixed !== 'left') {\n        lastColIndex -= 1;\n      }\n      const lastCol = columns[lastColIndex];\n      // 多级表头，使用父元素作为初始基本位置\n      const defaultWidth = i === 0 ? parent?.left || 0 : 0;\n      const lastColInfo = initialColumnMap.get(lastCol?.colKey || i - 1);\n      if (colInfo) {\n        colInfo.left = (lastColInfo?.left || defaultWidth) + (lastColInfo?.width || 0);\n      }\n      // 多级表头\n      if (col.children?.length) {\n        setFixedLeftPos(col.children, initialColumnMap, colInfo);\n      }\n    }\n  };\n\n  const setFixedRightPos = (\n    columns: BaseTableCol[],\n    initialColumnMap: RowAndColFixedPosition,\n    parent: FixedColumnInfo = {},\n  ) => {\n    for (let i = columns.length - 1; i >= 0; i--) {\n      const col = columns[i];\n      if (col.fixed === 'left') return;\n      const colInfo = initialColumnMap.get(col.colKey || i);\n      let lastColIndex = i + 1;\n      while (lastColIndex < columns.length && columns[lastColIndex].fixed !== 'right') {\n        lastColIndex += 1;\n      }\n      const lastCol = columns[lastColIndex];\n      // 多级表头，使用父元素作为初始基本位置\n      const defaultWidth = i === columns.length - 1 ? parent?.right || 0 : 0;\n      const lastColInfo = initialColumnMap.get(lastCol?.colKey || i + 1);\n      if (colInfo) {\n        colInfo.right = (lastColInfo?.right || defaultWidth) + (lastColInfo?.width || 0);\n      }\n      // 多级表头\n      if (col.children?.length) {\n        setFixedRightPos(col.children, initialColumnMap, colInfo);\n      }\n    }\n  };\n\n  // 获取固定列位置信息。先获取节点宽度，再计算\n  const setFixedColPosition = (trList: HTMLCollection, initialColumnMap: RowAndColFixedPosition) => {\n    if (!trList) return;\n    for (let i = 0, len = trList.length; i < len; i++) {\n      const thList = trList[i].children;\n      for (let j = 0, thLen = thList.length; j < thLen; j++) {\n        const th = thList[j] as HTMLElement;\n        const colKey = th.dataset.colkey;\n        if (!colKey) {\n          log.warn('TDesign Table', `${th.innerText} missing colKey. colKey is required for fixed column feature.`);\n        }\n        const obj = initialColumnMap.get(colKey || j);\n        if (obj?.col?.fixed) {\n          initialColumnMap.set(colKey, { ...obj, width: th.getBoundingClientRect().width });\n        }\n      }\n    }\n    setFixedLeftPos(columns.value, initialColumnMap);\n    setFixedRightPos(columns.value, initialColumnMap);\n  };\n\n  // 设置固定行位置信息 top/bottom\n  const setFixedRowPosition = (\n    trList: HTMLCollection,\n    initialColumnMap: RowAndColFixedPosition,\n    thead: HTMLTableSectionElement,\n    tfoot: HTMLTableSectionElement,\n  ) => {\n    const [fixedTopRows, fixedBottomRows] = fixedRows.value || [];\n    const { data, rowKey = 'id' } = props;\n    for (let i = 0; i < fixedTopRows; i++) {\n      const tr = trList[i] as HTMLElement;\n      const rowId = get(data[i], rowKey);\n      const thisRowInfo = initialColumnMap.get(rowId) || {};\n      const lastRowId = get(data[i - 1], rowKey);\n      const lastRowInfo = initialColumnMap.get(lastRowId) || {};\n      let defaultBottom = 0;\n      if (i === 0) {\n        defaultBottom = thead?.getBoundingClientRect().height || 0;\n      }\n      thisRowInfo.top = (lastRowInfo.top || defaultBottom) + (lastRowInfo.height || 0);\n      initialColumnMap.set(rowId, { ...thisRowInfo, height: tr?.getBoundingClientRect().height || 0 });\n    }\n    for (let i = data.length - 1; i >= data.length - fixedBottomRows; i--) {\n      const tr = trList[i] as HTMLElement;\n      const rowId = get(data[i], rowKey);\n      const thisRowInfo = initialColumnMap.get(rowId) || {};\n      const lastRowId = get(data[i + 1], rowKey);\n      const lastRowInfo = initialColumnMap.get(lastRowId) || {};\n      let defaultBottom = 0;\n      if (i === data.length - 1) {\n        defaultBottom = tfoot?.getBoundingClientRect().height || 0;\n      }\n      thisRowInfo.bottom = (lastRowInfo.bottom || defaultBottom) + (lastRowInfo.height || 0);\n      initialColumnMap.set(rowId, { ...thisRowInfo, height: tr?.getBoundingClientRect().height || 0 });\n    }\n  };\n\n  const updateRowAndColFixedPosition = (tableContentElm: HTMLElement, initialColumnMap: RowAndColFixedPosition) => {\n    rowAndColFixedPosition.value.clear();\n    if (!tableContentElm) return;\n    const thead = tableContentElm.querySelector('thead');\n    // 处理固定列\n    thead && setFixedColPosition(thead.children, initialColumnMap);\n    // 处理冻结行\n    const tbody = tableContentElm.querySelector('tbody');\n    const tfoot = tableContentElm.querySelector('tfoot');\n    tbody && setFixedRowPosition(tbody.children, initialColumnMap, thead, tfoot);\n    // 更新最终 Map\n    rowAndColFixedPosition.value = initialColumnMap;\n  };\n\n  let shadowLastScrollLeft: number;\n  const updateColumnFixedShadow = (target: HTMLElement, extra?: { skipScrollLimit?: boolean }) => {\n    if (!isFixedColumn.value || !target) return;\n    const { scrollLeft } = target;\n    // 只有左右滚动，需要更新固定列阴影\n    if (shadowLastScrollLeft === scrollLeft && (!extra || !extra.skipScrollLimit)) return;\n    shadowLastScrollLeft = scrollLeft;\n    const isShowRight = target.clientWidth + scrollLeft < target.scrollWidth;\n    const isShowLeft = scrollLeft > 0;\n    if (showColumnShadow.left === isShowLeft && showColumnShadow.right === isShowRight) return;\n    showColumnShadow.left = isShowLeft && isFixedLeftColumn.value;\n    showColumnShadow.right = isShowRight && isFixedRightColumn.value;\n  };\n\n  // 多级表头场景较为复杂：为了滚动的阴影效果，需要知道哪些列是边界列，左侧固定列的最后一列，右侧固定列的第一列，每一层表头都需要兼顾\n  const setIsLastOrFirstFixedCol = (levelNodes: FixedColumnInfo[][]) => {\n    for (let t = 0; t < levelNodes.length; t++) {\n      const nodes = levelNodes[t];\n      for (let i = 0, len = nodes.length; i < len; i++) {\n        const colMapInfo = nodes[i];\n        const nextColMapInfo = nodes[i + 1];\n        const { parent } = colMapInfo;\n        const isParentLastLeftFixedCol = !parent || parent?.lastLeftFixedCol;\n        if (isParentLastLeftFixedCol && colMapInfo.col.fixed === 'left' && nextColMapInfo?.col.fixed !== 'left') {\n          colMapInfo.lastLeftFixedCol = true;\n        }\n        const lastColMapInfo = nodes[i - 1];\n        const isParentFirstRightFixedCol = !parent || parent?.firstRightFixedCol;\n        if (isParentFirstRightFixedCol && colMapInfo.col.fixed === 'right' && lastColMapInfo?.col.fixed !== 'right') {\n          colMapInfo.firstRightFixedCol = true;\n        }\n      }\n    }\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const updateFixedStatus = () => {\n    const { newColumnsMap, levelNodes } = getColumnMap(columns.value);\n    setIsLastOrFirstFixedCol(levelNodes);\n    const timer = setTimeout(() => {\n      if (isFixedColumn.value || fixedRows.value?.length) {\n        updateRowAndColFixedPosition(tableContentRef.value, newColumnsMap);\n      }\n      clearTimeout(timer);\n    }, 0);\n    return () => {\n      clearTimeout(timer);\n    };\n  };\n\n  const updateFixedHeader = () => {\n    const timer = setTimeout(() => {\n      if (!tableContentRef.value) return;\n      isFixedHeader.value = tableContentRef.value.scrollHeight > tableContentRef.value.clientHeight;\n      isWidthOverflow.value = tableContentRef.value.scrollWidth > tableContentRef.value.clientWidth;\n      const pos = tableContentRef.value.getBoundingClientRect();\n      virtualScrollHeaderPos.value = {\n        top: pos.top,\n        left: pos.left,\n      };\n      clearTimeout(timer);\n    }, 0);\n  };\n\n  const setTableElmWidth = (width: number) => {\n    if (tableElmWidth.value === width) return;\n    tableElmWidth.value = width;\n  };\n\n  const updateTableWidth = () => {\n    const rect = tableContentRef.value?.getBoundingClientRect();\n    if (!rect) return;\n    // 存在纵向滚动条，且固定表头时，需去除滚动条宽度\n    const reduceWidth = isFixedHeader.value ? scrollbarWidth.value : 0;\n    tableWidth.value = rect.width - reduceWidth - (props.bordered ? 1 : 0);\n    const elmRect = tableElmRef?.value?.getBoundingClientRect();\n    elmRect?.width && setTableElmWidth(elmRect.width);\n  };\n\n  const updateAffixPosition = () => {\n    // 在表格高度变化的时候 需要手动调整affix的位置 因为affix本身无法监听到这些变化触发重新计算\n    affixRef.paginationAffixRef.value?.handleScroll?.();\n    affixRef.horizontalScrollAffixRef.value?.handleScroll?.();\n    affixRef.headerTopAffixRef.value?.handleScroll?.();\n    affixRef.footerBottomAffixRef.value?.handleScroll?.();\n  };\n\n  const calculateThWidthList = (trList: HTMLCollection) => {\n    const widthMap: { [colKey: string]: number } = {};\n    for (let i = 0, len = trList.length; i < len; i++) {\n      const thList = trList[i].children;\n      // second for used for multiple row header\n      for (let j = 0, thLen = thList.length; j < thLen; j++) {\n        const th = thList[j] as HTMLElement;\n        const colKey = th.dataset.colkey;\n        widthMap[colKey] = th.getBoundingClientRect().width;\n      }\n    }\n    return widthMap;\n  };\n\n  const updateThWidthList = (trList: HTMLCollection | { [colKey: string]: number }) => {\n    if (trList instanceof HTMLCollection) {\n      if (columnResizable.value) return;\n      thWidthList.value = calculateThWidthList(trList);\n    } else {\n      thWidthList.value = thWidthList.value || {};\n      Object.entries(trList).forEach(([colKey, width]) => {\n        thWidthList.value[colKey] = width;\n      });\n    }\n    return thWidthList.value;\n  };\n\n  const updateThWidthListHandler = () => {\n    const timer = setTimeout(() => {\n      updateTableWidth();\n      if (notNeedThWidthList.value) return;\n      const thead = tableContentRef.value?.querySelector('thead');\n      if (!thead) return;\n      updateThWidthList(thead.children);\n      clearTimeout(timer);\n    }, 0);\n  };\n\n  const resetThWidthList = () => {\n    thWidthList.value = {};\n  };\n\n  const emitScrollEvent = (e: WheelEvent) => {\n    props.onScrollX?.({ e });\n    props.onScrollY?.({ e });\n    props.onScroll?.({ e });\n  };\n\n  const getThWidthList = (type?: 'default' | 'calculate') => {\n    if (type === 'calculate') {\n      const trList = tableContentRef.value?.querySelector('thead')?.children;\n      return calculateThWidthList(trList);\n    }\n    return thWidthList.value || {};\n  };\n\n  watch(\n    [\n      data,\n      columns,\n      bordered,\n      tableLayout,\n      tableContentWidth,\n      isFixedHeader,\n      isWidthOverflow,\n      isFixedColumn,\n      fixedRows,\n      firstFullRow,\n      lastFullRow,\n    ],\n    updateFixedStatus,\n    { immediate: true },\n  );\n\n  watch(\n    [isFixedColumn, columns],\n    () => {\n      const timer = setTimeout(() => {\n        if (isFixedColumn.value) {\n          updateColumnFixedShadow(tableContentRef.value);\n        }\n        clearTimeout(timer);\n      }, 0);\n    },\n    { immediate: true },\n  );\n\n  watch(\n    [maxHeight, data, columns, bordered, tableContentRef],\n    () => {\n      if (tableContentRef.value) {\n        // 如果不监听元素的ref，会出现watch在ref还没ready的时候触发，此时没有触发这个判断的更新，导致表头消失\n        updateFixedHeader();\n      }\n    },\n    { immediate: true },\n  );\n\n  watch(finalColumns, () => {\n    resetThWidthList();\n  });\n\n  // 影响表头宽度的元素\n  watch(\n    [data, bordered, tableLayout, fixedRows, isFixedHeader, headerAffixedTop, footerAffixedBottom, tableContentWidth],\n    () => {\n      const timer = setTimeout(() => {\n        updateThWidthListHandler();\n        updateAffixPosition();\n        clearTimeout(timer);\n      }, 60);\n    },\n    { immediate: true },\n  );\n\n  watch([finalColumns], ([finalColumns], [preFinalColumns]) => {\n    const finalColKeys = finalColumns.map((t) => t.colKey);\n    const preColKeys = preFinalColumns.map((t) => t.colKey);\n    if (finalColKeys.length < preColKeys.length) {\n      const reduceKeys = xorWith(preColKeys, finalColKeys);\n      const thWidthList = getThWidthList('calculate');\n      let reduceWidth = 0;\n      reduceKeys.forEach((key) => {\n        reduceWidth += thWidthList[key];\n      });\n      const rootThWidthList = pick(thWidthList, preColKeys);\n      const oldTotalWidth = Object.values(rootThWidthList).reduce((r = 0, n) => r + n);\n      // 保留原有可能编辑过的列宽度，但是当剩余列过小时，表头小于内容宽，需要缩放回内容宽度\n      // 使用不包含滚动条的可视化区域宽度，意味着当不再溢出的时候，将宽度设置回完整宽度\n      const contentWidth = tableContentRef.value.clientWidth;\n      const widthToReserve = oldTotalWidth - reduceWidth;\n      setTableElmWidth(Math.max(contentWidth, widthToReserve));\n    }\n  });\n\n  const refreshTable: BaseTableInstanceFunctions['refreshTable'] = () => {\n    // updateTableWidth();\n    updateThWidthListHandler();\n    updateFixedHeader();\n    updateAffixPosition();\n\n    if (isFixedColumn.value || isFixedHeader.value) {\n      updateFixedStatus();\n      updateColumnFixedShadow(tableContentRef.value, { skipScrollLimit: true });\n    }\n  };\n\n  const onResize = debounce(() => {\n    refreshTable();\n  }, 30);\n\n  let resizeObserver: ResizeObserver = null;\n  function addTableResizeObserver(tableElement: HTMLDivElement) {\n    if (typeof window === 'undefined') return;\n    // IE 11 以下使用 window resize；IE 11 以上使用 ResizeObserver\n    if (getIEVersion() < 11 || typeof window.ResizeObserver === 'undefined') return;\n    off(window, 'resize', onResize);\n    resizeObserver = new window.ResizeObserver(() => {\n      const timer = setTimeout(() => {\n        refreshTable();\n        clearTimeout(timer);\n      }, 200);\n    });\n    resizeObserver.observe(tableElement);\n    tableRef.value = tableElement;\n  }\n\n  onMounted(() => {\n    const scrollWidth = getScrollbarWidthWithCSS();\n    scrollbarWidth.value = scrollWidth;\n    updateThWidthListHandler();\n    const isWatchResize = isFixedColumn.value || isFixedHeader.value || !notNeedThWidthList.value || !data.value.length;\n    // IE 11 以下使用 window resize；IE 11 以上使用 ResizeObserver\n    const hasWindow = typeof window !== 'undefined';\n    const hasResizeObserver = hasWindow && typeof window.ResizeObserver !== 'undefined';\n    if ((isWatchResize && getIEVersion() < 11) || !hasResizeObserver) {\n      on(window, 'resize', onResize);\n    }\n  });\n\n  onBeforeUnmount(() => {\n    if (typeof window !== 'undefined') {\n      off(window, 'resize', onResize);\n    }\n    resizeObserver?.unobserve(tableRef.value);\n    resizeObserver?.disconnect();\n  });\n\n  const setData = (dataSource: TableRowData[]) => {\n    data.value = dataSource;\n  };\n\n  const updateTableAfterColumnResize = () => {\n    updateFixedStatus();\n    updateFixedHeader();\n  };\n\n  return {\n    tableWidth,\n    tableElmWidth,\n    thWidthList,\n    isFixedHeader,\n    isWidthOverflow,\n    tableContentRef,\n    isFixedColumn,\n    showColumnShadow,\n    rowAndColFixedPosition,\n    virtualScrollHeaderPos,\n    scrollbarWidth,\n    setData,\n    refreshTable,\n    setTableElmWidth,\n    emitScrollEvent,\n    updateThWidthListHandler,\n    updateColumnFixedShadow,\n    setUseFixedTableElmRef,\n    getThWidthList,\n    updateThWidthList,\n    addTableResizeObserver,\n    updateTableAfterColumnResize,\n  };\n}\n"],"names":["noop","noop_1","Set","require$$0","require$$1","setToArray","require$$2","INFINITY","createSet","values","_createSet","SetCache","arrayIncludes","arrayIncludesWith","cacheHas","require$$3","require$$4","require$$5","LARGE_ARRAY_SIZE","baseUniq","array","iteratee","comparator","index","includes","length","isCommon","result","seen","set","outer","value","computed","seenIndex","push","_baseUniq","baseDifference","baseFlatten","baseXor","arrays","Array","othIndex","_baseXor","arrayFilter","baseRest","isArrayLikeObject","last","xorWith","undefined","xorWith_1","getColumnFixedStyles","col","rowAndColFixedPosition","tableColFixedClasses","fixedPos","get","colKey","thClasses","_defineProperty","left","fixed","right","lastLeft","lastLeftFixedCol","firstRight","firstRightFixedCol","thStyles","concat","style","classes","getRowFixedStyles","rowId","rowIndex","rowLength","fixedRows","tableRowFixedClasses","fixedTop","fixedBottom","firstFixedBottomRow","rowClasses","top","bottom","firstBottom","withoutBorderBottom","rowStyles","useFixed","props","context","finalColumns","affixRef","_toRefs","toRefs","columns","tableLayout","tableContentWidth","firstFullRow","lastFullRow","maxHeight","headerAffixedTop","footerAffixedBottom","bordered","resizable","allowResizeColumnWidth","data","ref","tableRef","tableContentRef","isFixedHeader","isWidthOverflow","tableElmRef","scrollbarWidth","Map","showColumnShadow","reactive","virtualScrollHeaderPos","tableWidth","tableElmWidth","thWidthList","isFixedColumn","isFixedRightColumn","isFixedLeftColumn","columnResizable","_ref","_allowResizeColumnWid","notNeedThWidthList","_props$scroll","horizontalScrollAffixedBottom","scroll","type","setUseFixedTableElmRef","val","getColumnMap","map","arguments","levelNodes","level","parent","i","len","_col$children","key","columnInfo","children","newColumnsMap","setFixedLeftPos","initialColumnMap","_col$children2","colInfo","lastColIndex","lastCol","defaultWidth","lastColInfo","width","setFixedRightPos","_col$children3","setFixedColPosition","trList","thList","j","thLen","_obj$col","th","dataset","colkey","log","warn","innerText","obj","_objectSpread","getBoundingClientRect","setFixedRowPosition","thead","tfoot","_ref2","_ref3","_slicedToArray","fixedTopRows","fixedBottomRows","_props$rowKey","rowKey","tr","thisRowInfo","lastRowId","lastRowInfo","defaultBottom","height","updateRowAndColFixedPosition","tableContentElm","clear","querySelector","tbody","shadowLastScrollLeft","updateColumnFixedShadow","target","extra","scrollLeft","skipScrollLimit","isShowRight","clientWidth","scrollWidth","isShowLeft","setIsLastOrFirstFixedCol","t","nodes","colMapInfo","nextColMapInfo","isParentLastLeftFixedCol","lastColMapInfo","isParentFirstRightFixedCol","updateFixedStatus","_getColumnMap","timer","setTimeout","_fixedRows$value","clearTimeout","updateFixedHeader","scrollHeight","clientHeight","pos","setTableElmWidth","updateTableWidth","_tableContentRef$valu","_tableElmRef$value","rect","reduceWidth","elmRect","updateAffixPosition","_affixRef$paginationA","_affixRef$paginationA2","_affixRef$horizontalS","_affixRef$horizontalS2","_affixRef$headerTopAf","_affixRef$headerTopAf2","_affixRef$footerBotto","_affixRef$footerBotto2","paginationAffixRef","handleScroll","call","horizontalScrollAffixRef","headerTopAffixRef","footerBottomAffixRef","calculateThWidthList","widthMap","updateThWidthList","HTMLCollection","Object","entries","forEach","_ref4","_ref5","updateThWidthListHandler","_tableContentRef$valu2","resetThWidthList","emitScrollEvent","e","_props$onScrollX","_props$onScrollY","_props$onScroll","onScrollX","onScrollY","onScroll","getThWidthList","_tableContentRef$valu3","watch","immediate","_ref6","_ref7","_ref8","_ref9","preFinalColumns","finalColKeys","preColKeys","reduceKeys","rootThWidthList","pick","oldTotalWidth","reduce","r","n","contentWidth","widthToReserve","Math","max","refreshTable","onResize","debounce","resizeObserver","addTableResizeObserver","tableElement","window","getIEVersion","ResizeObserver","off","observe","onMounted","getScrollbarWidthWithCSS","isWatchResize","hasWindow","hasResizeObserver","on","onBeforeUnmount","_resizeObserver","_resizeObserver2","unobserve","disconnect","setData","dataSource","updateTableAfterColumnResize"],"mappings":"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"}