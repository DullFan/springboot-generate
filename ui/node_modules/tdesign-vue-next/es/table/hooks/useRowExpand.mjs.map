{"version":3,"file":"useRowExpand.mjs","sources":["../../../src/table/hooks/useRowExpand.tsx"],"sourcesContent":["import { computed, SetupContext, toRefs, h } from 'vue';\nimport { ChevronRightCircleIcon as TdChevronRightCircleIcon } from 'tdesign-icons-vue-next';\nimport get from 'lodash/get';\n\nimport {\n  TdPrimaryTableProps,\n  PrimaryTableCol,\n  TableRowData,\n  PrimaryTableCellParams,\n  TableExpandedRowParams,\n  RowEventContext,\n} from '../type';\nimport useClassName from './useClassName';\nimport { useTNodeJSX } from '../../hooks/tnode';\nimport useDefaultValue from '../../hooks/useDefaultValue';\nimport { useConfig } from '../../hooks/useConfig';\nimport { useGlobalIcon } from '../../hooks/useGlobalIcon';\n\nexport default function useRowExpand(props: TdPrimaryTableProps, context: SetupContext) {\n  const { expandedRowKeys } = toRefs(props);\n  const renderTNode = useTNodeJSX();\n  const { t, globalConfig } = useConfig('table', props.locale);\n  const { ChevronRightCircleIcon } = useGlobalIcon({ ChevronRightCircleIcon: TdChevronRightCircleIcon });\n  const { tableExpandClasses, positiveRotate90, tableFullRowClasses } = useClassName();\n  // controlled and uncontrolled\n  const [tExpandedRowKeys, setTExpandedRowKeys] = useDefaultValue(\n    expandedRowKeys,\n    props.defaultExpandedRowKeys || [],\n    props.onExpandChange,\n    'expandedRowKeys',\n  );\n\n  const showExpandedRow = computed(() =>\n    Boolean(props.expandedRow || context.slots.expandedRow || context.slots['expanded-row']),\n  );\n\n  const showExpandIconColumn = computed(() => props.expandIcon !== false && showExpandedRow.value);\n\n  const isFirstColumnFixed = computed(() => props.columns?.[0]?.fixed === 'left');\n\n  const onToggleExpand = (e: MouseEvent, row: TableRowData) => {\n    props.expandOnRowClick && e.stopPropagation();\n    const currentId = get(row, props.rowKey || 'id');\n    const index = tExpandedRowKeys.value.indexOf(currentId);\n    const newKeys = [...tExpandedRowKeys.value];\n    index !== -1 ? newKeys.splice(index, 1) : newKeys.push(currentId);\n    setTExpandedRowKeys(newKeys, {\n      expandedRowData: props.data.filter((t) => newKeys.includes(get(t, props.rowKey || 'id'))),\n      currentRowData: row,\n    });\n  };\n\n  const renderExpandIcon = (_: typeof h, p: PrimaryTableCellParams<TableRowData>) => {\n    const { row, rowIndex } = p;\n    const currentId = get(row, props.rowKey || 'id');\n    const expanded = tExpandedRowKeys.value.includes(currentId);\n    const icon = renderTNode('expandIcon', {\n      defaultNode: t(globalConfig.value.expandIcon) || <ChevronRightCircleIcon />,\n      params: { row, index: rowIndex },\n    });\n    if (!icon) return null;\n    const classes = [\n      tableExpandClasses.iconBox,\n      tableExpandClasses[expanded ? 'expanded' : 'collapsed'],\n      { [positiveRotate90]: expanded },\n    ];\n    return (\n      <span class={classes} onClick={(e: MouseEvent) => onToggleExpand(e, row)}>\n        {icon}\n      </span>\n    );\n  };\n\n  const getExpandColumn = () => {\n    const expandCol: PrimaryTableCol<TableRowData> = {\n      colKey: '__EXPAND_ROW_ICON_COLUMN__',\n      width: 46,\n      className: tableExpandClasses.iconCell,\n      fixed: isFirstColumnFixed.value ? 'left' : undefined,\n      cell: renderExpandIcon,\n      stopPropagation: true,\n    };\n    return expandCol;\n  };\n\n  const renderExpandedRow = (\n    p: TableExpandedRowParams<TableRowData> & { tableWidth: number; isWidthOverflow: boolean },\n  ) => {\n    const rowId = get(p.row, props.rowKey || 'id');\n    if (!tExpandedRowKeys.value || !tExpandedRowKeys.value.includes(rowId)) return null;\n    const isFixedLeft = p.isWidthOverflow && props.columns.find((item) => item.fixed === 'left');\n    return (\n      <tr key={`expand_${rowId}`} class={[tableExpandClasses.row, { [tableFullRowClasses.base]: isFixedLeft }]}>\n        <td colspan={p.columns.length}>\n          <div\n            class={[tableExpandClasses.rowInner, { [tableFullRowClasses.innerFullRow]: isFixedLeft }]}\n            style={isFixedLeft ? { width: `${p.tableWidth}px` } : {}}\n          >\n            <div class={tableFullRowClasses.innerFullElement}>{renderTNode('expandedRow', { params: p })}</div>\n          </div>\n        </td>\n      </tr>\n    );\n  };\n\n  const onInnerExpandRowClick = (p: RowEventContext<TableRowData>) => {\n    onToggleExpand(p.e as MouseEvent, p.row);\n  };\n\n  return {\n    showExpandedRow,\n    showExpandIconColumn,\n    getExpandColumn,\n    renderExpandedRow,\n    onInnerExpandRowClick,\n  };\n}\n"],"names":["useRowExpand","props","context","_toRefs","toRefs","expandedRowKeys","renderTNode","useTNodeJSX","_useConfig","useConfig","locale","t","globalConfig","_useGlobalIcon","useGlobalIcon","ChevronRightCircleIcon","TdChevronRightCircleIcon","_useClassName","useClassName","tableExpandClasses","positiveRotate90","tableFullRowClasses","_useDefaultValue","useDefaultValue","defaultExpandedRowKeys","onExpandChange","_useDefaultValue2","_slicedToArray","tExpandedRowKeys","setTExpandedRowKeys","showExpandedRow","computed","Boolean","expandedRow","slots","showExpandIconColumn","expandIcon","value","isFirstColumnFixed","_props$columns","columns","fixed","onToggleExpand","e","row","expandOnRowClick","stopPropagation","currentId","get","rowKey","index","indexOf","newKeys","_toConsumableArray","splice","push","expandedRowData","data","filter","includes","currentRowData","renderExpandIcon","_","p","rowIndex","expanded","icon","defaultNode","_createVNode","params","classes","iconBox","_defineProperty","onClick","getExpandColumn","expandCol","colKey","width","className","iconCell","cell","renderExpandedRow","rowId","isFixedLeft","isWidthOverflow","find","item","concat","base","length","rowInner","innerFullRow","tableWidth","innerFullElement","onInnerExpandRowClick"],"mappings":"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"}