import { TdDescriptionsProps, TdDescriptionItemProps } from './type';
import './style';
export * from './type';
export declare type DescriptionsProps = TdDescriptionsProps;
export declare type DescriptionsItemProps = TdDescriptionItemProps;
export declare const Descriptions: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        bordered: BooleanConstructor;
        colon: BooleanConstructor;
        column: {
            type: NumberConstructor;
            default: number;
        };
        contentStyle: {
            type: import("vue").PropType<import("..").Styles>;
        };
        itemLayout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        items: {
            type: import("vue").PropType<TdDescriptionItemProps[]>;
        };
        labelStyle: {
            type: import("vue").PropType<import("..").Styles>;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        bordered: BooleanConstructor;
        colon: BooleanConstructor;
        column: {
            type: NumberConstructor;
            default: number;
        };
        contentStyle: {
            type: import("vue").PropType<import("..").Styles>;
        };
        itemLayout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        items: {
            type: import("vue").PropType<TdDescriptionItemProps[]>;
        };
        labelStyle: {
            type: import("vue").PropType<import("..").Styles>;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
    }>>, {
        size: import("..").SizeEnum;
        column: number;
        layout: "horizontal" | "vertical";
        colon: boolean;
        itemLayout: "horizontal" | "vertical";
        bordered: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        bordered: BooleanConstructor;
        colon: BooleanConstructor;
        column: {
            type: NumberConstructor;
            default: number;
        };
        contentStyle: {
            type: import("vue").PropType<import("..").Styles>;
        };
        itemLayout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        items: {
            type: import("vue").PropType<TdDescriptionItemProps[]>;
        };
        labelStyle: {
            type: import("vue").PropType<import("..").Styles>;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        size: import("..").SizeEnum;
        column: number;
        layout: "horizontal" | "vertical";
        colon: boolean;
        itemLayout: "horizontal" | "vertical";
        bordered: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    bordered: BooleanConstructor;
    colon: BooleanConstructor;
    column: {
        type: NumberConstructor;
        default: number;
    };
    contentStyle: {
        type: import("vue").PropType<import("..").Styles>;
    };
    itemLayout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    items: {
        type: import("vue").PropType<TdDescriptionItemProps[]>;
    };
    labelStyle: {
        type: import("vue").PropType<import("..").Styles>;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    size: {
        type: import("vue").PropType<import("..").SizeEnum>;
        default: import("..").SizeEnum;
        validator(val: import("..").SizeEnum): boolean;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    size: import("..").SizeEnum;
    column: number;
    layout: "horizontal" | "vertical";
    colon: boolean;
    itemLayout: "horizontal" | "vertical";
    bordered: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const DescriptionsItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: import("vue").PropType<"top" | "bottom" | "middle">;
            validator(val: "top" | "bottom" | "middle"): boolean;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        span: {
            type: NumberConstructor;
            default: number;
        };
    }>>, unknown, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: import("vue").PropType<"top" | "bottom" | "middle">;
            validator(val: "top" | "bottom" | "middle"): boolean;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        span: {
            type: NumberConstructor;
            default: number;
        };
    }>>, {
        span: number;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: import("vue").PropType<"top" | "bottom" | "middle">;
            validator(val: "top" | "bottom" | "middle"): boolean;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        span: {
            type: NumberConstructor;
            default: number;
        };
    }>>, {}, {}, {}, {}, {
        span: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    align: {
        type: import("vue").PropType<"top" | "bottom" | "middle">;
        validator(val: "top" | "bottom" | "middle"): boolean;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    span: {
        type: NumberConstructor;
        default: number;
    };
}>>, unknown, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    span: number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Descriptions;
