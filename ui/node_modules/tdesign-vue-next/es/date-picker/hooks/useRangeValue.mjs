/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../../_chunks/dep-f29ee43a.mjs';
import { toRefs, computed, ref, watchEffect } from 'vue';
import useVModel from '../../hooks/useVModel.mjs';
import { i as isArray_1 } from '../../_chunks/dep-4ef63f67.mjs';
import { g as getDefaultFormat, h as extractTimeFormat, d as isValidDate, i as initYearMonthTime, f as formatDate, a as formatTime } from '../../_chunks/dep-49f5a867.mjs';
import '../../_chunks/dep-04fa0fa7.mjs';
import '../../_chunks/dep-dab87894.mjs';
import '../../_chunks/dep-ad0f5c12.mjs';
import '../../_chunks/dep-7d8aa418.mjs';
import '../../_chunks/dep-056e3d49.mjs';
import '../../_chunks/dep-de0d9668.mjs';
import '../../_chunks/dep-8a6a0750.mjs';
import '../../_chunks/dep-f5bde8c1.mjs';
import '../../_chunks/dep-8e0cf610.mjs';
import '../../_chunks/dep-c23362d5.mjs';
import '../../_chunks/dep-d5cc8b5d.mjs';
import '../../_chunks/dep-22c04ae0.mjs';
import '../../_chunks/dep-2dead3b8.mjs';
import '../../_chunks/dep-706c37a3.mjs';
import '../../_chunks/dep-a053ff3d.mjs';
import '../../_chunks/dep-65c48aa3.mjs';
import '../../_chunks/dep-a42b199e.mjs';
import '../../_chunks/dep-786a7628.mjs';
import '../../_chunks/dep-441fa01f.mjs';
import '../../_chunks/dep-c3f9042a.mjs';
import '../../_chunks/dep-bfe0dcb6.mjs';
import '../../_chunks/dep-0126dffd.mjs';
import '../../_chunks/dep-82bdd07b.mjs';
import '../../_chunks/dep-9b1e7043.mjs';
import '../../_common/js/log/index.mjs';
import '../../_common/js/log/log.mjs';

var PARTIAL_MAP = {
  first: "start",
  second: "end"
};
function useRangeValue(props) {
  var _toRefs = toRefs(props),
    valueFromProps = _toRefs.value,
    modelValue = _toRefs.modelValue;
  var _useVModel = useVModel(valueFromProps, modelValue, props.defaultValue, props.onChange),
    _useVModel2 = _slicedToArray(_useVModel, 2),
    value = _useVModel2[0],
    onChange = _useVModel2[1];
  var formatRef = computed(function () {
    return getDefaultFormat({
      mode: props.mode,
      format: props.format,
      enableTimePicker: props.enableTimePicker
    });
  });
  if (props.enableTimePicker) {
    if (!extractTimeFormat(formatRef.value.format)) console.error("format: ".concat(formatRef.value.format, " \u4E0D\u89C4\u8303\uFF0C\u5305\u542B\u65F6\u95F4\u9009\u62E9\u5FC5\u987B\u8981\u6709\u65F6\u95F4\u683C\u5F0F\u5316 HH:mm:ss"));
  }
  if (!isArray_1(value.value)) {
    console.error("typeof value: ".concat(value.value, " must be Array!"));
  } else if (!isValidDate(value.value, formatRef.value.format)) {
    console.error("value: ".concat(value.value, " is invalid dateTime! Check whether the value is consistent with format: ").concat(formatRef.value.format));
  }
  var isFirstValueSelected = ref(false);
  var time = ref(initYearMonthTime({
    value: value.value,
    mode: props.mode,
    format: formatRef.value.format,
    timeFormat: formatRef.value.timeFormat
  }).time);
  var month = ref(initYearMonthTime({
    value: value.value,
    mode: props.mode,
    format: formatRef.value.format,
    enableTimePicker: props.enableTimePicker
  }).month);
  var year = ref(initYearMonthTime({
    value: value.value,
    mode: props.mode,
    format: formatRef.value.format
  }).year);
  var cacheValue = ref(formatDate(value.value, {
    format: formatRef.value.format
  }));
  watchEffect(function () {
    if (!value.value) {
      cacheValue.value = [];
      return;
    }
    if (!isValidDate(value.value, formatRef.value.format)) return;
    cacheValue.value = formatDate(value.value, {
      format: formatRef.value.format
    });
    time.value = formatTime(value.value, formatRef.value.format, formatRef.value.timeFormat, props.defaultTime);
  });
  return {
    year: year,
    month: month,
    value: value,
    time: time,
    isFirstValueSelected: isFirstValueSelected,
    cacheValue: cacheValue,
    onChange: onChange
  };
}

export { PARTIAL_MAP, useRangeValue as default };
//# sourceMappingURL=useRangeValue.mjs.map
