import dayjs from 'dayjs';
import { DateValue, DateRangePickerPartial } from './type';
declare const _default: import("vue").DefineComponent<{
    allowInput: BooleanConstructor;
    cancelRangeSelectLimit: BooleanConstructor;
    clearable: BooleanConstructor;
    defaultTime: {
        type: import("vue").PropType<string[]>;
        default: () => string[];
    };
    disableDate: {
        type: import("vue").PropType<import("./type").DisableRangeDate>;
    };
    disabled: BooleanConstructor;
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: number): boolean;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    mode: {
        type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
        default: "month" | "year" | "quarter" | "week" | "date";
        validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
    };
    panelPreselection: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: import("vue").PropType<string | string[]>;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    presets: {
        type: import("vue").PropType<import("./type").PresetRange>;
    };
    presetsPlacement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
        default: "left" | "top" | "bottom" | "right";
        validator(val: "left" | "top" | "bottom" | "right"): boolean;
    };
    rangeInputProps: {
        type: import("vue").PropType<import("../range-input").TdRangeInputProps>;
    };
    separator: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: import("vue").PropType<import("..").SizeEnum>;
        default: import("..").SizeEnum;
        validator(val: import("..").SizeEnum): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    timePickerProps: {
        type: import("vue").PropType<import("..").TdTimePickerProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").DateRangeValue>;
        default: import("./type").DateRangeValue;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").DateRangeValue>;
        default: import("./type").DateRangeValue;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").DateRangeValue>;
        default: () => import("./type").DateRangeValue;
    };
    valueType: {
        type: import("vue").PropType<"YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS">;
        validator(val: "YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS"): boolean;
    };
    onBlur: import("vue").PropType<(context: {
        value: import("./type").DateRangeValue;
        partial: DateRangePickerPartial;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").DateRangeValue, context: {
        dayjsValue?: dayjs.Dayjs[];
        trigger?: import("./type").DatePickerTriggerSource;
    }) => void>;
    onConfirm: import("vue").PropType<(context: {
        date: Date[];
        e: MouseEvent;
        partial: DateRangePickerPartial;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        value: import("./type").DateRangeValue;
        partial: DateRangePickerPartial;
        e: FocusEvent;
    }) => void>;
    onInput: import("vue").PropType<(context: {
        input: string;
        value: import("./type").DateRangeValue;
        partial: DateRangePickerPartial;
        e: InputEvent;
    }) => void>;
    onPick: import("vue").PropType<(value: DateValue, context: import("./type").PickContext) => void>;
    onPresetClick: import("vue").PropType<(context: {
        preset: import("./type").PresetDate;
        e: MouseEvent;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    allowInput: BooleanConstructor;
    cancelRangeSelectLimit: BooleanConstructor;
    clearable: BooleanConstructor;
    defaultTime: {
        type: import("vue").PropType<string[]>;
        default: () => string[];
    };
    disableDate: {
        type: import("vue").PropType<import("./type").DisableRangeDate>;
    };
    disabled: BooleanConstructor;
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: number): boolean;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    mode: {
        type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
        default: "month" | "year" | "quarter" | "week" | "date";
        validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
    };
    panelPreselection: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: import("vue").PropType<string | string[]>;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    presets: {
        type: import("vue").PropType<import("./type").PresetRange>;
    };
    presetsPlacement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
        default: "left" | "top" | "bottom" | "right";
        validator(val: "left" | "top" | "bottom" | "right"): boolean;
    };
    rangeInputProps: {
        type: import("vue").PropType<import("../range-input").TdRangeInputProps>;
    };
    separator: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: import("vue").PropType<import("..").SizeEnum>;
        default: import("..").SizeEnum;
        validator(val: import("..").SizeEnum): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    timePickerProps: {
        type: import("vue").PropType<import("..").TdTimePickerProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").DateRangeValue>;
        default: import("./type").DateRangeValue;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").DateRangeValue>;
        default: import("./type").DateRangeValue;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").DateRangeValue>;
        default: () => import("./type").DateRangeValue;
    };
    valueType: {
        type: import("vue").PropType<"YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS">;
        validator(val: "YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS"): boolean;
    };
    onBlur: import("vue").PropType<(context: {
        value: import("./type").DateRangeValue;
        partial: DateRangePickerPartial;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").DateRangeValue, context: {
        dayjsValue?: dayjs.Dayjs[];
        trigger?: import("./type").DatePickerTriggerSource;
    }) => void>;
    onConfirm: import("vue").PropType<(context: {
        date: Date[];
        e: MouseEvent;
        partial: DateRangePickerPartial;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        value: import("./type").DateRangeValue;
        partial: DateRangePickerPartial;
        e: FocusEvent;
    }) => void>;
    onInput: import("vue").PropType<(context: {
        input: string;
        value: import("./type").DateRangeValue;
        partial: DateRangePickerPartial;
        e: InputEvent;
    }) => void>;
    onPick: import("vue").PropType<(value: DateValue, context: import("./type").PickContext) => void>;
    onPresetClick: import("vue").PropType<(context: {
        preset: import("./type").PresetDate;
        e: MouseEvent;
    }) => void>;
}>>, {
    value: import("./type").DateRangeValue;
    disabled: boolean;
    size: import("..").SizeEnum;
    status: "error" | "default" | "success" | "warning";
    mode: "month" | "year" | "quarter" | "week" | "date";
    separator: string;
    format: string;
    modelValue: import("./type").DateRangeValue;
    defaultValue: import("./type").DateRangeValue;
    clearable: boolean;
    allowInput: boolean;
    enableTimePicker: boolean;
    presetsPlacement: "left" | "top" | "bottom" | "right";
    defaultTime: string[];
    panelPreselection: boolean;
    cancelRangeSelectLimit: boolean;
}, {}>;
export default _default;
