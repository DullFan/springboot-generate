import { PropType } from 'vue';
import { UploadDragEvents } from '../hooks/useDrag';
import { CommonDisplayFileProps } from '../interface';
import { TdUploadProps } from '../type';
export interface CustomFileProps extends CommonDisplayFileProps {
    dragEvents: UploadDragEvents;
    draggable?: boolean;
    dragContent?: TdUploadProps['dragContent'];
    trigger?: TdUploadProps['trigger'];
    triggerUpload?: (e: MouseEvent) => void;
    childrenNode?: any;
}
declare const _default: import("vue").DefineComponent<{
    dragEvents: PropType<UploadDragEvents>;
    draggable: BooleanConstructor;
    dragContent: PropType<((h: typeof import("vue").h) => import("../..").SlotReturnValue) | ((h: typeof import("vue").h, props: import("../type").TriggerContext) => import("../..").SlotReturnValue)>;
    trigger: PropType<(h: typeof import("vue").h, props: import("../type").TriggerContext) => import("../..").SlotReturnValue>;
    triggerUpload: PropType<(e: MouseEvent) => void>;
    childrenNode: PropType<any>;
    accept: StringConstructor;
    files: PropType<import("../type").UploadFile[]>;
    toUploadFiles: PropType<import("../type").UploadFile[]>;
    displayFiles: PropType<import("../type").UploadFile[]>;
    theme: PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
    abridgeName: PropType<number[]>;
    placeholder: StringConstructor;
    classPrefix: StringConstructor;
    tips: (FunctionConstructor | StringConstructor)[];
    status: PropType<"error" | "default" | "success" | "warning">;
    locale: PropType<import("../..").UploadConfig>;
    sizeOverLimitMessage: StringConstructor;
    autoUpload: BooleanConstructor;
    uploadPastedFiles: BooleanConstructor;
    onPasteFileChange: PropType<(payload: ClipboardEvent) => void>;
    disabled: BooleanConstructor;
    uploading: BooleanConstructor;
    tipsClasses: PropType<string>;
    errorClasses: PropType<string[]>;
    placeholderClass: PropType<string>;
    showUploadProgress: BooleanConstructor;
    default: PropType<(h: typeof import("vue").h) => import("../..").SlotReturnValue>;
    fileListDisplay: PropType<(h: typeof import("vue").h, props: {
        files: import("../type").UploadFile[];
        dragEvents?: import("../..").UploadDisplayDragEvents;
    }) => import("../..").SlotReturnValue>;
    onRemove: PropType<(p: import("../type").UploadRemoveContext) => void>;
    imageViewerProps: PropType<import("../..").TdImageViewerProps>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    dragEvents: PropType<UploadDragEvents>;
    draggable: BooleanConstructor;
    dragContent: PropType<((h: typeof import("vue").h) => import("../..").SlotReturnValue) | ((h: typeof import("vue").h, props: import("../type").TriggerContext) => import("../..").SlotReturnValue)>;
    trigger: PropType<(h: typeof import("vue").h, props: import("../type").TriggerContext) => import("../..").SlotReturnValue>;
    triggerUpload: PropType<(e: MouseEvent) => void>;
    childrenNode: PropType<any>;
    accept: StringConstructor;
    files: PropType<import("../type").UploadFile[]>;
    toUploadFiles: PropType<import("../type").UploadFile[]>;
    displayFiles: PropType<import("../type").UploadFile[]>;
    theme: PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
    abridgeName: PropType<number[]>;
    placeholder: StringConstructor;
    classPrefix: StringConstructor;
    tips: (FunctionConstructor | StringConstructor)[];
    status: PropType<"error" | "default" | "success" | "warning">;
    locale: PropType<import("../..").UploadConfig>;
    sizeOverLimitMessage: StringConstructor;
    autoUpload: BooleanConstructor;
    uploadPastedFiles: BooleanConstructor;
    onPasteFileChange: PropType<(payload: ClipboardEvent) => void>;
    disabled: BooleanConstructor;
    uploading: BooleanConstructor;
    tipsClasses: PropType<string>;
    errorClasses: PropType<string[]>;
    placeholderClass: PropType<string>;
    showUploadProgress: BooleanConstructor;
    default: PropType<(h: typeof import("vue").h) => import("../..").SlotReturnValue>;
    fileListDisplay: PropType<(h: typeof import("vue").h, props: {
        files: import("../type").UploadFile[];
        dragEvents?: import("../..").UploadDisplayDragEvents;
    }) => import("../..").SlotReturnValue>;
    onRemove: PropType<(p: import("../type").UploadRemoveContext) => void>;
    imageViewerProps: PropType<import("../..").TdImageViewerProps>;
}>>, {
    draggable: boolean;
    disabled: boolean;
    autoUpload: boolean;
    uploadPastedFiles: boolean;
    uploading: boolean;
    showUploadProgress: boolean;
}, {}>;
export default _default;
