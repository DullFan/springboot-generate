import { TdRowProps, TdColProps } from './type';
import './style';
export * from './type';
export declare type ColProps = TdColProps;
export declare type RowProps = TdRowProps;
export declare const Row: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: import("vue").PropType<"center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline">;
            default: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
            validator(val: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline"): boolean;
        };
        gutter: {
            type: import("vue").PropType<number | import("./type").GutterObject | (number | import("./type").GutterObject)[]>;
            default: number | import("./type").GutterObject | (number | import("./type").GutterObject)[];
        };
        justify: {
            type: import("vue").PropType<"center" | "end" | "start" | "space-around" | "space-between">;
            default: "center" | "end" | "start" | "space-around" | "space-between";
            validator(val: "center" | "end" | "start" | "space-around" | "space-between"): boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: import("vue").PropType<"center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline">;
            default: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
            validator(val: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline"): boolean;
        };
        gutter: {
            type: import("vue").PropType<number | import("./type").GutterObject | (number | import("./type").GutterObject)[]>;
            default: number | import("./type").GutterObject | (number | import("./type").GutterObject)[];
        };
        justify: {
            type: import("vue").PropType<"center" | "end" | "start" | "space-around" | "space-between">;
            default: "center" | "end" | "start" | "space-around" | "space-between";
            validator(val: "center" | "end" | "start" | "space-around" | "space-between"): boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
    }>>, {
        tag: string;
        justify: "center" | "end" | "start" | "space-around" | "space-between";
        align: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
        gutter: number | import("./type").GutterObject | (number | import("./type").GutterObject)[];
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: import("vue").PropType<"center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline">;
            default: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
            validator(val: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline"): boolean;
        };
        gutter: {
            type: import("vue").PropType<number | import("./type").GutterObject | (number | import("./type").GutterObject)[]>;
            default: number | import("./type").GutterObject | (number | import("./type").GutterObject)[];
        };
        justify: {
            type: import("vue").PropType<"center" | "end" | "start" | "space-around" | "space-between">;
            default: "center" | "end" | "start" | "space-around" | "space-between";
            validator(val: "center" | "end" | "start" | "space-around" | "space-between"): boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        tag: string;
        justify: "center" | "end" | "start" | "space-around" | "space-between";
        align: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
        gutter: number | import("./type").GutterObject | (number | import("./type").GutterObject)[];
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    align: {
        type: import("vue").PropType<"center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline">;
        default: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
        validator(val: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline"): boolean;
    };
    gutter: {
        type: import("vue").PropType<number | import("./type").GutterObject | (number | import("./type").GutterObject)[]>;
        default: number | import("./type").GutterObject | (number | import("./type").GutterObject)[];
    };
    justify: {
        type: import("vue").PropType<"center" | "end" | "start" | "space-around" | "space-between">;
        default: "center" | "end" | "start" | "space-around" | "space-between";
        validator(val: "center" | "end" | "start" | "space-around" | "space-between"): boolean;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    tag: string;
    justify: "center" | "end" | "start" | "space-around" | "space-between";
    align: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
    gutter: number | import("./type").GutterObject | (number | import("./type").GutterObject)[];
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const Col: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        flex: {
            type: import("vue").PropType<string | number>;
        };
        lg: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        md: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        offset: {
            type: NumberConstructor;
            default: number;
        };
        order: {
            type: NumberConstructor;
            default: number;
        };
        pull: {
            type: NumberConstructor;
            default: number;
        };
        push: {
            type: NumberConstructor;
            default: number;
        };
        sm: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        span: {
            type: NumberConstructor;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        xl: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        xs: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        xxl: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        flex: {
            type: import("vue").PropType<string | number>;
        };
        lg: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        md: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        offset: {
            type: NumberConstructor;
            default: number;
        };
        order: {
            type: NumberConstructor;
            default: number;
        };
        pull: {
            type: NumberConstructor;
            default: number;
        };
        push: {
            type: NumberConstructor;
            default: number;
        };
        sm: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        span: {
            type: NumberConstructor;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        xl: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        xs: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        xxl: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
    }>>, {
        push: number;
        offset: number;
        order: number;
        tag: string;
        pull: number;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        flex: {
            type: import("vue").PropType<string | number>;
        };
        lg: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        md: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        offset: {
            type: NumberConstructor;
            default: number;
        };
        order: {
            type: NumberConstructor;
            default: number;
        };
        pull: {
            type: NumberConstructor;
            default: number;
        };
        push: {
            type: NumberConstructor;
            default: number;
        };
        sm: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        span: {
            type: NumberConstructor;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        xl: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        xs: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        xxl: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        push: number;
        offset: number;
        order: number;
        tag: string;
        pull: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    flex: {
        type: import("vue").PropType<string | number>;
    };
    lg: {
        type: import("vue").PropType<number | import("./type").BaseColProps>;
    };
    md: {
        type: import("vue").PropType<number | import("./type").BaseColProps>;
    };
    offset: {
        type: NumberConstructor;
        default: number;
    };
    order: {
        type: NumberConstructor;
        default: number;
    };
    pull: {
        type: NumberConstructor;
        default: number;
    };
    push: {
        type: NumberConstructor;
        default: number;
    };
    sm: {
        type: import("vue").PropType<number | import("./type").BaseColProps>;
    };
    span: {
        type: NumberConstructor;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    xl: {
        type: import("vue").PropType<number | import("./type").BaseColProps>;
    };
    xs: {
        type: import("vue").PropType<number | import("./type").BaseColProps>;
    };
    xxl: {
        type: import("vue").PropType<number | import("./type").BaseColProps>;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    push: number;
    offset: number;
    order: number;
    tag: string;
    pull: number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
declare const _default: {
    Row: {
        new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
            align: {
                type: import("vue").PropType<"center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline">;
                default: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
                validator(val: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline"): boolean;
            };
            gutter: {
                type: import("vue").PropType<number | import("./type").GutterObject | (number | import("./type").GutterObject)[]>;
                default: number | import("./type").GutterObject | (number | import("./type").GutterObject)[];
            };
            justify: {
                type: import("vue").PropType<"center" | "end" | "start" | "space-around" | "space-between">;
                default: "center" | "end" | "start" | "space-around" | "space-between";
                validator(val: "center" | "end" | "start" | "space-around" | "space-between"): boolean;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            align: {
                type: import("vue").PropType<"center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline">;
                default: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
                validator(val: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline"): boolean;
            };
            gutter: {
                type: import("vue").PropType<number | import("./type").GutterObject | (number | import("./type").GutterObject)[]>;
                default: number | import("./type").GutterObject | (number | import("./type").GutterObject)[];
            };
            justify: {
                type: import("vue").PropType<"center" | "end" | "start" | "space-around" | "space-between">;
                default: "center" | "end" | "start" | "space-around" | "space-between";
                validator(val: "center" | "end" | "start" | "space-around" | "space-between"): boolean;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
        }>>, {
            tag: string;
            justify: "center" | "end" | "start" | "space-around" | "space-between";
            align: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
            gutter: number | import("./type").GutterObject | (number | import("./type").GutterObject)[];
        }, true, {}, {}, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<import("vue").ExtractPropTypes<{
            align: {
                type: import("vue").PropType<"center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline">;
                default: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
                validator(val: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline"): boolean;
            };
            gutter: {
                type: import("vue").PropType<number | import("./type").GutterObject | (number | import("./type").GutterObject)[]>;
                default: number | import("./type").GutterObject | (number | import("./type").GutterObject)[];
            };
            justify: {
                type: import("vue").PropType<"center" | "end" | "start" | "space-around" | "space-between">;
                default: "center" | "end" | "start" | "space-around" | "space-between";
                validator(val: "center" | "end" | "start" | "space-around" | "space-between"): boolean;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
        }>>, () => JSX.Element, {}, {}, {}, {
            tag: string;
            justify: "center" | "end" | "start" | "space-around" | "space-between";
            align: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
            gutter: number | import("./type").GutterObject | (number | import("./type").GutterObject)[];
        }>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: import("vue").PropType<"center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline">;
            default: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
            validator(val: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline"): boolean;
        };
        gutter: {
            type: import("vue").PropType<number | import("./type").GutterObject | (number | import("./type").GutterObject)[]>;
            default: number | import("./type").GutterObject | (number | import("./type").GutterObject)[];
        };
        justify: {
            type: import("vue").PropType<"center" | "end" | "start" | "space-around" | "space-between">;
            default: "center" | "end" | "start" | "space-around" | "space-between";
            validator(val: "center" | "end" | "start" | "space-around" | "space-between"): boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
        tag: string;
        justify: "center" | "end" | "start" | "space-around" | "space-between";
        align: "center" | "end" | "start" | "top" | "bottom" | "middle" | "stretch" | "baseline";
        gutter: number | import("./type").GutterObject | (number | import("./type").GutterObject)[];
    }, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
    Col: {
        new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
            flex: {
                type: import("vue").PropType<string | number>;
            };
            lg: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            md: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            offset: {
                type: NumberConstructor;
                default: number;
            };
            order: {
                type: NumberConstructor;
                default: number;
            };
            pull: {
                type: NumberConstructor;
                default: number;
            };
            push: {
                type: NumberConstructor;
                default: number;
            };
            sm: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            span: {
                type: NumberConstructor;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            xl: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            xs: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            xxl: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            flex: {
                type: import("vue").PropType<string | number>;
            };
            lg: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            md: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            offset: {
                type: NumberConstructor;
                default: number;
            };
            order: {
                type: NumberConstructor;
                default: number;
            };
            pull: {
                type: NumberConstructor;
                default: number;
            };
            push: {
                type: NumberConstructor;
                default: number;
            };
            sm: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            span: {
                type: NumberConstructor;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            xl: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            xs: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            xxl: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
        }>>, {
            push: number;
            offset: number;
            order: number;
            tag: string;
            pull: number;
        }, true, {}, {}, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<import("vue").ExtractPropTypes<{
            flex: {
                type: import("vue").PropType<string | number>;
            };
            lg: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            md: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            offset: {
                type: NumberConstructor;
                default: number;
            };
            order: {
                type: NumberConstructor;
                default: number;
            };
            pull: {
                type: NumberConstructor;
                default: number;
            };
            push: {
                type: NumberConstructor;
                default: number;
            };
            sm: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            span: {
                type: NumberConstructor;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            xl: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            xs: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
            xxl: {
                type: import("vue").PropType<number | import("./type").BaseColProps>;
            };
        }>>, () => JSX.Element, {}, {}, {}, {
            push: number;
            offset: number;
            order: number;
            tag: string;
            pull: number;
        }>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
        flex: {
            type: import("vue").PropType<string | number>;
        };
        lg: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        md: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        offset: {
            type: NumberConstructor;
            default: number;
        };
        order: {
            type: NumberConstructor;
            default: number;
        };
        pull: {
            type: NumberConstructor;
            default: number;
        };
        push: {
            type: NumberConstructor;
            default: number;
        };
        sm: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        span: {
            type: NumberConstructor;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        xl: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        xs: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
        xxl: {
            type: import("vue").PropType<number | import("./type").BaseColProps>;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
        push: number;
        offset: number;
        order: number;
        tag: string;
        pull: number;
    }, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
};
export default _default;
