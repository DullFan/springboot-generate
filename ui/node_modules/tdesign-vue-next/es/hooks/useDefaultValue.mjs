/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

import { getCurrentInstance, ref } from 'vue';
import { k as kebabCase_1 } from '../_chunks/dep-dab87894.mjs';
import '../_chunks/dep-ad0f5c12.mjs';
import '../_chunks/dep-7d8aa418.mjs';
import '../_chunks/dep-056e3d49.mjs';
import '../_chunks/dep-de0d9668.mjs';
import '../_chunks/dep-8a6a0750.mjs';
import '../_chunks/dep-4ef63f67.mjs';
import '../_chunks/dep-f5bde8c1.mjs';
import '../_chunks/dep-8e0cf610.mjs';
import '../_chunks/dep-c23362d5.mjs';

function useDefaultValue(value, defaultValue, onChange, propsName) {
  var _getCurrentInstance = getCurrentInstance(),
    emit = _getCurrentInstance.emit,
    vnode = _getCurrentInstance.vnode;
  var internalValue = ref();
  var vProps = vnode.props || {};
  var isVMP = Object.prototype.hasOwnProperty.call(vProps, propsName) || Object.prototype.hasOwnProperty.call(vProps, kebabCase_1(propsName));
  if (isVMP) {
    return [value, function (newValue) {
      emit("update:".concat(propsName), newValue);
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      onChange === null || onChange === void 0 || onChange.apply(void 0, [newValue].concat(args));
    }];
  }
  internalValue.value = defaultValue;
  return [internalValue, function (newValue) {
    internalValue.value = newValue;
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    onChange === null || onChange === void 0 || onChange.apply(void 0, [newValue].concat(args));
  }];
}

export { useDefaultValue as default };
//# sourceMappingURL=useDefaultValue.mjs.map
