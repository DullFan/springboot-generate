/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

import { ref, watch } from 'vue';
import { usePrefixClass } from '../../hooks/useConfig.mjs';
import { getNewMultipleValue } from '../helper.mjs';
import '../../config-provider/useConfig.mjs';
import '../../_chunks/dep-706c37a3.mjs';
import '../../_chunks/dep-ad0f5c12.mjs';
import '../../_chunks/dep-de0d9668.mjs';
import '../../_chunks/dep-8a6a0750.mjs';
import '../../_chunks/dep-a053ff3d.mjs';
import '../../_chunks/dep-65c48aa3.mjs';
import '../../_chunks/dep-70894ccf.mjs';
import '../../_chunks/dep-12db5b5b.mjs';
import '../../_chunks/dep-b1040349.mjs';
import '../../_chunks/dep-203afd59.mjs';
import '../../_chunks/dep-48235a7f.mjs';
import '../../_chunks/dep-82bdd07b.mjs';
import '../../_chunks/dep-bfe0dcb6.mjs';
import '../../_chunks/dep-1a2263f9.mjs';
import '../../_chunks/dep-0126dffd.mjs';
import '../../_chunks/dep-c23362d5.mjs';
import '../../_chunks/dep-64862a5a.mjs';
import '../../_chunks/dep-e8c6972d.mjs';
import '../../_chunks/dep-b15f1e4a.mjs';
import '../../_chunks/dep-c6ed1157.mjs';
import '../../_chunks/dep-4ef63f67.mjs';
import '../../_chunks/dep-f5bde8c1.mjs';
import '../../_chunks/dep-9b1e7043.mjs';
import '../../_chunks/dep-f8f5e5fe.mjs';
import '../../_chunks/dep-5c0cf5f9.mjs';
import '../../_chunks/dep-45a70a53.mjs';
import '../../_chunks/dep-d5cc8b5d.mjs';
import '../../_chunks/dep-88e27495.mjs';
import '../../_chunks/dep-5b74d046.mjs';
import '../../_chunks/dep-551a93fd.mjs';
import '../../_chunks/dep-672a56f9.mjs';
import '../../_chunks/dep-8c0df173.mjs';
import '../../_chunks/dep-c3f9042a.mjs';
import '../../_common/js/global-config/default-config.mjs';
import '../../_common/js/global-config/locale/zh_CN.mjs';
import '../../_chunks/dep-841260ab.mjs';
import '../../_chunks/dep-22c04ae0.mjs';
import '../../_chunks/dep-886b81c5.mjs';
import '../../config-provider/type.mjs';

function useKeyboardControl(_ref) {
  var displayOptions = _ref.displayOptions,
    optionsList = _ref.optionsList,
    innerPopupVisible = _ref.innerPopupVisible,
    setInnerPopupVisible = _ref.setInnerPopupVisible,
    selectPanelRef = _ref.selectPanelRef,
    isFilterable = _ref.isFilterable,
    getSelectedOptions = _ref.getSelectedOptions,
    setInnerValue = _ref.setInnerValue,
    innerValue = _ref.innerValue,
    popupContentRef = _ref.popupContentRef,
    multiple = _ref.multiple,
    max = _ref.max;
  var hoverIndex = ref(-1);
  var filteredOptions = ref([]);
  var virtualFilteredOptions = ref([]);
  var classPrefix = usePrefixClass();
  var handleKeyDown = function handleKeyDown(e) {
    var _optionsList$value$ne, _optionsList$value$ne2;
    var optionsListLength = displayOptions.value.length;
    var newIndex = hoverIndex.value;
    switch (e.code) {
      case "ArrowUp":
        e.preventDefault();
        if (hoverIndex.value === -1) {
          newIndex = 0;
        } else if (hoverIndex.value === 0 || hoverIndex.value > displayOptions.value.length - 1) {
          newIndex = optionsListLength - 1;
        } else {
          newIndex--;
        }
        if ((_optionsList$value$ne = optionsList.value[newIndex]) !== null && _optionsList$value$ne !== void 0 && _optionsList$value$ne.disabled) {
          newIndex--;
        }
        hoverIndex.value = newIndex;
        break;
      case "ArrowDown":
        e.preventDefault();
        if (hoverIndex.value === -1 || hoverIndex.value >= optionsListLength - 1) {
          newIndex = 0;
        } else {
          newIndex++;
        }
        if ((_optionsList$value$ne2 = optionsList.value[newIndex]) !== null && _optionsList$value$ne2 !== void 0 && _optionsList$value$ne2.disabled) {
          newIndex++;
        }
        hoverIndex.value = newIndex;
        break;
      case "Enter":
        if (hoverIndex.value === -1) break;
        var finalOptions = selectPanelRef.value.isVirtual && isFilterable.value && virtualFilteredOptions.value.length ? virtualFilteredOptions.value : filteredOptions.value;
        if (!finalOptions.length) finalOptions = optionsList.value;
        if (!innerPopupVisible.value) {
          setInnerPopupVisible(true, {
            e: e
          });
          break;
        }
        if (!multiple) {
          var selectedOptions = getSelectedOptions(finalOptions[hoverIndex.value].value);
          setInnerValue(finalOptions[hoverIndex.value].value, {
            option: selectedOptions === null || selectedOptions === void 0 ? void 0 : selectedOptions[0],
            selectedOptions: getSelectedOptions(finalOptions[hoverIndex.value].value),
            trigger: "check",
            e: e
          });
          setInnerPopupVisible(false, {
            e: e
          });
        } else {
          var _finalOptions$hoverIn;
          if (hoverIndex.value === -1) return;
          var optionValue = (_finalOptions$hoverIn = finalOptions[hoverIndex.value]) === null || _finalOptions$hoverIn === void 0 ? void 0 : _finalOptions$hoverIn.value;
          if (!optionValue) return;
          var newValue = getNewMultipleValue(innerValue.value, optionValue);
          if (max > 0 && newValue.value.length > max) return;
          var _selectedOptions = getSelectedOptions(newValue.value);
          setInnerValue(newValue.value, {
            option: _selectedOptions.find(function (v) {
              return v.value == optionValue;
            }),
            selectedOptions: _selectedOptions,
            trigger: newValue.isCheck ? "check" : "uncheck",
            e: e
          });
        }
        break;
      case "Escape":
        setInnerPopupVisible(false, {
          e: e
        });
        break;
    }
  };
  watch(innerPopupVisible, function (value) {
    if (value) {
      hoverIndex.value = -1;
      virtualFilteredOptions.value = [];
      filteredOptions.value = [];
    }
  });
  watch(hoverIndex, function (index) {
    var _selectPanelRef$value;
    var optionHeight = (_selectPanelRef$value = selectPanelRef.value) === null || _selectPanelRef$value === void 0 || (_selectPanelRef$value = _selectPanelRef$value.innerRef) === null || _selectPanelRef$value === void 0 ? void 0 : _selectPanelRef$value.querySelector(".".concat(classPrefix.value, "-select-option")).clientHeight;
    var scrollHeight = optionHeight * index;
    popupContentRef.value.scrollTo({
      top: scrollHeight,
      behavior: "smooth"
    });
  });
  return {
    hoverIndex: hoverIndex,
    handleKeyDown: handleKeyDown,
    virtualFilteredOptions: virtualFilteredOptions,
    filteredOptions: filteredOptions
  };
}

export { useKeyboardControl as default };
//# sourceMappingURL=useKeyboardControl.mjs.map
