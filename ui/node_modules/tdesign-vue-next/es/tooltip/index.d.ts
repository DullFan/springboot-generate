import { TdTooltipProps } from './type';
import './style';
export * from './type';
export declare type TooltipProps = TdTooltipProps;
export declare const Tooltip: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        delay: {
            type: NumberConstructor;
        };
        destroyOnClose: {
            type: BooleanConstructor;
            default: boolean;
        };
        duration: {
            type: NumberConstructor;
        };
        placement: {
            type: import("vue").PropType<import("..").PopupPlacement | "mouse">;
            default: string;
        };
        showArrow: {
            type: BooleanConstructor;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<"default" | "success" | "light" | "primary" | "warning" | "danger">;
            default: "default" | "success" | "light" | "primary" | "warning" | "danger";
            validator(val: "default" | "success" | "light" | "primary" | "warning" | "danger"): boolean;
        };
        attach: {
            type: import("vue").PropType<import("..").AttachNode>;
            default: import("..").AttachNode;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        hideEmptyPopup: BooleanConstructor;
        overlayClassName: {
            type: import("vue").PropType<import("..").ClassName>;
        };
        overlayInnerClassName: {
            type: import("vue").PropType<import("..").ClassName>;
        };
        overlayInnerStyle: {
            type: import("vue").PropType<import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles)>;
        };
        overlayStyle: {
            type: import("vue").PropType<import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles)>;
        };
        popperOptions: {
            type: import("vue").PropType<object>;
        };
        trigger: {
            type: import("vue").PropType<"click" | "focus" | "mousedown" | "context-menu" | "hover">;
            default: "click" | "focus" | "mousedown" | "context-menu" | "hover";
            validator(val: "click" | "focus" | "mousedown" | "context-menu" | "hover"): boolean;
        };
        triggerElement: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        visible: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultVisible: BooleanConstructor;
        zIndex: {
            type: NumberConstructor;
        };
        onOverlayClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onScroll: import("vue").PropType<(context: {
            e: WheelEvent;
        }) => void>;
        onScrollToBottom: import("vue").PropType<(context: {
            e: WheelEvent;
        }) => void>;
        onVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
    }>>, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        delay: {
            type: NumberConstructor;
        };
        destroyOnClose: {
            type: BooleanConstructor;
            default: boolean;
        };
        duration: {
            type: NumberConstructor;
        };
        placement: {
            type: import("vue").PropType<import("..").PopupPlacement | "mouse">;
            default: string;
        };
        showArrow: {
            type: BooleanConstructor;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<"default" | "success" | "light" | "primary" | "warning" | "danger">;
            default: "default" | "success" | "light" | "primary" | "warning" | "danger";
            validator(val: "default" | "success" | "light" | "primary" | "warning" | "danger"): boolean;
        };
        attach: {
            type: import("vue").PropType<import("..").AttachNode>;
            default: import("..").AttachNode;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        hideEmptyPopup: BooleanConstructor;
        overlayClassName: {
            type: import("vue").PropType<import("..").ClassName>;
        };
        overlayInnerClassName: {
            type: import("vue").PropType<import("..").ClassName>;
        };
        overlayInnerStyle: {
            type: import("vue").PropType<import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles)>;
        };
        overlayStyle: {
            type: import("vue").PropType<import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles)>;
        };
        popperOptions: {
            type: import("vue").PropType<object>;
        };
        trigger: {
            type: import("vue").PropType<"click" | "focus" | "mousedown" | "context-menu" | "hover">;
            default: "click" | "focus" | "mousedown" | "context-menu" | "hover";
            validator(val: "click" | "focus" | "mousedown" | "context-menu" | "hover"): boolean;
        };
        triggerElement: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        visible: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultVisible: BooleanConstructor;
        zIndex: {
            type: NumberConstructor;
        };
        onOverlayClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onScroll: import("vue").PropType<(context: {
            e: WheelEvent;
        }) => void>;
        onScrollToBottom: import("vue").PropType<(context: {
            e: WheelEvent;
        }) => void>;
        onVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
    }>>, {
        visible: boolean;
        disabled: boolean;
        trigger: "click" | "focus" | "mousedown" | "context-menu" | "hover";
        modelValue: boolean;
        theme: "default" | "success" | "light" | "primary" | "warning" | "danger";
        placement: import("..").PopupPlacement | "mouse";
        attach: import("..").AttachNode;
        destroyOnClose: boolean;
        hideEmptyPopup: boolean;
        showArrow: boolean;
        defaultVisible: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        delay: {
            type: NumberConstructor;
        };
        destroyOnClose: {
            type: BooleanConstructor;
            default: boolean;
        };
        duration: {
            type: NumberConstructor;
        };
        placement: {
            type: import("vue").PropType<import("..").PopupPlacement | "mouse">;
            default: string;
        };
        showArrow: {
            type: BooleanConstructor;
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<"default" | "success" | "light" | "primary" | "warning" | "danger">;
            default: "default" | "success" | "light" | "primary" | "warning" | "danger";
            validator(val: "default" | "success" | "light" | "primary" | "warning" | "danger"): boolean;
        };
        attach: {
            type: import("vue").PropType<import("..").AttachNode>;
            default: import("..").AttachNode;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        hideEmptyPopup: BooleanConstructor;
        overlayClassName: {
            type: import("vue").PropType<import("..").ClassName>;
        };
        overlayInnerClassName: {
            type: import("vue").PropType<import("..").ClassName>;
        };
        overlayInnerStyle: {
            type: import("vue").PropType<import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles)>;
        };
        overlayStyle: {
            type: import("vue").PropType<import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles)>;
        };
        popperOptions: {
            type: import("vue").PropType<object>;
        };
        trigger: {
            type: import("vue").PropType<"click" | "focus" | "mousedown" | "context-menu" | "hover">;
            default: "click" | "focus" | "mousedown" | "context-menu" | "hover";
            validator(val: "click" | "focus" | "mousedown" | "context-menu" | "hover"): boolean;
        };
        triggerElement: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        visible: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultVisible: BooleanConstructor;
        zIndex: {
            type: NumberConstructor;
        };
        onOverlayClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onScroll: import("vue").PropType<(context: {
            e: WheelEvent;
        }) => void>;
        onScrollToBottom: import("vue").PropType<(context: {
            e: WheelEvent;
        }) => void>;
        onVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
    }>>, () => any, {}, {}, {}, {
        visible: boolean;
        disabled: boolean;
        trigger: "click" | "focus" | "mousedown" | "context-menu" | "hover";
        modelValue: boolean;
        theme: "default" | "success" | "light" | "primary" | "warning" | "danger";
        placement: import("..").PopupPlacement | "mouse";
        attach: import("..").AttachNode;
        destroyOnClose: boolean;
        hideEmptyPopup: boolean;
        showArrow: boolean;
        defaultVisible: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    delay: {
        type: NumberConstructor;
    };
    destroyOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    duration: {
        type: NumberConstructor;
    };
    placement: {
        type: import("vue").PropType<import("..").PopupPlacement | "mouse">;
        default: string;
    };
    showArrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "success" | "light" | "primary" | "warning" | "danger">;
        default: "default" | "success" | "light" | "primary" | "warning" | "danger";
        validator(val: "default" | "success" | "light" | "primary" | "warning" | "danger"): boolean;
    };
    attach: {
        type: import("vue").PropType<import("..").AttachNode>;
        default: import("..").AttachNode;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    hideEmptyPopup: BooleanConstructor;
    overlayClassName: {
        type: import("vue").PropType<import("..").ClassName>;
    };
    overlayInnerClassName: {
        type: import("vue").PropType<import("..").ClassName>;
    };
    overlayInnerStyle: {
        type: import("vue").PropType<import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles)>;
    };
    overlayStyle: {
        type: import("vue").PropType<import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles)>;
    };
    popperOptions: {
        type: import("vue").PropType<object>;
    };
    trigger: {
        type: import("vue").PropType<"click" | "focus" | "mousedown" | "context-menu" | "hover">;
        default: "click" | "focus" | "mousedown" | "context-menu" | "hover";
        validator(val: "click" | "focus" | "mousedown" | "context-menu" | "hover"): boolean;
    };
    triggerElement: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onOverlayClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onScroll: import("vue").PropType<(context: {
        e: WheelEvent;
    }) => void>;
    onScrollToBottom: import("vue").PropType<(context: {
        e: WheelEvent;
    }) => void>;
    onVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
}>>, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    visible: boolean;
    disabled: boolean;
    trigger: "click" | "focus" | "mousedown" | "context-menu" | "hover";
    modelValue: boolean;
    theme: "default" | "success" | "light" | "primary" | "warning" | "danger";
    placement: import("..").PopupPlacement | "mouse";
    attach: import("..").AttachNode;
    destroyOnClose: boolean;
    hideEmptyPopup: boolean;
    showArrow: boolean;
    defaultVisible: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Tooltip;
