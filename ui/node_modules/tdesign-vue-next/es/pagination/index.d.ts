import { TdPaginationProps, TdPaginationMiniProps } from './type';
import './style';
export * from './type';
export declare type PaginationProps = TdPaginationProps;
export declare type PaginationMiniProps = TdPaginationMiniProps;
export declare const Pagination: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        current: {
            type: NumberConstructor;
            default: any;
        };
        modelValue: {
            type: NumberConstructor;
            default: any;
        };
        defaultCurrent: {
            type: NumberConstructor;
            default: number;
        };
        disabled: BooleanConstructor;
        foldedMaxPageBtn: {
            type: NumberConstructor;
            default: number;
        };
        maxPageBtn: {
            type: NumberConstructor;
            default: number;
        };
        pageEllipsisMode: {
            type: import("vue").PropType<"mid" | "both-ends">;
            default: "mid" | "both-ends";
            validator(val: "mid" | "both-ends"): boolean;
        };
        pageSize: {
            type: NumberConstructor;
            default: any;
        };
        defaultPageSize: {
            type: NumberConstructor;
            default: number;
        };
        pageSizeOptions: {
            type: import("vue").PropType<(number | {
                label: string;
                value: number;
            })[]>;
            default: () => (number | {
                label: string;
                value: number;
            })[];
        };
        selectProps: {
            type: import("vue").PropType<import("..").SelectProps<import("..").SelectOption>>;
        };
        showFirstAndLastPageBtn: BooleanConstructor;
        showJumper: BooleanConstructor;
        showPageNumber: {
            type: BooleanConstructor;
            default: boolean;
        };
        showPageSize: {
            type: BooleanConstructor;
            default: boolean;
        };
        showPreviousAndNextBtn: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<"small" | "medium">;
            default: "small" | "medium";
            validator(val: "small" | "medium"): boolean;
        };
        theme: {
            type: import("vue").PropType<"default" | "simple">;
            default: "default" | "simple";
            validator(val: "default" | "simple"): boolean;
        };
        total: {
            type: NumberConstructor;
            default: number;
        };
        totalContent: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean;
        };
        onChange: import("vue").PropType<(pageInfo: import("./type").PageInfo) => void>;
        onCurrentChange: import("vue").PropType<(current: number, pageInfo: import("./type").PageInfo) => void>;
        onPageSizeChange: import("vue").PropType<(pageSize: number, pageInfo: import("./type").PageInfo) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        current: {
            type: NumberConstructor;
            default: any;
        };
        modelValue: {
            type: NumberConstructor;
            default: any;
        };
        defaultCurrent: {
            type: NumberConstructor;
            default: number;
        };
        disabled: BooleanConstructor;
        foldedMaxPageBtn: {
            type: NumberConstructor;
            default: number;
        };
        maxPageBtn: {
            type: NumberConstructor;
            default: number;
        };
        pageEllipsisMode: {
            type: import("vue").PropType<"mid" | "both-ends">;
            default: "mid" | "both-ends";
            validator(val: "mid" | "both-ends"): boolean;
        };
        pageSize: {
            type: NumberConstructor;
            default: any;
        };
        defaultPageSize: {
            type: NumberConstructor;
            default: number;
        };
        pageSizeOptions: {
            type: import("vue").PropType<(number | {
                label: string;
                value: number;
            })[]>;
            default: () => (number | {
                label: string;
                value: number;
            })[];
        };
        selectProps: {
            type: import("vue").PropType<import("..").SelectProps<import("..").SelectOption>>;
        };
        showFirstAndLastPageBtn: BooleanConstructor;
        showJumper: BooleanConstructor;
        showPageNumber: {
            type: BooleanConstructor;
            default: boolean;
        };
        showPageSize: {
            type: BooleanConstructor;
            default: boolean;
        };
        showPreviousAndNextBtn: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<"small" | "medium">;
            default: "small" | "medium";
            validator(val: "small" | "medium"): boolean;
        };
        theme: {
            type: import("vue").PropType<"default" | "simple">;
            default: "default" | "simple";
            validator(val: "default" | "simple"): boolean;
        };
        total: {
            type: NumberConstructor;
            default: number;
        };
        totalContent: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean;
        };
        onChange: import("vue").PropType<(pageInfo: import("./type").PageInfo) => void>;
        onCurrentChange: import("vue").PropType<(current: number, pageInfo: import("./type").PageInfo) => void>;
        onPageSizeChange: import("vue").PropType<(pageSize: number, pageInfo: import("./type").PageInfo) => void>;
    }>>, {
        total: number;
        disabled: boolean;
        size: "small" | "medium";
        modelValue: number;
        current: number;
        theme: "default" | "simple";
        pageEllipsisMode: "mid" | "both-ends";
        pageSizeOptions: (number | {
            label: string;
            value: number;
        })[];
        totalContent: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        defaultCurrent: number;
        foldedMaxPageBtn: number;
        maxPageBtn: number;
        pageSize: number;
        defaultPageSize: number;
        showFirstAndLastPageBtn: boolean;
        showJumper: boolean;
        showPageNumber: boolean;
        showPageSize: boolean;
        showPreviousAndNextBtn: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        current: {
            type: NumberConstructor;
            default: any;
        };
        modelValue: {
            type: NumberConstructor;
            default: any;
        };
        defaultCurrent: {
            type: NumberConstructor;
            default: number;
        };
        disabled: BooleanConstructor;
        foldedMaxPageBtn: {
            type: NumberConstructor;
            default: number;
        };
        maxPageBtn: {
            type: NumberConstructor;
            default: number;
        };
        pageEllipsisMode: {
            type: import("vue").PropType<"mid" | "both-ends">;
            default: "mid" | "both-ends";
            validator(val: "mid" | "both-ends"): boolean;
        };
        pageSize: {
            type: NumberConstructor;
            default: any;
        };
        defaultPageSize: {
            type: NumberConstructor;
            default: number;
        };
        pageSizeOptions: {
            type: import("vue").PropType<(number | {
                label: string;
                value: number;
            })[]>;
            default: () => (number | {
                label: string;
                value: number;
            })[];
        };
        selectProps: {
            type: import("vue").PropType<import("..").SelectProps<import("..").SelectOption>>;
        };
        showFirstAndLastPageBtn: BooleanConstructor;
        showJumper: BooleanConstructor;
        showPageNumber: {
            type: BooleanConstructor;
            default: boolean;
        };
        showPageSize: {
            type: BooleanConstructor;
            default: boolean;
        };
        showPreviousAndNextBtn: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<"small" | "medium">;
            default: "small" | "medium";
            validator(val: "small" | "medium"): boolean;
        };
        theme: {
            type: import("vue").PropType<"default" | "simple">;
            default: "default" | "simple";
            validator(val: "default" | "simple"): boolean;
        };
        total: {
            type: NumberConstructor;
            default: number;
        };
        totalContent: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean;
        };
        onChange: import("vue").PropType<(pageInfo: import("./type").PageInfo) => void>;
        onCurrentChange: import("vue").PropType<(current: number, pageInfo: import("./type").PageInfo) => void>;
        onPageSizeChange: import("vue").PropType<(pageSize: number, pageInfo: import("./type").PageInfo) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        total: number;
        disabled: boolean;
        size: "small" | "medium";
        modelValue: number;
        current: number;
        theme: "default" | "simple";
        pageEllipsisMode: "mid" | "both-ends";
        pageSizeOptions: (number | {
            label: string;
            value: number;
        })[];
        totalContent: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        defaultCurrent: number;
        foldedMaxPageBtn: number;
        maxPageBtn: number;
        pageSize: number;
        defaultPageSize: number;
        showFirstAndLastPageBtn: boolean;
        showJumper: boolean;
        showPageNumber: boolean;
        showPageSize: boolean;
        showPreviousAndNextBtn: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    current: {
        type: NumberConstructor;
        default: any;
    };
    modelValue: {
        type: NumberConstructor;
        default: any;
    };
    defaultCurrent: {
        type: NumberConstructor;
        default: number;
    };
    disabled: BooleanConstructor;
    foldedMaxPageBtn: {
        type: NumberConstructor;
        default: number;
    };
    maxPageBtn: {
        type: NumberConstructor;
        default: number;
    };
    pageEllipsisMode: {
        type: import("vue").PropType<"mid" | "both-ends">;
        default: "mid" | "both-ends";
        validator(val: "mid" | "both-ends"): boolean;
    };
    pageSize: {
        type: NumberConstructor;
        default: any;
    };
    defaultPageSize: {
        type: NumberConstructor;
        default: number;
    };
    pageSizeOptions: {
        type: import("vue").PropType<(number | {
            label: string;
            value: number;
        })[]>;
        default: () => (number | {
            label: string;
            value: number;
        })[];
    };
    selectProps: {
        type: import("vue").PropType<import("..").SelectProps<import("..").SelectOption>>;
    };
    showFirstAndLastPageBtn: BooleanConstructor;
    showJumper: BooleanConstructor;
    showPageNumber: {
        type: BooleanConstructor;
        default: boolean;
    };
    showPageSize: {
        type: BooleanConstructor;
        default: boolean;
    };
    showPreviousAndNextBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<"small" | "medium">;
        default: "small" | "medium";
        validator(val: "small" | "medium"): boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "simple">;
        default: "default" | "simple";
        validator(val: "default" | "simple"): boolean;
    };
    total: {
        type: NumberConstructor;
        default: number;
    };
    totalContent: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: boolean;
    };
    onChange: import("vue").PropType<(pageInfo: import("./type").PageInfo) => void>;
    onCurrentChange: import("vue").PropType<(current: number, pageInfo: import("./type").PageInfo) => void>;
    onPageSizeChange: import("vue").PropType<(pageSize: number, pageInfo: import("./type").PageInfo) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    total: number;
    disabled: boolean;
    size: "small" | "medium";
    modelValue: number;
    current: number;
    theme: "default" | "simple";
    pageEllipsisMode: "mid" | "both-ends";
    pageSizeOptions: (number | {
        label: string;
        value: number;
    })[];
    totalContent: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    defaultCurrent: number;
    foldedMaxPageBtn: number;
    maxPageBtn: number;
    pageSize: number;
    defaultPageSize: number;
    showFirstAndLastPageBtn: boolean;
    showJumper: boolean;
    showPageNumber: boolean;
    showPageSize: boolean;
    showPreviousAndNextBtn: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const PaginationMini: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        disabled: {
            type: import("vue").PropType<boolean | import("./type").JumperDisabledConfig>;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        showCurrent: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        tips: {
            type: import("vue").PropType<boolean | import("./type").JumperTipsConfig>;
        };
        variant: {
            type: import("vue").PropType<"outline" | "text">;
            default: "outline" | "text";
            validator(val: "outline" | "text"): boolean;
        };
        onChange: import("vue").PropType<(context: {
            e: MouseEvent;
            trigger: import("./type").JumperTrigger;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        disabled: {
            type: import("vue").PropType<boolean | import("./type").JumperDisabledConfig>;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        showCurrent: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        tips: {
            type: import("vue").PropType<boolean | import("./type").JumperTipsConfig>;
        };
        variant: {
            type: import("vue").PropType<"outline" | "text">;
            default: "outline" | "text";
            validator(val: "outline" | "text"): boolean;
        };
        onChange: import("vue").PropType<(context: {
            e: MouseEvent;
            trigger: import("./type").JumperTrigger;
        }) => void>;
    }>>, {
        size: import("..").SizeEnum;
        layout: "horizontal" | "vertical";
        variant: "outline" | "text";
        showCurrent: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        disabled: {
            type: import("vue").PropType<boolean | import("./type").JumperDisabledConfig>;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        showCurrent: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        tips: {
            type: import("vue").PropType<boolean | import("./type").JumperTipsConfig>;
        };
        variant: {
            type: import("vue").PropType<"outline" | "text">;
            default: "outline" | "text";
            validator(val: "outline" | "text"): boolean;
        };
        onChange: import("vue").PropType<(context: {
            e: MouseEvent;
            trigger: import("./type").JumperTrigger;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        size: import("..").SizeEnum;
        layout: "horizontal" | "vertical";
        variant: "outline" | "text";
        showCurrent: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    disabled: {
        type: import("vue").PropType<boolean | import("./type").JumperDisabledConfig>;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    showCurrent: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("..").SizeEnum>;
        default: import("..").SizeEnum;
        validator(val: import("..").SizeEnum): boolean;
    };
    tips: {
        type: import("vue").PropType<boolean | import("./type").JumperTipsConfig>;
    };
    variant: {
        type: import("vue").PropType<"outline" | "text">;
        default: "outline" | "text";
        validator(val: "outline" | "text"): boolean;
    };
    onChange: import("vue").PropType<(context: {
        e: MouseEvent;
        trigger: import("./type").JumperTrigger;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    size: import("..").SizeEnum;
    layout: "horizontal" | "vertical";
    variant: "outline" | "text";
    showCurrent: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Pagination;
