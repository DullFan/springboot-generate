import { TdTransferProps } from './type';
import './style';
export declare type TransferProps = TdTransferProps;
export declare const Transfer: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        checkboxProps: {
            type: import("vue").PropType<import("..").TdCheckboxProps>;
        };
        checked: {
            type: import("vue").PropType<import("./type").TransferValue[]>;
            default: import("./type").TransferValue[];
        };
        defaultChecked: {
            type: import("vue").PropType<import("./type").TransferValue[]>;
            default: () => import("./type").TransferValue[];
        };
        data: {
            type: import("vue").PropType<import("./type").DataOption[]>;
            default: () => import("./type").DataOption[];
        };
        direction: {
            type: import("vue").PropType<"both" | "left" | "right">;
            default: "both" | "left" | "right";
            validator(val: "both" | "left" | "right"): boolean;
        };
        disabled: {
            type: import("vue").PropType<boolean | boolean[]>;
        };
        empty: {
            type: import("vue").PropType<import("./type").EmptyType | import("./type").EmptyType[]>;
            default: import("./type").EmptyType | import("./type").EmptyType[];
        };
        footer: {
            type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("..").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
                type: import("./type").TransferListType;
            }) => import("..").SlotReturnValue)>;
        };
        keys: {
            type: import("vue").PropType<import("..").KeysType>;
        };
        operation: {
            type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("..").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
                direction: "left" | "right";
            }) => import("..").SlotReturnValue)>;
        };
        pagination: {
            type: import("vue").PropType<import("..").TdPaginationProps | import("..").TdPaginationProps[]>;
        };
        search: {
            type: import("vue").PropType<import("./type").SearchOption | import("./type").SearchOption[]>;
            default: boolean;
        };
        showCheckAll: {
            type: import("vue").PropType<boolean | boolean[]>;
            default: boolean | boolean[];
        };
        targetDraggable: BooleanConstructor;
        targetSort: {
            type: import("vue").PropType<"push" | "unshift" | "original">;
            default: "push" | "unshift" | "original";
            validator(val: "push" | "unshift" | "original"): boolean;
        };
        title: {
            type: import("vue").PropType<import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
                type: import("./type").TransferListType;
            }) => import("..").SlotReturnValue)>;
            default: () => import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
                type: import("./type").TransferListType;
            }) => import("..").SlotReturnValue);
        };
        transferItem: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TransferItem<import("./type").DataOption>) => import("..").SlotReturnValue>;
        };
        value: {
            type: import("vue").PropType<import("./type").TransferValue[]>;
            default: import("./type").TransferValue[];
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TransferValue[]>;
            default: import("./type").TransferValue[];
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TransferValue[]>;
            default: () => import("./type").TransferValue[];
        };
        onChange: import("vue").PropType<(targetValue: import("./type").TransferValue[], context: import("./type").TargetParams) => void>;
        onCheckedChange: import("vue").PropType<(options: import("./type").CheckedOptions) => void>;
        onPageChange: import("vue").PropType<(page: import("..").PageInfo, context: {
            type: import("./type").TransferListType;
        }) => void>;
        onScroll: import("vue").PropType<(options: {
            e: Event;
            bottomDistance: number;
            type: import("./type").TransferListType;
        }) => void>;
        onSearch: import("vue").PropType<(options: import("./type").SearchContext) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        checkboxProps: {
            type: import("vue").PropType<import("..").TdCheckboxProps>;
        };
        checked: {
            type: import("vue").PropType<import("./type").TransferValue[]>;
            default: import("./type").TransferValue[];
        };
        defaultChecked: {
            type: import("vue").PropType<import("./type").TransferValue[]>;
            default: () => import("./type").TransferValue[];
        };
        data: {
            type: import("vue").PropType<import("./type").DataOption[]>;
            default: () => import("./type").DataOption[];
        };
        direction: {
            type: import("vue").PropType<"both" | "left" | "right">;
            default: "both" | "left" | "right";
            validator(val: "both" | "left" | "right"): boolean;
        };
        disabled: {
            type: import("vue").PropType<boolean | boolean[]>;
        };
        empty: {
            type: import("vue").PropType<import("./type").EmptyType | import("./type").EmptyType[]>;
            default: import("./type").EmptyType | import("./type").EmptyType[];
        };
        footer: {
            type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("..").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
                type: import("./type").TransferListType;
            }) => import("..").SlotReturnValue)>;
        };
        keys: {
            type: import("vue").PropType<import("..").KeysType>;
        };
        operation: {
            type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("..").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
                direction: "left" | "right";
            }) => import("..").SlotReturnValue)>;
        };
        pagination: {
            type: import("vue").PropType<import("..").TdPaginationProps | import("..").TdPaginationProps[]>;
        };
        search: {
            type: import("vue").PropType<import("./type").SearchOption | import("./type").SearchOption[]>;
            default: boolean;
        };
        showCheckAll: {
            type: import("vue").PropType<boolean | boolean[]>;
            default: boolean | boolean[];
        };
        targetDraggable: BooleanConstructor;
        targetSort: {
            type: import("vue").PropType<"push" | "unshift" | "original">;
            default: "push" | "unshift" | "original";
            validator(val: "push" | "unshift" | "original"): boolean;
        };
        title: {
            type: import("vue").PropType<import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
                type: import("./type").TransferListType;
            }) => import("..").SlotReturnValue)>;
            default: () => import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
                type: import("./type").TransferListType;
            }) => import("..").SlotReturnValue);
        };
        transferItem: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TransferItem<import("./type").DataOption>) => import("..").SlotReturnValue>;
        };
        value: {
            type: import("vue").PropType<import("./type").TransferValue[]>;
            default: import("./type").TransferValue[];
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TransferValue[]>;
            default: import("./type").TransferValue[];
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TransferValue[]>;
            default: () => import("./type").TransferValue[];
        };
        onChange: import("vue").PropType<(targetValue: import("./type").TransferValue[], context: import("./type").TargetParams) => void>;
        onCheckedChange: import("vue").PropType<(options: import("./type").CheckedOptions) => void>;
        onPageChange: import("vue").PropType<(page: import("..").PageInfo, context: {
            type: import("./type").TransferListType;
        }) => void>;
        onScroll: import("vue").PropType<(options: {
            e: Event;
            bottomDistance: number;
            type: import("./type").TransferListType;
        }) => void>;
        onSearch: import("vue").PropType<(options: import("./type").SearchContext) => void>;
    }>>, {
        search: boolean;
        data: import("./type").DataOption[];
        direction: "both" | "left" | "right";
        value: import("./type").TransferValue[];
        title: import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
            type: import("./type").TransferListType;
        }) => import("..").SlotReturnValue);
        empty: import("./type").EmptyType | import("./type").EmptyType[];
        checked: import("./type").TransferValue[];
        modelValue: import("./type").TransferValue[];
        defaultChecked: import("./type").TransferValue[];
        defaultValue: import("./type").TransferValue[];
        showCheckAll: boolean | boolean[];
        targetSort: "push" | "unshift" | "original";
        targetDraggable: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        checkboxProps: {
            type: import("vue").PropType<import("..").TdCheckboxProps>;
        };
        checked: {
            type: import("vue").PropType<import("./type").TransferValue[]>;
            default: import("./type").TransferValue[];
        };
        defaultChecked: {
            type: import("vue").PropType<import("./type").TransferValue[]>;
            default: () => import("./type").TransferValue[];
        };
        data: {
            type: import("vue").PropType<import("./type").DataOption[]>;
            default: () => import("./type").DataOption[];
        };
        direction: {
            type: import("vue").PropType<"both" | "left" | "right">;
            default: "both" | "left" | "right";
            validator(val: "both" | "left" | "right"): boolean;
        };
        disabled: {
            type: import("vue").PropType<boolean | boolean[]>;
        };
        empty: {
            type: import("vue").PropType<import("./type").EmptyType | import("./type").EmptyType[]>;
            default: import("./type").EmptyType | import("./type").EmptyType[];
        };
        footer: {
            type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("..").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
                type: import("./type").TransferListType;
            }) => import("..").SlotReturnValue)>;
        };
        keys: {
            type: import("vue").PropType<import("..").KeysType>;
        };
        operation: {
            type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("..").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
                direction: "left" | "right";
            }) => import("..").SlotReturnValue)>;
        };
        pagination: {
            type: import("vue").PropType<import("..").TdPaginationProps | import("..").TdPaginationProps[]>;
        };
        search: {
            type: import("vue").PropType<import("./type").SearchOption | import("./type").SearchOption[]>;
            default: boolean;
        };
        showCheckAll: {
            type: import("vue").PropType<boolean | boolean[]>;
            default: boolean | boolean[];
        };
        targetDraggable: BooleanConstructor;
        targetSort: {
            type: import("vue").PropType<"push" | "unshift" | "original">;
            default: "push" | "unshift" | "original";
            validator(val: "push" | "unshift" | "original"): boolean;
        };
        title: {
            type: import("vue").PropType<import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
                type: import("./type").TransferListType;
            }) => import("..").SlotReturnValue)>;
            default: () => import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
                type: import("./type").TransferListType;
            }) => import("..").SlotReturnValue);
        };
        transferItem: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TransferItem<import("./type").DataOption>) => import("..").SlotReturnValue>;
        };
        value: {
            type: import("vue").PropType<import("./type").TransferValue[]>;
            default: import("./type").TransferValue[];
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TransferValue[]>;
            default: import("./type").TransferValue[];
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TransferValue[]>;
            default: () => import("./type").TransferValue[];
        };
        onChange: import("vue").PropType<(targetValue: import("./type").TransferValue[], context: import("./type").TargetParams) => void>;
        onCheckedChange: import("vue").PropType<(options: import("./type").CheckedOptions) => void>;
        onPageChange: import("vue").PropType<(page: import("..").PageInfo, context: {
            type: import("./type").TransferListType;
        }) => void>;
        onScroll: import("vue").PropType<(options: {
            e: Event;
            bottomDistance: number;
            type: import("./type").TransferListType;
        }) => void>;
        onSearch: import("vue").PropType<(options: import("./type").SearchContext) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        search: boolean;
        data: import("./type").DataOption[];
        direction: "both" | "left" | "right";
        value: import("./type").TransferValue[];
        title: import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
            type: import("./type").TransferListType;
        }) => import("..").SlotReturnValue);
        empty: import("./type").EmptyType | import("./type").EmptyType[];
        checked: import("./type").TransferValue[];
        modelValue: import("./type").TransferValue[];
        defaultChecked: import("./type").TransferValue[];
        defaultValue: import("./type").TransferValue[];
        showCheckAll: boolean | boolean[];
        targetSort: "push" | "unshift" | "original";
        targetDraggable: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    checkboxProps: {
        type: import("vue").PropType<import("..").TdCheckboxProps>;
    };
    checked: {
        type: import("vue").PropType<import("./type").TransferValue[]>;
        default: import("./type").TransferValue[];
    };
    defaultChecked: {
        type: import("vue").PropType<import("./type").TransferValue[]>;
        default: () => import("./type").TransferValue[];
    };
    data: {
        type: import("vue").PropType<import("./type").DataOption[]>;
        default: () => import("./type").DataOption[];
    };
    direction: {
        type: import("vue").PropType<"both" | "left" | "right">;
        default: "both" | "left" | "right";
        validator(val: "both" | "left" | "right"): boolean;
    };
    disabled: {
        type: import("vue").PropType<boolean | boolean[]>;
    };
    empty: {
        type: import("vue").PropType<import("./type").EmptyType | import("./type").EmptyType[]>;
        default: import("./type").EmptyType | import("./type").EmptyType[];
    };
    footer: {
        type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("..").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
            type: import("./type").TransferListType;
        }) => import("..").SlotReturnValue)>;
    };
    keys: {
        type: import("vue").PropType<import("..").KeysType>;
    };
    operation: {
        type: import("vue").PropType<(string | ((h: typeof import("vue").h) => import("..").SlotReturnValue))[] | ((h: typeof import("vue").h, props: {
            direction: "left" | "right";
        }) => import("..").SlotReturnValue)>;
    };
    pagination: {
        type: import("vue").PropType<import("..").TdPaginationProps | import("..").TdPaginationProps[]>;
    };
    search: {
        type: import("vue").PropType<import("./type").SearchOption | import("./type").SearchOption[]>;
        default: boolean;
    };
    showCheckAll: {
        type: import("vue").PropType<boolean | boolean[]>;
        default: boolean | boolean[];
    };
    targetDraggable: BooleanConstructor;
    targetSort: {
        type: import("vue").PropType<"push" | "unshift" | "original">;
        default: "push" | "unshift" | "original";
        validator(val: "push" | "unshift" | "original"): boolean;
    };
    title: {
        type: import("vue").PropType<import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
            type: import("./type").TransferListType;
        }) => import("..").SlotReturnValue)>;
        default: () => import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
            type: import("./type").TransferListType;
        }) => import("..").SlotReturnValue);
    };
    transferItem: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TransferItem<import("./type").DataOption>) => import("..").SlotReturnValue>;
    };
    value: {
        type: import("vue").PropType<import("./type").TransferValue[]>;
        default: import("./type").TransferValue[];
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TransferValue[]>;
        default: import("./type").TransferValue[];
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TransferValue[]>;
        default: () => import("./type").TransferValue[];
    };
    onChange: import("vue").PropType<(targetValue: import("./type").TransferValue[], context: import("./type").TargetParams) => void>;
    onCheckedChange: import("vue").PropType<(options: import("./type").CheckedOptions) => void>;
    onPageChange: import("vue").PropType<(page: import("..").PageInfo, context: {
        type: import("./type").TransferListType;
    }) => void>;
    onScroll: import("vue").PropType<(options: {
        e: Event;
        bottomDistance: number;
        type: import("./type").TransferListType;
    }) => void>;
    onSearch: import("vue").PropType<(options: import("./type").SearchContext) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    search: boolean;
    data: import("./type").DataOption[];
    direction: "both" | "left" | "right";
    value: import("./type").TransferValue[];
    title: import("./type").TitleType[] | ((h: typeof import("vue").h, props: {
        type: import("./type").TransferListType;
    }) => import("..").SlotReturnValue);
    empty: import("./type").EmptyType | import("./type").EmptyType[];
    checked: import("./type").TransferValue[];
    modelValue: import("./type").TransferValue[];
    defaultChecked: import("./type").TransferValue[];
    defaultValue: import("./type").TransferValue[];
    showCheckAll: boolean | boolean[];
    targetSort: "push" | "unshift" | "original";
    targetDraggable: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Transfer;
