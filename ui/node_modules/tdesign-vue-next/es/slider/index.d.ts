import { TdSliderProps } from './type';
import './style';
export * from './type';
export declare type SliderProps = TdSliderProps;
export declare const Slider: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        disabled: BooleanConstructor;
        inputNumberProps: {
            type: import("vue").PropType<boolean | import("..").InputNumberProps>;
            default: boolean | import("..").InputNumberProps;
        };
        label: {
            type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h, props: {
                value: import("./type").SliderValue;
                position?: "end" | "start";
            }) => import("..").SlotReturnValue)>;
            default: string | boolean | ((h: typeof import("vue").h, props: {
                value: import("./type").SliderValue;
                position?: "end" | "start";
            }) => import("..").SlotReturnValue);
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        marks: {
            type: import("vue").PropType<number[] | import("./type").SliderMarks>;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        min: {
            type: NumberConstructor;
            default: number;
        };
        range: BooleanConstructor;
        showStep: BooleanConstructor;
        step: {
            type: NumberConstructor;
            default: number;
        };
        tooltipProps: {
            type: import("vue").PropType<import("..").TdTooltipProps>;
        };
        value: {
            type: import("vue").PropType<import("./type").SliderValue>;
            default: import("./type").SliderValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").SliderValue>;
            default: import("./type").SliderValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").SliderValue>;
            default: import("./type").SliderValue;
        };
        onChange: import("vue").PropType<(value: import("./type").SliderValue) => void>;
        onChangeEnd: import("vue").PropType<(value: import("./type").SliderValue) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        disabled: BooleanConstructor;
        inputNumberProps: {
            type: import("vue").PropType<boolean | import("..").InputNumberProps>;
            default: boolean | import("..").InputNumberProps;
        };
        label: {
            type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h, props: {
                value: import("./type").SliderValue;
                position?: "end" | "start";
            }) => import("..").SlotReturnValue)>;
            default: string | boolean | ((h: typeof import("vue").h, props: {
                value: import("./type").SliderValue;
                position?: "end" | "start";
            }) => import("..").SlotReturnValue);
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        marks: {
            type: import("vue").PropType<number[] | import("./type").SliderMarks>;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        min: {
            type: NumberConstructor;
            default: number;
        };
        range: BooleanConstructor;
        showStep: BooleanConstructor;
        step: {
            type: NumberConstructor;
            default: number;
        };
        tooltipProps: {
            type: import("vue").PropType<import("..").TdTooltipProps>;
        };
        value: {
            type: import("vue").PropType<import("./type").SliderValue>;
            default: import("./type").SliderValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").SliderValue>;
            default: import("./type").SliderValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").SliderValue>;
            default: import("./type").SliderValue;
        };
        onChange: import("vue").PropType<(value: import("./type").SliderValue) => void>;
        onChangeEnd: import("vue").PropType<(value: import("./type").SliderValue) => void>;
    }>>, {
        max: number;
        value: import("./type").SliderValue;
        label: string | boolean | ((h: typeof import("vue").h, props: {
            value: import("./type").SliderValue;
            position?: "end" | "start";
        }) => import("..").SlotReturnValue);
        disabled: boolean;
        range: boolean;
        layout: "horizontal" | "vertical";
        step: number;
        min: number;
        modelValue: import("./type").SliderValue;
        defaultValue: import("./type").SliderValue;
        inputNumberProps: boolean | import("..").InputNumberProps;
        showStep: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        disabled: BooleanConstructor;
        inputNumberProps: {
            type: import("vue").PropType<boolean | import("..").InputNumberProps>;
            default: boolean | import("..").InputNumberProps;
        };
        label: {
            type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h, props: {
                value: import("./type").SliderValue;
                position?: "end" | "start";
            }) => import("..").SlotReturnValue)>;
            default: string | boolean | ((h: typeof import("vue").h, props: {
                value: import("./type").SliderValue;
                position?: "end" | "start";
            }) => import("..").SlotReturnValue);
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        marks: {
            type: import("vue").PropType<number[] | import("./type").SliderMarks>;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        min: {
            type: NumberConstructor;
            default: number;
        };
        range: BooleanConstructor;
        showStep: BooleanConstructor;
        step: {
            type: NumberConstructor;
            default: number;
        };
        tooltipProps: {
            type: import("vue").PropType<import("..").TdTooltipProps>;
        };
        value: {
            type: import("vue").PropType<import("./type").SliderValue>;
            default: import("./type").SliderValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").SliderValue>;
            default: import("./type").SliderValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").SliderValue>;
            default: import("./type").SliderValue;
        };
        onChange: import("vue").PropType<(value: import("./type").SliderValue) => void>;
        onChangeEnd: import("vue").PropType<(value: import("./type").SliderValue) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        max: number;
        value: import("./type").SliderValue;
        label: string | boolean | ((h: typeof import("vue").h, props: {
            value: import("./type").SliderValue;
            position?: "end" | "start";
        }) => import("..").SlotReturnValue);
        disabled: boolean;
        range: boolean;
        layout: "horizontal" | "vertical";
        step: number;
        min: number;
        modelValue: import("./type").SliderValue;
        defaultValue: import("./type").SliderValue;
        inputNumberProps: boolean | import("..").InputNumberProps;
        showStep: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    disabled: BooleanConstructor;
    inputNumberProps: {
        type: import("vue").PropType<boolean | import("..").InputNumberProps>;
        default: boolean | import("..").InputNumberProps;
    };
    label: {
        type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h, props: {
            value: import("./type").SliderValue;
            position?: "end" | "start";
        }) => import("..").SlotReturnValue)>;
        default: string | boolean | ((h: typeof import("vue").h, props: {
            value: import("./type").SliderValue;
            position?: "end" | "start";
        }) => import("..").SlotReturnValue);
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    marks: {
        type: import("vue").PropType<number[] | import("./type").SliderMarks>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    range: BooleanConstructor;
    showStep: BooleanConstructor;
    step: {
        type: NumberConstructor;
        default: number;
    };
    tooltipProps: {
        type: import("vue").PropType<import("..").TdTooltipProps>;
    };
    value: {
        type: import("vue").PropType<import("./type").SliderValue>;
        default: import("./type").SliderValue;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").SliderValue>;
        default: import("./type").SliderValue;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").SliderValue>;
        default: import("./type").SliderValue;
    };
    onChange: import("vue").PropType<(value: import("./type").SliderValue) => void>;
    onChangeEnd: import("vue").PropType<(value: import("./type").SliderValue) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    max: number;
    value: import("./type").SliderValue;
    label: string | boolean | ((h: typeof import("vue").h, props: {
        value: import("./type").SliderValue;
        position?: "end" | "start";
    }) => import("..").SlotReturnValue);
    disabled: boolean;
    range: boolean;
    layout: "horizontal" | "vertical";
    step: number;
    min: number;
    modelValue: import("./type").SliderValue;
    defaultValue: import("./type").SliderValue;
    inputNumberProps: boolean | import("..").InputNumberProps;
    showStep: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const SliderButton: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        value: {
            type: NumberConstructor[];
            default: number;
        };
        vertical: {
            type: BooleanConstructor;
            default: boolean;
        };
        tooltipProps: {
            type: (ObjectConstructor | BooleanConstructor)[];
            default: boolean;
        };
        label: {
            type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h, props: {
                value: import("./type").SliderValue;
                position?: "end" | "start";
            }) => import("..").SlotReturnValue)>;
        };
        range: {
            type: BooleanConstructor;
            default: boolean;
        };
        position: {
            type: StringConstructor;
        };
    }>> & {
        onInput?: (...args: any[]) => any;
        onMouseup?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("input" | "mouseup")[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        value: {
            type: NumberConstructor[];
            default: number;
        };
        vertical: {
            type: BooleanConstructor;
            default: boolean;
        };
        tooltipProps: {
            type: (ObjectConstructor | BooleanConstructor)[];
            default: boolean;
        };
        label: {
            type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h, props: {
                value: import("./type").SliderValue;
                position?: "end" | "start";
            }) => import("..").SlotReturnValue)>;
        };
        range: {
            type: BooleanConstructor;
            default: boolean;
        };
        position: {
            type: StringConstructor;
        };
    }>> & {
        onInput?: (...args: any[]) => any;
        onMouseup?: (...args: any[]) => any;
    }, {
        value: number;
        range: boolean;
        vertical: boolean;
        tooltipProps: boolean | Record<string, any>;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        value: {
            type: NumberConstructor[];
            default: number;
        };
        vertical: {
            type: BooleanConstructor;
            default: boolean;
        };
        tooltipProps: {
            type: (ObjectConstructor | BooleanConstructor)[];
            default: boolean;
        };
        label: {
            type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h, props: {
                value: import("./type").SliderValue;
                position?: "end" | "start";
            }) => import("..").SlotReturnValue)>;
        };
        range: {
            type: BooleanConstructor;
            default: boolean;
        };
        position: {
            type: StringConstructor;
        };
    }>> & {
        onInput?: (...args: any[]) => any;
        onMouseup?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        value: number;
        range: boolean;
        vertical: boolean;
        tooltipProps: boolean | Record<string, any>;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    value: {
        type: NumberConstructor[];
        default: number;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    tooltipProps: {
        type: (ObjectConstructor | BooleanConstructor)[];
        default: boolean;
    };
    label: {
        type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h, props: {
            value: import("./type").SliderValue;
            position?: "end" | "start";
        }) => import("..").SlotReturnValue)>;
    };
    range: {
        type: BooleanConstructor;
        default: boolean;
    };
    position: {
        type: StringConstructor;
    };
}>> & {
    onInput?: (...args: any[]) => any;
    onMouseup?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("input" | "mouseup")[], "input" | "mouseup", {
    value: number;
    range: boolean;
    vertical: boolean;
    tooltipProps: boolean | Record<string, any>;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Slider;
