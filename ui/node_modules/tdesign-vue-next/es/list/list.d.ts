import { VNodeChild } from 'vue';
declare const _default: import("vue").DefineComponent<{
    asyncLoading: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    footer: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    header: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    scroll: {
        type: import("vue").PropType<import("..").TScroll>;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    split: BooleanConstructor;
    stripe: BooleanConstructor;
    onLoadMore: import("vue").PropType<(options: {
        e: MouseEvent;
    }) => void>;
    onScroll: import("vue").PropType<(options: {
        e: Event | WheelEvent;
        scrollTop: number;
        scrollBottom: number;
    }) => void>;
}, {
    COMPONENT_NAME: import("vue").ComputedRef<string>;
    listClass: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    loadingClass: import("vue").ComputedRef<string>;
    renderLoading: () => any;
    renderContent: () => VNodeChild;
    handleScroll: (e: WheelEvent) => void;
    handleLoadMore: (e: MouseEvent) => void;
    listRef: import("vue").Ref<any>;
    isVirtualScroll: import("vue").ComputedRef<boolean>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    asyncLoading: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    footer: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    header: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    scroll: {
        type: import("vue").PropType<import("..").TScroll>;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    split: BooleanConstructor;
    stripe: BooleanConstructor;
    onLoadMore: import("vue").PropType<(options: {
        e: MouseEvent;
    }) => void>;
    onScroll: import("vue").PropType<(options: {
        e: Event | WheelEvent;
        scrollTop: number;
        scrollBottom: number;
    }) => void>;
}>>, {
    split: boolean;
    size: "small" | "medium" | "large";
    layout: "horizontal" | "vertical";
    stripe: boolean;
}, {}>;
export default _default;
