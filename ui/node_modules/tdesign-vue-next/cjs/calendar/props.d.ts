import { TdCalendarProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    cell: {
        type: PropType<string | ((h: typeof import("vue").h, props: import("./type").CalendarCell) => import("..").SlotReturnValue)>;
    };
    cellAppend: {
        type: PropType<string | ((h: typeof import("vue").h, props: import("./type").CalendarCell) => import("..").SlotReturnValue)>;
    };
    controllerConfig: {
        type: PropType<boolean | import("./type").CalendarController>;
        default: boolean | import("./type").CalendarController;
    };
    fillWithZero: {
        type: BooleanConstructor;
        default: any;
    };
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: TdCalendarProps['firstDayOfWeek']): boolean;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    head: {
        type: PropType<string | ((h: typeof import("vue").h, props: import("./type").ControllerOptions) => import("..").SlotReturnValue)>;
    };
    isShowWeekendDefault: {
        type: BooleanConstructor;
        default: boolean;
    };
    mode: {
        type: PropType<"month" | "year">;
        default: "month" | "year";
        validator(val: TdCalendarProps['mode']): boolean;
    };
    month: {
        type: PropType<string | number>;
    };
    multiple: BooleanConstructor;
    preventCellContextmenu: BooleanConstructor;
    range: {
        type: PropType<import("./type").CalendarValue[]>;
    };
    theme: {
        type: PropType<"full" | "card">;
        default: "full" | "card";
        validator(val: TdCalendarProps['theme']): boolean;
    };
    value: {
        type: PropType<import("./type").CalendarValue | import("./type").CalendarValue[]>;
    };
    week: {
        type: PropType<string[] | ((h: typeof import("vue").h, props: import("./type").CalendarWeek) => import("..").SlotReturnValue)>;
    };
    year: {
        type: PropType<string | number>;
    };
    onCellClick: PropType<(options: {
        cell: import("./type").CalendarCell;
        e: MouseEvent;
    }) => void>;
    onCellDoubleClick: PropType<(options: {
        cell: import("./type").CalendarCell;
        e: MouseEvent;
    }) => void>;
    onCellRightClick: PropType<(options: {
        cell: import("./type").CalendarCell;
        e: MouseEvent;
    }) => void>;
    onControllerChange: PropType<(options: import("./type").ControllerOptions) => void>;
    onMonthChange: PropType<(options: {
        month: string;
        year: string;
    }) => void>;
};
export default _default;
