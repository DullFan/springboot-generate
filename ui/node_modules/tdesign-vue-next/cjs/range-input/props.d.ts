import { TdRangeInputProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    activeIndex: {
        type: NumberConstructor;
    };
    clearable: BooleanConstructor;
    disabled: BooleanConstructor;
    format: {
        type: PropType<import("..").InputFormatType | import("..").InputFormatType[]>;
    };
    inputProps: {
        type: PropType<import("..").InputProps<import("..").InputValue> | import("..").InputProps<import("..").InputValue>[]>;
    };
    label: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    placeholder: {
        type: PropType<string | string[]>;
    };
    prefixIcon: {
        type: PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    separator: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    showClearIconOnEmpty: BooleanConstructor;
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: TdRangeInputProps['size']): boolean;
    };
    status: {
        type: PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: TdRangeInputProps['status']): boolean;
    };
    suffix: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    suffixIcon: {
        type: PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    tips: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: PropType<import("./type").RangeInputValue>;
        default: any;
    };
    modelValue: {
        type: PropType<import("./type").RangeInputValue>;
        default: any;
    };
    defaultValue: {
        type: PropType<import("./type").RangeInputValue>;
        default: () => TdRangeInputProps['defaultValue'];
    };
    onBlur: PropType<(value: import("./type").RangeInputValue, context?: {
        e?: FocusEvent;
        position?: import("./type").RangeInputPosition;
    }) => void>;
    onChange: PropType<(value: import("./type").RangeInputValue, context?: {
        e?: MouseEvent | CompositionEvent | InputEvent;
        position?: import("./type").RangeInputPosition;
        trigger?: "input" | "clear" | "initial";
    }) => void>;
    onClear: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClick: PropType<(context?: {
        e?: MouseEvent;
        position?: import("./type").RangeInputPosition;
    }) => void>;
    onEnter: PropType<(value: import("./type").RangeInputValue, context?: {
        e?: MouseEvent | InputEvent;
        position?: import("./type").RangeInputPosition;
    }) => void>;
    onFocus: PropType<(value: import("./type").RangeInputValue, context?: {
        e?: FocusEvent;
        position?: import("./type").RangeInputPosition;
    }) => void>;
    onMouseenter: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: PropType<(context: {
        e: MouseEvent;
    }) => void>;
};
export default _default;
