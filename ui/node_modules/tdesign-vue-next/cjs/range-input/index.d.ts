import { TdRangeInputProps, TdRangeInputPopupProps } from './type';
import './style';
export * from './type';
export declare type RangeInputProps = TdRangeInputProps;
export declare type RangeInputPopupProps = TdRangeInputPopupProps;
export declare const RangeInput: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        activeIndex: {
            type: NumberConstructor;
        };
        clearable: BooleanConstructor;
        disabled: BooleanConstructor;
        format: {
            type: import("vue").PropType<import("..").InputFormatType | import("..").InputFormatType[]>;
        };
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue> | import("..").InputProps<import("..").InputValue>[]>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        placeholder: {
            type: import("vue").PropType<string | string[]>;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        separator: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        showClearIconOnEmpty: BooleanConstructor;
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").RangeInputValue>;
            default: any;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").RangeInputValue>;
            default: any;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").RangeInputValue>;
            default: () => import("./type").RangeInputValue;
        };
        onBlur: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
            e?: FocusEvent;
            position?: import("./type").RangeInputPosition;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
            e?: MouseEvent | CompositionEvent | InputEvent;
            position?: import("./type").RangeInputPosition;
            trigger?: "input" | "clear" | "initial";
        }) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onClick: import("vue").PropType<(context?: {
            e?: MouseEvent;
            position?: import("./type").RangeInputPosition;
        }) => void>;
        onEnter: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
            e?: MouseEvent | InputEvent;
            position?: import("./type").RangeInputPosition;
        }) => void>;
        onFocus: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
            e?: FocusEvent;
            position?: import("./type").RangeInputPosition;
        }) => void>;
        onMouseenter: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onMouseleave: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        activeIndex: {
            type: NumberConstructor;
        };
        clearable: BooleanConstructor;
        disabled: BooleanConstructor;
        format: {
            type: import("vue").PropType<import("..").InputFormatType | import("..").InputFormatType[]>;
        };
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue> | import("..").InputProps<import("..").InputValue>[]>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        placeholder: {
            type: import("vue").PropType<string | string[]>;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        separator: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        showClearIconOnEmpty: BooleanConstructor;
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").RangeInputValue>;
            default: any;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").RangeInputValue>;
            default: any;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").RangeInputValue>;
            default: () => import("./type").RangeInputValue;
        };
        onBlur: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
            e?: FocusEvent;
            position?: import("./type").RangeInputPosition;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
            e?: MouseEvent | CompositionEvent | InputEvent;
            position?: import("./type").RangeInputPosition;
            trigger?: "input" | "clear" | "initial";
        }) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onClick: import("vue").PropType<(context?: {
            e?: MouseEvent;
            position?: import("./type").RangeInputPosition;
        }) => void>;
        onEnter: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
            e?: MouseEvent | InputEvent;
            position?: import("./type").RangeInputPosition;
        }) => void>;
        onFocus: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
            e?: FocusEvent;
            position?: import("./type").RangeInputPosition;
        }) => void>;
        onMouseenter: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onMouseleave: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
    }>>, {
        value: import("./type").RangeInputValue;
        disabled: boolean;
        size: "small" | "medium" | "large";
        readonly: boolean;
        status: "error" | "default" | "success" | "warning";
        separator: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        modelValue: import("./type").RangeInputValue;
        defaultValue: import("./type").RangeInputValue;
        clearable: boolean;
        showClearIconOnEmpty: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        activeIndex: {
            type: NumberConstructor;
        };
        clearable: BooleanConstructor;
        disabled: BooleanConstructor;
        format: {
            type: import("vue").PropType<import("..").InputFormatType | import("..").InputFormatType[]>;
        };
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue> | import("..").InputProps<import("..").InputValue>[]>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        placeholder: {
            type: import("vue").PropType<string | string[]>;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        separator: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        showClearIconOnEmpty: BooleanConstructor;
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").RangeInputValue>;
            default: any;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").RangeInputValue>;
            default: any;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").RangeInputValue>;
            default: () => import("./type").RangeInputValue;
        };
        onBlur: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
            e?: FocusEvent;
            position?: import("./type").RangeInputPosition;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
            e?: MouseEvent | CompositionEvent | InputEvent;
            position?: import("./type").RangeInputPosition;
            trigger?: "input" | "clear" | "initial";
        }) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onClick: import("vue").PropType<(context?: {
            e?: MouseEvent;
            position?: import("./type").RangeInputPosition;
        }) => void>;
        onEnter: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
            e?: MouseEvent | InputEvent;
            position?: import("./type").RangeInputPosition;
        }) => void>;
        onFocus: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
            e?: FocusEvent;
            position?: import("./type").RangeInputPosition;
        }) => void>;
        onMouseenter: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onMouseleave: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        value: import("./type").RangeInputValue;
        disabled: boolean;
        size: "small" | "medium" | "large";
        readonly: boolean;
        status: "error" | "default" | "success" | "warning";
        separator: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        modelValue: import("./type").RangeInputValue;
        defaultValue: import("./type").RangeInputValue;
        clearable: boolean;
        showClearIconOnEmpty: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    activeIndex: {
        type: NumberConstructor;
    };
    clearable: BooleanConstructor;
    disabled: BooleanConstructor;
    format: {
        type: import("vue").PropType<import("..").InputFormatType | import("..").InputFormatType[]>;
    };
    inputProps: {
        type: import("vue").PropType<import("..").InputProps<import("..").InputValue> | import("..").InputProps<import("..").InputValue>[]>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    placeholder: {
        type: import("vue").PropType<string | string[]>;
    };
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    separator: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    showClearIconOnEmpty: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").RangeInputValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").RangeInputValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").RangeInputValue>;
        default: () => import("./type").RangeInputValue;
    };
    onBlur: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
        e?: FocusEvent;
        position?: import("./type").RangeInputPosition;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
        e?: MouseEvent | CompositionEvent | InputEvent;
        position?: import("./type").RangeInputPosition;
        trigger?: "input" | "clear" | "initial";
    }) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClick: import("vue").PropType<(context?: {
        e?: MouseEvent;
        position?: import("./type").RangeInputPosition;
    }) => void>;
    onEnter: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
        e?: MouseEvent | InputEvent;
        position?: import("./type").RangeInputPosition;
    }) => void>;
    onFocus: import("vue").PropType<(value: import("./type").RangeInputValue, context?: {
        e?: FocusEvent;
        position?: import("./type").RangeInputPosition;
    }) => void>;
    onMouseenter: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: import("./type").RangeInputValue;
    disabled: boolean;
    size: "small" | "medium" | "large";
    readonly: boolean;
    status: "error" | "default" | "success" | "warning";
    separator: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    modelValue: import("./type").RangeInputValue;
    defaultValue: import("./type").RangeInputValue;
    clearable: boolean;
    showClearIconOnEmpty: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const RangeInputPopup: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        autoWidth: BooleanConstructor;
        disabled: BooleanConstructor;
        inputValue: {
            type: import("vue").PropType<import("./type").RangeInputValue>;
            default: any;
        };
        defaultInputValue: {
            type: import("vue").PropType<import("./type").RangeInputValue>;
        };
        panel: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        popupVisible: BooleanConstructor;
        rangeInputProps: {
            type: import("vue").PropType<TdRangeInputProps>;
        };
        readonly: BooleanConstructor;
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        onInputChange: import("vue").PropType<(value: import("./type").RangeInputValue, context?: import("./type").RangeInputValueChangeContext) => void>;
        onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        autoWidth: BooleanConstructor;
        disabled: BooleanConstructor;
        inputValue: {
            type: import("vue").PropType<import("./type").RangeInputValue>;
            default: any;
        };
        defaultInputValue: {
            type: import("vue").PropType<import("./type").RangeInputValue>;
        };
        panel: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        popupVisible: BooleanConstructor;
        rangeInputProps: {
            type: import("vue").PropType<TdRangeInputProps>;
        };
        readonly: BooleanConstructor;
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        onInputChange: import("vue").PropType<(value: import("./type").RangeInputValue, context?: import("./type").RangeInputValueChangeContext) => void>;
        onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
    }>>, {
        disabled: boolean;
        readonly: boolean;
        status: "error" | "default" | "success" | "warning";
        autoWidth: boolean;
        inputValue: import("./type").RangeInputValue;
        popupVisible: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        autoWidth: BooleanConstructor;
        disabled: BooleanConstructor;
        inputValue: {
            type: import("vue").PropType<import("./type").RangeInputValue>;
            default: any;
        };
        defaultInputValue: {
            type: import("vue").PropType<import("./type").RangeInputValue>;
        };
        panel: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        popupVisible: BooleanConstructor;
        rangeInputProps: {
            type: import("vue").PropType<TdRangeInputProps>;
        };
        readonly: BooleanConstructor;
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        onInputChange: import("vue").PropType<(value: import("./type").RangeInputValue, context?: import("./type").RangeInputValueChangeContext) => void>;
        onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        readonly: boolean;
        status: "error" | "default" | "success" | "warning";
        autoWidth: boolean;
        inputValue: import("./type").RangeInputValue;
        popupVisible: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    autoWidth: BooleanConstructor;
    disabled: BooleanConstructor;
    inputValue: {
        type: import("vue").PropType<import("./type").RangeInputValue>;
        default: any;
    };
    defaultInputValue: {
        type: import("vue").PropType<import("./type").RangeInputValue>;
    };
    panel: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    popupVisible: BooleanConstructor;
    rangeInputProps: {
        type: import("vue").PropType<TdRangeInputProps>;
    };
    readonly: BooleanConstructor;
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    onInputChange: import("vue").PropType<(value: import("./type").RangeInputValue, context?: import("./type").RangeInputValueChangeContext) => void>;
    onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    disabled: boolean;
    readonly: boolean;
    status: "error" | "default" | "success" | "warning";
    autoWidth: boolean;
    inputValue: import("./type").RangeInputValue;
    popupVisible: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default RangeInput;
