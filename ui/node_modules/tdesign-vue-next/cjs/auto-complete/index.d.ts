import { AutoCompleteOption, TdAutoCompleteProps } from './type';
import './style';
export * from './type';
export declare type AutoCompleteProps<T extends AutoCompleteOption = AutoCompleteOption> = TdAutoCompleteProps<T>;
export declare const AutoComplete: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        autofocus: BooleanConstructor;
        clearable: BooleanConstructor;
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        filter: {
            type: import("vue").PropType<(filterWords: string, option: AutoCompleteOption) => boolean | Promise<boolean>>;
        };
        filterable: {
            type: BooleanConstructor;
            default: boolean;
        };
        highlightKeyword: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        options: {
            type: import("vue").PropType<AutoCompleteOption[]>;
        };
        panelBottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        panelTopContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        readonly: BooleanConstructor;
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        textareaProps: {
            type: import("vue").PropType<import("..").TdTextareaProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        triggerElement: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: StringConstructor;
            default: any;
        };
        modelValue: {
            type: StringConstructor;
            default: any;
        };
        defaultValue: {
            type: StringConstructor;
            default: string;
        };
        onBlur: import("vue").PropType<(context: {
            e: FocusEvent;
            value: string;
        }) => void>;
        onChange: import("vue").PropType<(value: string, context?: {
            e?: MouseEvent | CompositionEvent | InputEvent | KeyboardEvent;
        }) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onCompositionend: import("vue").PropType<(context: {
            e: CompositionEvent;
            value: string;
        }) => void>;
        onCompositionstart: import("vue").PropType<(context: {
            e: CompositionEvent;
            value: string;
        }) => void>;
        onEnter: import("vue").PropType<(context: {
            e: KeyboardEvent;
            value: string;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            e: FocusEvent;
            value: string;
        }) => void>;
        onSelect: import("vue").PropType<(value: string, context: {
            e: MouseEvent | KeyboardEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        autofocus: BooleanConstructor;
        clearable: BooleanConstructor;
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        filter: {
            type: import("vue").PropType<(filterWords: string, option: AutoCompleteOption) => boolean | Promise<boolean>>;
        };
        filterable: {
            type: BooleanConstructor;
            default: boolean;
        };
        highlightKeyword: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        options: {
            type: import("vue").PropType<AutoCompleteOption[]>;
        };
        panelBottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        panelTopContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        readonly: BooleanConstructor;
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        textareaProps: {
            type: import("vue").PropType<import("..").TdTextareaProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        triggerElement: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: StringConstructor;
            default: any;
        };
        modelValue: {
            type: StringConstructor;
            default: any;
        };
        defaultValue: {
            type: StringConstructor;
            default: string;
        };
        onBlur: import("vue").PropType<(context: {
            e: FocusEvent;
            value: string;
        }) => void>;
        onChange: import("vue").PropType<(value: string, context?: {
            e?: MouseEvent | CompositionEvent | InputEvent | KeyboardEvent;
        }) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onCompositionend: import("vue").PropType<(context: {
            e: CompositionEvent;
            value: string;
        }) => void>;
        onCompositionstart: import("vue").PropType<(context: {
            e: CompositionEvent;
            value: string;
        }) => void>;
        onEnter: import("vue").PropType<(context: {
            e: KeyboardEvent;
            value: string;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            e: FocusEvent;
            value: string;
        }) => void>;
        onSelect: import("vue").PropType<(value: string, context: {
            e: MouseEvent | KeyboardEvent;
        }) => void>;
    }>>, {
        value: string;
        autofocus: boolean;
        disabled: boolean;
        size: import("..").SizeEnum;
        readonly: boolean;
        status: "error" | "default" | "success" | "warning";
        placeholder: string;
        modelValue: string;
        defaultValue: string;
        clearable: boolean;
        filterable: boolean;
        highlightKeyword: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        autofocus: BooleanConstructor;
        clearable: BooleanConstructor;
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        filter: {
            type: import("vue").PropType<(filterWords: string, option: AutoCompleteOption) => boolean | Promise<boolean>>;
        };
        filterable: {
            type: BooleanConstructor;
            default: boolean;
        };
        highlightKeyword: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        options: {
            type: import("vue").PropType<AutoCompleteOption[]>;
        };
        panelBottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        panelTopContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        readonly: BooleanConstructor;
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        textareaProps: {
            type: import("vue").PropType<import("..").TdTextareaProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        triggerElement: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: StringConstructor;
            default: any;
        };
        modelValue: {
            type: StringConstructor;
            default: any;
        };
        defaultValue: {
            type: StringConstructor;
            default: string;
        };
        onBlur: import("vue").PropType<(context: {
            e: FocusEvent;
            value: string;
        }) => void>;
        onChange: import("vue").PropType<(value: string, context?: {
            e?: MouseEvent | CompositionEvent | InputEvent | KeyboardEvent;
        }) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onCompositionend: import("vue").PropType<(context: {
            e: CompositionEvent;
            value: string;
        }) => void>;
        onCompositionstart: import("vue").PropType<(context: {
            e: CompositionEvent;
            value: string;
        }) => void>;
        onEnter: import("vue").PropType<(context: {
            e: KeyboardEvent;
            value: string;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            e: FocusEvent;
            value: string;
        }) => void>;
        onSelect: import("vue").PropType<(value: string, context: {
            e: MouseEvent | KeyboardEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        value: string;
        autofocus: boolean;
        disabled: boolean;
        size: import("..").SizeEnum;
        readonly: boolean;
        status: "error" | "default" | "success" | "warning";
        placeholder: string;
        modelValue: string;
        defaultValue: string;
        clearable: boolean;
        filterable: boolean;
        highlightKeyword: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    autofocus: BooleanConstructor;
    clearable: BooleanConstructor;
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    filter: {
        type: import("vue").PropType<(filterWords: string, option: AutoCompleteOption) => boolean | Promise<boolean>>;
    };
    filterable: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightKeyword: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputProps: {
        type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
    };
    options: {
        type: import("vue").PropType<AutoCompleteOption[]>;
    };
    panelBottomContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    panelTopContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    readonly: BooleanConstructor;
    size: {
        type: import("vue").PropType<import("..").SizeEnum>;
        default: import("..").SizeEnum;
        validator(val: import("..").SizeEnum): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    textareaProps: {
        type: import("vue").PropType<import("..").TdTextareaProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    triggerElement: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: StringConstructor;
        default: any;
    };
    modelValue: {
        type: StringConstructor;
        default: any;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onBlur: import("vue").PropType<(context: {
        e: FocusEvent;
        value: string;
    }) => void>;
    onChange: import("vue").PropType<(value: string, context?: {
        e?: MouseEvent | CompositionEvent | InputEvent | KeyboardEvent;
    }) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onCompositionend: import("vue").PropType<(context: {
        e: CompositionEvent;
        value: string;
    }) => void>;
    onCompositionstart: import("vue").PropType<(context: {
        e: CompositionEvent;
        value: string;
    }) => void>;
    onEnter: import("vue").PropType<(context: {
        e: KeyboardEvent;
        value: string;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        e: FocusEvent;
        value: string;
    }) => void>;
    onSelect: import("vue").PropType<(value: string, context: {
        e: MouseEvent | KeyboardEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: string;
    autofocus: boolean;
    disabled: boolean;
    size: import("..").SizeEnum;
    readonly: boolean;
    status: "error" | "default" | "success" | "warning";
    placeholder: string;
    modelValue: string;
    defaultValue: string;
    clearable: boolean;
    filterable: boolean;
    highlightKeyword: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const HighlightOption: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        content: StringConstructor;
        keyword: StringConstructor;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        content: StringConstructor;
        keyword: StringConstructor;
    }>>, {}, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        content: StringConstructor;
        keyword: StringConstructor;
    }>>, () => JSX.Element, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    content: StringConstructor;
    keyword: StringConstructor;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default AutoComplete;
