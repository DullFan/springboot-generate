import { PropType } from 'vue';
import { CommonDisplayFileProps } from '../interface';
import { UploadFile, TdUploadProps } from '../type';
import { UploadDragEvents } from '../hooks/useDrag';
import { UploadConfig } from '../../config-provider';
export interface ImageFlowListProps extends CommonDisplayFileProps {
    uploadFiles?: (toFiles?: UploadFile[]) => void;
    cancelUpload?: (context: {
        e: MouseEvent;
        file?: UploadFile;
    }) => void;
    dragEvents: UploadDragEvents;
    disabled?: boolean;
    isBatchUpload?: boolean;
    draggable?: boolean;
    onPreview?: TdUploadProps['onPreview'];
    uploadButton?: TdUploadProps['uploadButton'];
    cancelUploadButton?: TdUploadProps['cancelUploadButton'];
}
declare const _default: import("vue").DefineComponent<{
    showThumbnail: BooleanConstructor;
    uploadFiles: PropType<(toFiles?: UploadFile[]) => void>;
    cancelUpload: PropType<(context: {
        e: MouseEvent;
        file?: UploadFile;
    }) => void>;
    dragEvents: PropType<UploadDragEvents>;
    disabled: BooleanConstructor;
    isBatchUpload: BooleanConstructor;
    draggable: BooleanConstructor;
    showImageFileName: BooleanConstructor;
    uploadButton: PropType<import("../../button").TdButtonProps | ((h: typeof import("vue").h, props: {
        disabled: boolean;
        uploading: boolean;
        uploadFiles: () => void;
        uploadText: string;
    }) => import("../..").SlotReturnValue)>;
    cancelUploadButton: PropType<import("../../button").TdButtonProps | ((h: typeof import("vue").h, props: {
        disabled: boolean;
        cancelUploadText: string;
        cancelUpload: (ctx: {
            e: MouseEvent;
        }) => void;
    }) => import("../..").SlotReturnValue)>;
    onPreview: PropType<(options: {
        file: UploadFile;
        index: number;
        e: MouseEvent;
    }) => void>;
    accept: StringConstructor;
    files: PropType<UploadFile[]>;
    toUploadFiles: PropType<UploadFile[]>;
    displayFiles: PropType<UploadFile[]>;
    theme: PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
    abridgeName: PropType<number[]>;
    placeholder: StringConstructor;
    classPrefix: StringConstructor;
    tips: (FunctionConstructor | StringConstructor)[];
    status: PropType<"error" | "default" | "success" | "warning">;
    locale: PropType<UploadConfig>;
    sizeOverLimitMessage: StringConstructor;
    autoUpload: BooleanConstructor;
    uploadPastedFiles: BooleanConstructor;
    onPasteFileChange: PropType<(payload: ClipboardEvent) => void>;
    uploading: BooleanConstructor;
    tipsClasses: PropType<string>;
    errorClasses: PropType<string[]>;
    placeholderClass: PropType<string>;
    showUploadProgress: BooleanConstructor;
    default: PropType<(h: typeof import("vue").h) => import("../..").SlotReturnValue>;
    fileListDisplay: PropType<(h: typeof import("vue").h, props: {
        files: UploadFile[];
        dragEvents?: import("../..").UploadDisplayDragEvents;
    }) => import("../..").SlotReturnValue>;
    onRemove: PropType<(p: import("../type").UploadRemoveContext) => void>;
    imageViewerProps: PropType<import("../../image-viewer").TdImageViewerProps>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    showThumbnail: BooleanConstructor;
    uploadFiles: PropType<(toFiles?: UploadFile[]) => void>;
    cancelUpload: PropType<(context: {
        e: MouseEvent;
        file?: UploadFile;
    }) => void>;
    dragEvents: PropType<UploadDragEvents>;
    disabled: BooleanConstructor;
    isBatchUpload: BooleanConstructor;
    draggable: BooleanConstructor;
    showImageFileName: BooleanConstructor;
    uploadButton: PropType<import("../../button").TdButtonProps | ((h: typeof import("vue").h, props: {
        disabled: boolean;
        uploading: boolean;
        uploadFiles: () => void;
        uploadText: string;
    }) => import("../..").SlotReturnValue)>;
    cancelUploadButton: PropType<import("../../button").TdButtonProps | ((h: typeof import("vue").h, props: {
        disabled: boolean;
        cancelUploadText: string;
        cancelUpload: (ctx: {
            e: MouseEvent;
        }) => void;
    }) => import("../..").SlotReturnValue)>;
    onPreview: PropType<(options: {
        file: UploadFile;
        index: number;
        e: MouseEvent;
    }) => void>;
    accept: StringConstructor;
    files: PropType<UploadFile[]>;
    toUploadFiles: PropType<UploadFile[]>;
    displayFiles: PropType<UploadFile[]>;
    theme: PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
    abridgeName: PropType<number[]>;
    placeholder: StringConstructor;
    classPrefix: StringConstructor;
    tips: (FunctionConstructor | StringConstructor)[];
    status: PropType<"error" | "default" | "success" | "warning">;
    locale: PropType<UploadConfig>;
    sizeOverLimitMessage: StringConstructor;
    autoUpload: BooleanConstructor;
    uploadPastedFiles: BooleanConstructor;
    onPasteFileChange: PropType<(payload: ClipboardEvent) => void>;
    uploading: BooleanConstructor;
    tipsClasses: PropType<string>;
    errorClasses: PropType<string[]>;
    placeholderClass: PropType<string>;
    showUploadProgress: BooleanConstructor;
    default: PropType<(h: typeof import("vue").h) => import("../..").SlotReturnValue>;
    fileListDisplay: PropType<(h: typeof import("vue").h, props: {
        files: UploadFile[];
        dragEvents?: import("../..").UploadDisplayDragEvents;
    }) => import("../..").SlotReturnValue>;
    onRemove: PropType<(p: import("../type").UploadRemoveContext) => void>;
    imageViewerProps: PropType<import("../../image-viewer").TdImageViewerProps>;
}>>, {
    draggable: boolean;
    disabled: boolean;
    autoUpload: boolean;
    uploadPastedFiles: boolean;
    uploading: boolean;
    showUploadProgress: boolean;
    showImageFileName: boolean;
    showThumbnail: boolean;
    isBatchUpload: boolean;
}, {}>;
export default _default;
