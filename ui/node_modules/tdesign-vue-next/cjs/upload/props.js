/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var props = {
  abridgeName: {
    type: Array
  },
  accept: {
    type: String,
    "default": ""
  },
  action: {
    type: String,
    "default": ""
  },
  allowUploadDuplicateFile: Boolean,
  autoUpload: {
    type: Boolean,
    "default": true
  },
  beforeAllFilesUpload: {
    type: Function
  },
  beforeUpload: {
    type: Function
  },
  cancelUploadButton: {
    type: [Object, Function]
  },
  data: {
    type: Object
  },
  "default": {
    type: [String, Function]
  },
  disabled: Boolean,
  dragContent: {
    type: [String, Function]
  },
  draggable: {
    type: Boolean,
    "default": void 0
  },
  fileListDisplay: {
    type: Function
  },
  files: {
    type: Array,
    "default": void 0
  },
  defaultFiles: {
    type: Array,
    "default": function _default() {
      return [];
    }
  },
  format: {
    type: Function
  },
  formatRequest: {
    type: Function
  },
  formatResponse: {
    type: Function
  },
  headers: {
    type: Object
  },
  imageViewerProps: {
    type: Object
  },
  inputAttributes: {
    type: Object
  },
  isBatchUpload: Boolean,
  locale: {
    type: Object
  },
  max: {
    type: Number,
    "default": 0
  },
  method: {
    type: String,
    "default": "POST",
    validator: function validator(val) {
      if (!val) return true;
      return ["POST", "GET", "PUT", "OPTION", "PATCH", "post", "get", "put", "option", "patch"].includes(val);
    }
  },
  mockProgressDuration: {
    type: Number
  },
  multiple: Boolean,
  name: {
    type: String,
    "default": "file"
  },
  placeholder: {
    type: String,
    "default": ""
  },
  requestMethod: {
    type: Function
  },
  showImageFileName: {
    type: Boolean,
    "default": true
  },
  showThumbnail: Boolean,
  showUploadProgress: {
    type: Boolean,
    "default": true
  },
  sizeLimit: {
    type: [Number, Object]
  },
  status: {
    type: String,
    validator: function validator(val) {
      if (!val) return true;
      return ["default", "success", "warning", "error"].includes(val);
    }
  },
  theme: {
    type: String,
    "default": "file",
    validator: function validator(val) {
      if (!val) return true;
      return ["custom", "file", "file-input", "file-flow", "image", "image-flow"].includes(val);
    }
  },
  tips: {
    type: [String, Function]
  },
  trigger: {
    type: Function
  },
  triggerButtonProps: {
    type: Object
  },
  uploadAllFilesInOneRequest: Boolean,
  uploadButton: {
    type: [Object, Function]
  },
  uploadPastedFiles: {
    type: Boolean,
    "default": true
  },
  useMockProgress: {
    type: Boolean,
    "default": true
  },
  value: {
    type: Array,
    "default": void 0
  },
  modelValue: {
    type: Array,
    "default": void 0
  },
  defaultValue: {
    type: Array,
    "default": function _default() {
      return [];
    }
  },
  withCredentials: Boolean,
  onCancelUpload: Function,
  onChange: Function,
  onDragenter: Function,
  onDragleave: Function,
  onDrop: Function,
  onFail: Function,
  onOneFileFail: Function,
  onOneFileSuccess: Function,
  onPreview: Function,
  onProgress: Function,
  onRemove: Function,
  onSelectChange: Function,
  onSuccess: Function,
  onValidate: Function,
  onWaitingUploadFilesChange: Function
};

exports["default"] = props;
//# sourceMappingURL=props.js.map
