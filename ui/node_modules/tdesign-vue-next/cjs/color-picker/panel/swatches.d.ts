import { PropType } from 'vue';
import { Color } from '../utils';
declare const _default: import("vue").DefineComponent<{
    colors: {
        type: PropType<string[]>;
        default: () => PropType<string[]>;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    editable: {
        type: BooleanConstructor;
        default: boolean;
    };
    onSetColor: {
        type: FunctionConstructor;
        default: () => () => void;
    };
    handleAddColor: {
        type: FunctionConstructor;
        default: () => () => void;
    };
    disabled: BooleanConstructor;
    color: {
        type: PropType<Color>;
    };
    onChange: {
        type: FunctionConstructor;
        default: () => () => void;
    };
}, {
    baseClassName: import("vue").ComputedRef<string>;
    DeleteIcon: import("tdesign-icons-vue-next").GlobalIconType;
    AddIcon: import("tdesign-icons-vue-next").GlobalIconType;
    statusClassNames: {
        loading: string;
        loadMore: string;
        disabled: string;
        focused: string;
        success: string;
        error: string;
        warning: string;
        selected: string;
        active: string;
        checked: string;
        current: string;
        hidden: string;
        visible: string;
        expanded: string;
        indeterminate: string;
    };
    selectedColorIndex: import("vue").ComputedRef<number>;
    visiblePopConfirm: import("vue").Ref<boolean>;
    setVisiblePopConfirm: (visible: boolean) => void;
    handleClick: (color: string) => any;
    isEqualCurrentColor: (color: string) => boolean;
    handleRemoveColor: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    colors: {
        type: PropType<string[]>;
        default: () => PropType<string[]>;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    editable: {
        type: BooleanConstructor;
        default: boolean;
    };
    onSetColor: {
        type: FunctionConstructor;
        default: () => () => void;
    };
    handleAddColor: {
        type: FunctionConstructor;
        default: () => () => void;
    };
    disabled: BooleanConstructor;
    color: {
        type: PropType<Color>;
    };
    onChange: {
        type: FunctionConstructor;
        default: () => () => void;
    };
}>>, {
    title: string;
    disabled: boolean;
    onChange: Function;
    colors: string[];
    editable: boolean;
    onSetColor: Function;
    handleAddColor: Function;
}, {}>;
export default _default;
