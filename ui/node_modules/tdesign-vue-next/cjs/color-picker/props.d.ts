import { TdColorPickerProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    clearable: BooleanConstructor;
    closeBtn: {
        type: PropType<string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    colorModes: {
        type: PropType<("monochrome" | "linear-gradient")[]>;
        default: () => string[];
    };
    disabled: BooleanConstructor;
    enableAlpha: BooleanConstructor;
    enableMultipleGradient: {
        type: BooleanConstructor;
        default: boolean;
    };
    format: {
        type: PropType<"RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS">;
        default: "RGB" | "RGBA" | "HSL" | "HSLA" | "HSB" | "HSV" | "HSVA" | "HEX" | "CMYK" | "CSS";
        validator(val: TdColorPickerProps['format']): boolean;
    };
    inputProps: {
        type: PropType<import("..").InputProps<import("..").InputValue>>;
    };
    multiple: BooleanConstructor;
    popupProps: {
        type: PropType<import("..").TdPopupProps>;
    };
    recentColors: {
        type: PropType<boolean | string[]>;
        default: any;
    };
    defaultRecentColors: {
        type: PropType<boolean | string[]>;
        default: () => TdColorPickerProps['defaultRecentColors'];
    };
    selectInputProps: {
        type: PropType<import("..").TdSelectInputProps>;
    };
    showPrimaryColorPreview: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<import("..").SizeEnum>;
        default: import("..").SizeEnum;
        validator(val: TdColorPickerProps['size']): boolean;
    };
    swatchColors: {
        type: PropType<string[]>;
    };
    value: {
        type: StringConstructor;
        default: any;
    };
    modelValue: {
        type: StringConstructor;
        default: any;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onChange: PropType<(value: string, context: {
        color: import("./type").ColorObject;
        trigger: import("./type").ColorPickerChangeTrigger;
    }) => void>;
    onPaletteBarChange: PropType<(context: {
        color: import("./type").ColorObject;
    }) => void>;
    onRecentColorsChange: PropType<(value: string[]) => void>;
};
export default _default;
