/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var tree_treeItem = require('../tree-item.js');
var tree_hooks_useTreeEvents = require('./useTreeEvents.js');
var _common_js_tree_treeNode = require('../../_common/js/tree/tree-node.js');
require('@babel/runtime/helpers/defineProperty');
require('../adapt.js');
require('../../utils/withInstall.js');
require('../../hooks/useVModel.js');
require('lodash/kebabCase');
require('../../hooks/useDefaultValue.js');
require('tdesign-icons-vue-next');
require('../../checkbox/index.js');
require('../../checkbox/checkbox.js');
require('@babel/runtime/helpers/slicedToArray');
require('../../checkbox/props.js');
require('../../hooks/useRipple.js');
require('../../hooks/useKeepAnimation.js');
require('../../config-provider/useConfig.js');
require('lodash/isFunction');
require('lodash/cloneDeep');
require('lodash/isString');
require('../../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../../_common/js/global-config/default-config.js');
require('../../_common/js/global-config/locale/zh_CN.js');
require('../../_chunks/dep-c6b6a048.js');
require('@babel/runtime/helpers/typeof');
require('../../_chunks/dep-4980a22e.js');
require('dayjs');
require('lodash/isArray');
require('../../hooks/useConfig.js');
require('../../utils/set-style.js');
require('../../hooks/tnode.js');
require('lodash/camelCase');
require('../../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isObject');
require('../../checkbox/constants.js');
require('../../checkbox/hooks/useCheckboxLazyLoad.js');
require('../../_common/js/utils/observe.js');
require('../../checkbox/hooks/useKeyboardEvent.js');
require('../../_common/js/common.js');
require('../../hooks/useDisabled.js');
require('lodash/isBoolean');
require('../../checkbox/group.js');
require('@babel/runtime/helpers/toConsumableArray');
require('lodash/intersection');
require('lodash/isUndefined');
require('../../checkbox/checkbox-group-props.js');
require('../../hooks/slot.js');
require('../../loading/index.js');
require('../../loading/directive.js');
require('lodash/mapKeys');
require('lodash/isEqual');
require('../../loading/plugin.js');
require('../../loading/loading.js');
require('../../loading/icon/gradient.js');
require('../../_common/js/loading/circle-adapter.js');
require('../../_common/js/utils/set-style.js');
require('../../_common/js/utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('lodash/isNull');
require('lodash/isNumber');
require('../../utils/dom.js');
require('../../utils/easing.js');
require('../../loading/props.js');
require('../../hooks/useTeleport.js');
require('../../hooks/useGlobalIcon.js');
require('../../hooks/useLazyLoad.js');
require('../../hooks/useVirtualScrollNew.js');
require('../../hooks/useResizeObserver.js');
require('lodash/max');
require('lodash/min');
require('lodash/sum');
require('lodash/throttle');
require('@babel/runtime/helpers/asyncToGenerator');
require('@babel/runtime/helpers/classCallCheck');
require('@babel/runtime/helpers/createClass');
require('@babel/runtime/regenerator');
require('lodash/uniqueId');
require('lodash/isNil');
require('lodash/get');
require('../../_common/js/tree/tree-node-model.js');
require('lodash/omit');
require('../../_common/js/log/log.js');
require('./useItemState.js');
require('./useTreeItem.js');
require('./useItemEvents.js');
require('./useRenderIcon.js');
require('../util.js');
require('./useRenderLabel.js');
require('./useRenderLine.js');
require('./useRenderOperations.js');
require('./useDraggable.js');
require('./useTreeAction.js');

function useTreeNodes(state) {
  var store = state.store,
    scope = state.scope,
    allNodes = state.allNodes,
    nodes = state.nodes,
    virtualConfig = state.virtualConfig;
  var _useTreeEvents = tree_hooks_useTreeEvents["default"](state),
    handleClick = _useTreeEvents.handleClick,
    handleChange = _useTreeEvents.handleChange;
  var nodesEmpty = Vue.ref(false);
  var cacheMap = /* @__PURE__ */new Map();
  var refresh = function refresh() {
    allNodes.value = store.getNodes();
  };
  var refreshVisibleNodes = function refreshVisibleNodes() {
    var isVirtual = virtualConfig === null || virtualConfig === void 0 ? void 0 : virtualConfig.isVirtualScroll.value;
    if (isVirtual) return;
    var list = [];
    var hasVisibleNode = false;
    allNodes.value.forEach(function (node) {
      if (node.visible) {
        hasVisibleNode = true;
        cacheMap.set(node.value, node.value);
      }
      if (cacheMap.has(node.value)) {
        list.push(node);
      }
    });
    cacheMap.forEach(function (value) {
      if (!store.getNode(value)) {
        cacheMap["delete"](value);
      }
    });
    nodes.value = list;
    nodesEmpty.value = !hasVisibleNode;
  };
  var refreshVirtualNodes = function refreshVirtualNodes() {
    var isVirtual = virtualConfig === null || virtualConfig === void 0 ? void 0 : virtualConfig.isVirtualScroll.value;
    if (!isVirtual) return;
    var list = virtualConfig.visibleData.value;
    nodes.value = list;
    nodesEmpty.value = list.length <= 0;
  };
  var renderItem = function renderItem(h, node, index, stateId) {
    var rowIndex = node.VIRTUAL_SCROLL_INDEX || index;
    var nodeUniqueId = node[_common_js_tree_treeNode.privateKey];
    var treeItem = Vue.createVNode(tree_treeItem["default"], {
      "key": nodeUniqueId,
      "rowIndex": rowIndex,
      "stateId": stateId,
      "itemKey": nodeUniqueId,
      "treeScope": scope,
      "onClick": handleClick,
      "onChange": handleChange
    }, null);
    return treeItem;
  };
  var renderTreeNodes = function renderTreeNodes(h) {
    var stateId = "render-".concat(new Date().getTime());
    var treeNodeViews = nodes.value.map(function (node, index) {
      return renderItem(h, node, index, stateId);
    });
    return treeNodeViews;
  };
  Vue.watch(allNodes, refreshVisibleNodes);
  Vue.watch(virtualConfig.visibleData, refreshVirtualNodes);
  refresh();
  refreshVisibleNodes();
  refreshVirtualNodes();
  store.emitter.on("update", refresh);
  return {
    nodesEmpty: nodesEmpty,
    renderTreeNodes: renderTreeNodes
  };
}

exports["default"] = useTreeNodes;
//# sourceMappingURL=useTreeNodes.js.map
