{"version":3,"file":"props.js","sources":["../../src/tree/props.ts"],"sourcesContent":["/* eslint-disable */\n\n/**\n * 该文件为脚本自动生成文件，请勿随意修改。如需修改请联系 PMC\n * */\n\nimport { TdTreeProps } from './type';\nimport { PropType } from 'vue';\n\nexport default {\n  /** 节点是否可高亮 */\n  activable: Boolean,\n  /** 是否允许多个节点同时高亮 */\n  activeMultiple: Boolean,\n  /** 高亮的节点值 */\n  actived: {\n    type: Array as PropType<TdTreeProps['actived']>,\n    default: undefined as TdTreeProps['actived'],\n  },\n  /** 高亮的节点值，非受控属性 */\n  defaultActived: {\n    type: Array as PropType<TdTreeProps['defaultActived']>,\n  },\n  /** 是否允许在过滤时节点折叠节点 */\n  allowFoldNodeOnFilter: Boolean,\n  /** 透传属性到 checkbox 组件。参考 checkbox 组件 API */\n  checkProps: {\n    type: Object as PropType<TdTreeProps['checkProps']>,\n  },\n  /** 父子节点选中状态不再关联，可各自选中或取消 */\n  checkStrictly: Boolean,\n  /** 隐藏节点复选框 */\n  checkable: Boolean,\n  /** 树数据，泛型 `T` 表示树节点 TS 类型 */\n  data: {\n    type: Array as PropType<TdTreeProps['data']>,\n    default: (): TdTreeProps['data'] => [],\n  },\n  /** 禁用复选框，可支持禁用不同的行 */\n  disableCheck: {\n    type: [Boolean, Function] as PropType<TdTreeProps['disableCheck']>,\n    default: false as TdTreeProps['disableCheck'],\n  },\n  /** 是否禁用树操作 */\n  disabled: Boolean,\n  /** 节点是否可拖拽 */\n  draggable: Boolean,\n  /** 数据为空时展示的文本 */\n  empty: {\n    type: [String, Function] as PropType<TdTreeProps['empty']>,\n    default: '' as TdTreeProps['empty'],\n  },\n  /** 是否展开全部节点 */\n  expandAll: Boolean,\n  /** 默认展开的级别，第一层为 0 */\n  expandLevel: {\n    type: Number,\n    default: 0,\n  },\n  /** 同级别展开互斥，手风琴效果 */\n  expandMutex: Boolean,\n  /** 是否支持点击节点也能展开收起 */\n  expandOnClickNode: Boolean,\n  /** 展开子节点时是否自动展开父节点 */\n  expandParent: Boolean,\n  /** 展开的节点值 */\n  expanded: {\n    type: Array as PropType<TdTreeProps['expanded']>,\n    default: undefined as TdTreeProps['expanded'],\n  },\n  /** 展开的节点值，非受控属性 */\n  defaultExpanded: {\n    type: Array as PropType<TdTreeProps['defaultExpanded']>,\n    default: (): TdTreeProps['defaultExpanded'] => [],\n  },\n  /** 节点过滤方法，只呈现返回值为 true 的节点，泛型 `T` 表示树节点 TS 类型 */\n  filter: {\n    type: Function as PropType<TdTreeProps['filter']>,\n  },\n  /** 树的高度，超出后会出现滚动条。示例：100,  '30%',  '300'。值为数字类型，会自动加上单位 px。如果不是绝对固定树的高度，建议使用 `maxHeight` */\n  height: {\n    type: [String, Number] as PropType<TdTreeProps['height']>,\n  },\n  /** 节点是否有悬浮状态 */\n  hover: Boolean,\n  /** 节点图标，可自定义 */\n  icon: {\n    type: [Boolean, Function] as PropType<TdTreeProps['icon']>,\n    default: true as TdTreeProps['icon'],\n  },\n  /** 用来定义 `value / label / disabled / children` 在 `data` 数据中对应的字段别名，示例：`{ value: 'key', label 'name', children: 'list' }`。其中，disabled 待开发。 */\n  keys: {\n    type: Object as PropType<TdTreeProps['keys']>,\n  },\n  /** 自定义节点内容，值为 `false` 不显示，值为 `true` 显示默认 label，值为字符串直接输出该字符串。泛型 `T` 表示树节点 TS 类型。<br/>如果期望只有点击复选框才选中，而点击节点不选中，可以使用 `label` 自定义节点，然后加上点击事件 `e.preventDefault()`，通过调整自定义节点的宽度和高度决定禁止点击选中的范围 */\n  label: {\n    type: [String, Boolean, Function] as PropType<TdTreeProps['label']>,\n    default: true as TdTreeProps['label'],\n  },\n  /** 延迟加载 children 为 true 的节点的子节点数据，即使 expandAll 被设置为 true，也同样延迟加载 */\n  lazy: {\n    type: Boolean,\n    default: true,\n  },\n  /** 连接线。值为 false 不显示连接线；值为 true 显示默认连接线；值类型为 Function 表示自定义连接线 */\n  line: {\n    type: [Boolean, Function] as PropType<TdTreeProps['line']>,\n    default: false as TdTreeProps['line'],\n  },\n  /** 加载子数据的方法，在展开节点时调用（仅当节点 children 为 true 时生效），泛型 `T` 表示树节点 TS 类型 */\n  load: {\n    type: Function as PropType<TdTreeProps['load']>,\n  },\n  /** 树的最大高度，超出后会出现滚动条。示例：100, '30%', '300'。值为数字类型，会自动加上单位 px */\n  maxHeight: {\n    type: [String, Number] as PropType<TdTreeProps['maxHeight']>,\n  },\n  /** 自定义节点操作项，泛型 `T` 表示树节点 TS 类型 */\n  operations: {\n    type: Function as PropType<TdTreeProps['operations']>,\n  },\n  /** 懒加载和虚拟滚动。为保证组件收益最大化，当数据量小于阈值 `scroll.threshold` 时，无论虚拟滚动的配置是否存在，组件内部都不会开启虚拟滚动，`scroll.threshold` 默认为 `100` */\n  scroll: {\n    type: Object as PropType<TdTreeProps['scroll']>,\n  },\n  /** 节点展开折叠时是否使用过渡动画 */\n  transition: {\n    type: Boolean,\n    default: true,\n  },\n  /** 选中值，组件为可选状态时有效 */\n  value: {\n    type: Array as PropType<TdTreeProps['value']>,\n    default: undefined as TdTreeProps['value'],\n  },\n  modelValue: {\n    type: Array as PropType<TdTreeProps['value']>,\n    default: undefined as TdTreeProps['value'],\n  },\n  /** 选中值，组件为可选状态时有效，非受控属性 */\n  defaultValue: {\n    type: Array as PropType<TdTreeProps['defaultValue']>,\n    default: (): TdTreeProps['defaultValue'] => [],\n  },\n  /** 选中值模式。all 表示父节点和子节点全部会出现在选中值里面；parentFirst 表示当子节点全部选中时，仅父节点在选中值里面；onlyLeaft 表示无论什么情况，选中值仅呈现叶子节点 */\n  valueMode: {\n    type: String as PropType<TdTreeProps['valueMode']>,\n    default: 'onlyLeaf' as TdTreeProps['valueMode'],\n    validator(val: TdTreeProps['valueMode']): boolean {\n      if (!val) return true;\n      return ['onlyLeaf', 'parentFirst', 'all'].includes(val);\n    },\n  },\n  /** 节点激活时触发，泛型 `T` 表示树节点 TS 类型 */\n  onActive: Function as PropType<TdTreeProps['onActive']>,\n  /** 节点选中状态变化时触发，context.node 表示当前变化的选项，泛型 `T` 表示树节点 TS 类型 */\n  onChange: Function as PropType<TdTreeProps['onChange']>,\n  /** 节点点击时触发，泛型 `T` 表示树节点 TS 类型 */\n  onClick: Function as PropType<TdTreeProps['onClick']>,\n  /** 节点结束拖拽时触发，泛型 `T` 表示树节点 TS 类型 */\n  onDragEnd: Function as PropType<TdTreeProps['onDragEnd']>,\n  /** 节点拖拽时离开目标元素时触发，泛型 `T` 表示树节点 TS 类型 */\n  onDragLeave: Function as PropType<TdTreeProps['onDragLeave']>,\n  /** 节点拖拽到目标元素时触发，泛型 `T` 表示树节点 TS 类型 */\n  onDragOver: Function as PropType<TdTreeProps['onDragOver']>,\n  /** 节点开始拖拽时触发，泛型 `T` 表示树节点 TS 类型 */\n  onDragStart: Function as PropType<TdTreeProps['onDragStart']>,\n  /** 节点在目标元素上释放时触发，泛型 `T` 表示树节点 TS 类型 */\n  onDrop: Function as PropType<TdTreeProps['onDrop']>,\n  /** 节点展开或收起时触发，泛型 `T` 表示树节点 TS 类型 */\n  onExpand: Function as PropType<TdTreeProps['onExpand']>,\n  /** 异步加载后触发，泛型 `T` 表示树节点 TS 类型 */\n  onLoad: Function as PropType<TdTreeProps['onLoad']>,\n  /** 滚动事件 */\n  onScroll: Function as PropType<TdTreeProps['onScroll']>,\n};\n"],"names":["activable","Boolean","activeMultiple","actived","type","Array","defaultActived","allowFoldNodeOnFilter","checkProps","Object","checkStrictly","checkable","data","_default","disableCheck","Function","disabled","draggable","empty","String","expandAll","expandLevel","Number","expandMutex","expandOnClickNode","expandParent","expanded","defaultExpanded","filter","height","hover","icon","keys","label","lazy","line","load","maxHeight","operations","scroll","transition","value","modelValue","defaultValue","valueMode","validator","val","includes","onActive","onChange","onClick","onDragEnd","onDragLeave","onDragOver","onDragStart","onDrop","onExpand","onLoad","onScroll"],"mappings":"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"}