import { TdAffixProps } from './type';
import './style';
export * from './type';
export declare const Affix: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        container: {
            type: import("vue").PropType<import("..").ScrollContainer>;
            default: () => import("..").ScrollContainer;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        offsetBottom: {
            type: NumberConstructor;
            default: number;
        };
        offsetTop: {
            type: NumberConstructor;
            default: number;
        };
        zIndex: {
            type: NumberConstructor;
        };
        onFixedChange: import("vue").PropType<(affixed: boolean, context: {
            top: number;
        }) => void>;
    }>> & {
        onFixedChange?: (...args: any[]) => any;
    }, {
        affixWrapRef: import("vue").Ref<HTMLElement>;
        affixRef: import("vue").Ref<HTMLElement>;
        bindScroll: () => Promise<void>;
        unbindScroll: () => void;
        handleScroll: () => void;
        scrollContainer: import("vue").Ref<import("..").ScrollContainerElement>;
        renderTNodeJSX: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
        affixStyle: import("vue").Ref<Record<string, any>>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "fixedChange"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        container: {
            type: import("vue").PropType<import("..").ScrollContainer>;
            default: () => import("..").ScrollContainer;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        offsetBottom: {
            type: NumberConstructor;
            default: number;
        };
        offsetTop: {
            type: NumberConstructor;
            default: number;
        };
        zIndex: {
            type: NumberConstructor;
        };
        onFixedChange: import("vue").PropType<(affixed: boolean, context: {
            top: number;
        }) => void>;
    }>> & {
        onFixedChange?: (...args: any[]) => any;
    }, {
        offsetTop: number;
        container: import("..").ScrollContainer;
        offsetBottom: number;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        container: {
            type: import("vue").PropType<import("..").ScrollContainer>;
            default: () => import("..").ScrollContainer;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        offsetBottom: {
            type: NumberConstructor;
            default: number;
        };
        offsetTop: {
            type: NumberConstructor;
            default: number;
        };
        zIndex: {
            type: NumberConstructor;
        };
        onFixedChange: import("vue").PropType<(affixed: boolean, context: {
            top: number;
        }) => void>;
    }>> & {
        onFixedChange?: (...args: any[]) => any;
    }, {
        affixWrapRef: import("vue").Ref<HTMLElement>;
        affixRef: import("vue").Ref<HTMLElement>;
        bindScroll: () => Promise<void>;
        unbindScroll: () => void;
        handleScroll: () => void;
        scrollContainer: import("vue").Ref<import("..").ScrollContainerElement>;
        renderTNodeJSX: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
        affixStyle: import("vue").Ref<Record<string, any>>;
    }, {}, {}, {}, {
        offsetTop: number;
        container: import("..").ScrollContainer;
        offsetBottom: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    container: {
        type: import("vue").PropType<import("..").ScrollContainer>;
        default: () => import("..").ScrollContainer;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    offsetBottom: {
        type: NumberConstructor;
        default: number;
    };
    offsetTop: {
        type: NumberConstructor;
        default: number;
    };
    zIndex: {
        type: NumberConstructor;
    };
    onFixedChange: import("vue").PropType<(affixed: boolean, context: {
        top: number;
    }) => void>;
}>> & {
    onFixedChange?: (...args: any[]) => any;
}, {
    affixWrapRef: import("vue").Ref<HTMLElement>;
    affixRef: import("vue").Ref<HTMLElement>;
    bindScroll: () => Promise<void>;
    unbindScroll: () => void;
    handleScroll: () => void;
    scrollContainer: import("vue").Ref<import("..").ScrollContainerElement>;
    renderTNodeJSX: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
    affixStyle: import("vue").Ref<Record<string, any>>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "fixedChange"[], "fixedChange", {
    offsetTop: number;
    container: import("..").ScrollContainer;
    offsetBottom: number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare type AffixProps = TdAffixProps;
export default Affix;
