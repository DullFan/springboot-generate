import { TdAnchorProps, TdAnchorTargetProps, TdAnchorItemProps } from './type';
import './style';
export * from './type';
export declare type AnchorProps = TdAnchorProps;
export declare type AnchorTargetProps = TdAnchorTargetProps;
export declare type AnchorItemProps = TdAnchorItemProps;
export declare const Anchor: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        affixProps: {
            type: import("vue").PropType<import("..").TdAffixProps>;
        };
        bounds: {
            type: NumberConstructor;
            default: number;
        };
        container: {
            type: import("vue").PropType<import("..").ScrollContainer>;
            default: () => () => Window & typeof globalThis;
        };
        cursor: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        targetOffset: {
            type: NumberConstructor;
            default: number;
        };
        onChange: import("vue").PropType<(currentLink: string, prevLink: string) => void>;
        onClick: import("vue").PropType<(link: {
            href: string;
            title: string;
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        affixProps: {
            type: import("vue").PropType<import("..").TdAffixProps>;
        };
        bounds: {
            type: NumberConstructor;
            default: number;
        };
        container: {
            type: import("vue").PropType<import("..").ScrollContainer>;
            default: () => () => Window & typeof globalThis;
        };
        cursor: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        targetOffset: {
            type: NumberConstructor;
            default: number;
        };
        onChange: import("vue").PropType<(currentLink: string, prevLink: string) => void>;
        onClick: import("vue").PropType<(link: {
            href: string;
            title: string;
            e: MouseEvent;
        }) => void>;
    }>>, {
        size: "small" | "medium" | "large";
        container: import("..").ScrollContainer;
        bounds: number;
        targetOffset: number;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        affixProps: {
            type: import("vue").PropType<import("..").TdAffixProps>;
        };
        bounds: {
            type: NumberConstructor;
            default: number;
        };
        container: {
            type: import("vue").PropType<import("..").ScrollContainer>;
            default: () => () => Window & typeof globalThis;
        };
        cursor: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        targetOffset: {
            type: NumberConstructor;
            default: number;
        };
        onChange: import("vue").PropType<(currentLink: string, prevLink: string) => void>;
        onClick: import("vue").PropType<(link: {
            href: string;
            title: string;
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        size: "small" | "medium" | "large";
        container: import("..").ScrollContainer;
        bounds: number;
        targetOffset: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    affixProps: {
        type: import("vue").PropType<import("..").TdAffixProps>;
    };
    bounds: {
        type: NumberConstructor;
        default: number;
    };
    container: {
        type: import("vue").PropType<import("..").ScrollContainer>;
        default: () => () => Window & typeof globalThis;
    };
    cursor: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    targetOffset: {
        type: NumberConstructor;
        default: number;
    };
    onChange: import("vue").PropType<(currentLink: string, prevLink: string) => void>;
    onClick: import("vue").PropType<(link: {
        href: string;
        title: string;
        e: MouseEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    size: "small" | "medium" | "large";
    container: import("..").ScrollContainer;
    bounds: number;
    targetOffset: number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const AnchorItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        href: {
            type: StringConstructor;
            required: boolean;
            validator(v: string): boolean;
        };
        target: {
            type: import("vue").PropType<"_self" | "_blank" | "_parent" | "_top">;
            default: "_self" | "_blank" | "_parent" | "_top";
            validator(val: "_self" | "_blank" | "_parent" | "_top"): boolean;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        href: {
            type: StringConstructor;
            required: boolean;
            validator(v: string): boolean;
        };
        target: {
            type: import("vue").PropType<"_self" | "_blank" | "_parent" | "_top">;
            default: "_self" | "_blank" | "_parent" | "_top";
            validator(val: "_self" | "_blank" | "_parent" | "_top"): boolean;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
    }>>, {
        title: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        target: "_self" | "_blank" | "_parent" | "_top";
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        href: {
            type: StringConstructor;
            required: boolean;
            validator(v: string): boolean;
        };
        target: {
            type: import("vue").PropType<"_self" | "_blank" | "_parent" | "_top">;
            default: "_self" | "_blank" | "_parent" | "_top";
            validator(val: "_self" | "_blank" | "_parent" | "_top"): boolean;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        title: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        target: "_self" | "_blank" | "_parent" | "_top";
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    href: {
        type: StringConstructor;
        required: boolean;
        validator(v: string): boolean;
    };
    target: {
        type: import("vue").PropType<"_self" | "_blank" | "_parent" | "_top">;
        default: "_self" | "_blank" | "_parent" | "_top";
        validator(val: "_self" | "_blank" | "_parent" | "_top"): boolean;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    title: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    target: "_self" | "_blank" | "_parent" | "_top";
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const AnchorTarget: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
    }>>, {
        id: string;
        tag: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        id: string;
        tag: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    id: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    id: string;
    tag: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Anchor;
