declare const _default: import("vue").DefineComponent<{
    showInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    keepWrapperWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    align: {
        type: import("vue").PropType<"center" | "left" | "right">;
        default: "center" | "left" | "right";
        validator(val: "center" | "left" | "right"): boolean;
    };
    allowInputOverMax: BooleanConstructor;
    autoWidth: BooleanConstructor;
    autocomplete: {
        type: StringConstructor;
        default: any;
    };
    autofocus: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    disabled: BooleanConstructor;
    format: {
        type: import("vue").PropType<import("./type").InputFormatType>;
    };
    inputClass: {
        type: import("vue").PropType<import("../common").ClassName>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: import("vue").PropType<string | number>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    showClearIconOnEmpty: BooleanConstructor;
    showLimitNumber: BooleanConstructor;
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    type: {
        type: import("vue").PropType<"number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel">;
        default: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
        validator(val: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel"): boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").InputValue>;
        default: import("./type").InputValue;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").InputValue>;
        default: import("./type").InputValue;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").InputValue>;
    };
    onBlur: import("vue").PropType<(value: import("./type").InputValue, context: {
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").InputValue, context?: {
        e?: MouseEvent | CompositionEvent | InputEvent;
        trigger: "input" | "clear" | "initial";
    }) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onCompositionend: import("vue").PropType<(value: string, context: {
        e: CompositionEvent;
    }) => void>;
    onCompositionstart: import("vue").PropType<(value: string, context: {
        e: CompositionEvent;
    }) => void>;
    onEnter: import("vue").PropType<(value: import("./type").InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: import("./type").InputValue, context: {
        e: FocusEvent;
    }) => void>;
    onKeydown: import("vue").PropType<(value: import("./type").InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeypress: import("vue").PropType<(value: import("./type").InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeyup: import("vue").PropType<(value: import("./type").InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onMouseenter: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPaste: import("vue").PropType<(context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void>;
    onValidate: import("vue").PropType<(context: {
        error?: "exceed-maximum" | "below-minimum";
    }) => void>;
    onWheel: import("vue").PropType<(context: {
        e: WheelEvent;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    showInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    keepWrapperWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    align: {
        type: import("vue").PropType<"center" | "left" | "right">;
        default: "center" | "left" | "right";
        validator(val: "center" | "left" | "right"): boolean;
    };
    allowInputOverMax: BooleanConstructor;
    autoWidth: BooleanConstructor;
    autocomplete: {
        type: StringConstructor;
        default: any;
    };
    autofocus: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    disabled: BooleanConstructor;
    format: {
        type: import("vue").PropType<import("./type").InputFormatType>;
    };
    inputClass: {
        type: import("vue").PropType<import("../common").ClassName>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: import("vue").PropType<string | number>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    showClearIconOnEmpty: BooleanConstructor;
    showLimitNumber: BooleanConstructor;
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    type: {
        type: import("vue").PropType<"number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel">;
        default: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
        validator(val: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel"): boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").InputValue>;
        default: import("./type").InputValue;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").InputValue>;
        default: import("./type").InputValue;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").InputValue>;
    };
    onBlur: import("vue").PropType<(value: import("./type").InputValue, context: {
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").InputValue, context?: {
        e?: MouseEvent | CompositionEvent | InputEvent;
        trigger: "input" | "clear" | "initial";
    }) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onCompositionend: import("vue").PropType<(value: string, context: {
        e: CompositionEvent;
    }) => void>;
    onCompositionstart: import("vue").PropType<(value: string, context: {
        e: CompositionEvent;
    }) => void>;
    onEnter: import("vue").PropType<(value: import("./type").InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: import("./type").InputValue, context: {
        e: FocusEvent;
    }) => void>;
    onKeydown: import("vue").PropType<(value: import("./type").InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeypress: import("vue").PropType<(value: import("./type").InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeyup: import("vue").PropType<(value: import("./type").InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onMouseenter: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPaste: import("vue").PropType<(context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void>;
    onValidate: import("vue").PropType<(context: {
        error?: "exceed-maximum" | "below-minimum";
    }) => void>;
    onWheel: import("vue").PropType<(context: {
        e: WheelEvent;
    }) => void>;
}>>, {
    type: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
    name: string;
    value: import("./type").InputValue;
    autocomplete: string;
    autofocus: boolean;
    disabled: boolean;
    size: import("../common").SizeEnum;
    readonly: boolean;
    status: "error" | "default" | "success" | "warning";
    placeholder: string;
    align: "center" | "left" | "right";
    modelValue: import("./type").InputValue;
    allowInputOverMax: boolean;
    showInput: boolean;
    keepWrapperWidth: boolean;
    autoWidth: boolean;
    borderless: boolean;
    clearable: boolean;
    showClearIconOnEmpty: boolean;
    showLimitNumber: boolean;
}, {}>;
export default _default;
