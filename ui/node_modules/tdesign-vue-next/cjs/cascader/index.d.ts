import { TdCascaderProps } from './type';
import { TreeOptionData } from '../common';
import './style';
export * from './type';
export declare type CascaderProps<T extends TreeOptionData = TreeOptionData> = TdCascaderProps<T>;
export declare type CascaderPanelProps<T extends TreeOptionData = TreeOptionData> = TdCascaderProps<T>;
export declare const Cascader: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        checkProps: {
            type: import("vue").PropType<import("..").TdCheckboxProps>;
        };
        checkStrictly: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: TreeOptionData<string | number>[];
                collapsedSelectedItems: TreeOptionData<string | number>[];
                count: number;
                onClose: (context: {
                    index: number;
                    e?: MouseEvent;
                }) => void;
            }) => import("../common").SlotReturnValue>;
        };
        disabled: BooleanConstructor;
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        filter: {
            type: import("vue").PropType<(filterWords: string, node: import("./interface").TreeNodeModel<TreeOptionData<string | number>>) => boolean | Promise<boolean>>;
        };
        filterable: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        keys: {
            type: import("vue").PropType<import("../common").TreeKeysType>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        load: {
            type: import("vue").PropType<(node: import("./interface").TreeNodeModel<TreeOptionData<string | number>>) => Promise<TreeOptionData<string | number>[]>>;
        };
        loading: BooleanConstructor;
        loadingText: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        option: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                item: TreeOptionData<string | number>;
                index: number;
            }) => import("../common").SlotReturnValue>;
        };
        options: {
            type: import("vue").PropType<TreeOptionData<string | number>[]>;
            default: () => TreeOptionData<string | number>[];
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        popupVisible: BooleanConstructor;
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        reserveKeyword: BooleanConstructor;
        selectInputProps: {
            type: import("vue").PropType<import("./interface").TdSelectInputProps>;
        };
        showAllLevels: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            default: import("../common").SizeEnum;
            validator(val: import("../common").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        tagInputProps: {
            type: import("vue").PropType<import("..").TdTagInputProps>;
        };
        tagProps: {
            type: import("vue").PropType<import("..").TdTagProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        trigger: {
            type: import("vue").PropType<"click" | "hover">;
            default: "click" | "hover";
            validator(val: "click" | "hover"): boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
            default: import("./type").CascaderValue<TreeOptionData<string | number>>;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
            default: import("./type").CascaderValue<TreeOptionData<string | number>>;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
            default: () => import("./type").CascaderValue<TreeOptionData<string | number>>;
        };
        valueDisplay: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: import("./type").CascaderValue<TreeOptionData<string | number>>;
                onClose: (index: number) => void;
                displayValue?: import("./type").CascaderValue<TreeOptionData<string | number>>;
                selectedOptions: TreeOptionData<string | number>[];
            }) => import("../common").SlotReturnValue)>;
        };
        valueMode: {
            type: import("vue").PropType<"all" | "onlyLeaf" | "parentFirst">;
            default: "all" | "onlyLeaf" | "parentFirst";
            validator(val: "all" | "onlyLeaf" | "parentFirst"): boolean;
        };
        valueType: {
            type: import("vue").PropType<"full" | "single">;
            default: "full" | "single";
            validator(val: "full" | "single"): boolean;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").CascaderValue<TreeOptionData<string | number>>;
        } & import("..").PopupVisibleChangeContext & {
            inputValue: string;
            tagInputValue?: import("..").TagInputValue;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").CascaderValue<TreeOptionData<string | number>>, context: import("./type").CascaderChangeContext<TreeOptionData<string | number>>) => void>;
        onFocus: import("vue").PropType<(context: {
            value: import("./type").CascaderValue<TreeOptionData<string | number>>;
            e: FocusEvent;
        }) => void>;
        onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
        onRemove: import("vue").PropType<(context: import("./type").RemoveContext<TreeOptionData<string | number>>) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        checkProps: {
            type: import("vue").PropType<import("..").TdCheckboxProps>;
        };
        checkStrictly: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: TreeOptionData<string | number>[];
                collapsedSelectedItems: TreeOptionData<string | number>[];
                count: number;
                onClose: (context: {
                    index: number;
                    e?: MouseEvent;
                }) => void;
            }) => import("../common").SlotReturnValue>;
        };
        disabled: BooleanConstructor;
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        filter: {
            type: import("vue").PropType<(filterWords: string, node: import("./interface").TreeNodeModel<TreeOptionData<string | number>>) => boolean | Promise<boolean>>;
        };
        filterable: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        keys: {
            type: import("vue").PropType<import("../common").TreeKeysType>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        load: {
            type: import("vue").PropType<(node: import("./interface").TreeNodeModel<TreeOptionData<string | number>>) => Promise<TreeOptionData<string | number>[]>>;
        };
        loading: BooleanConstructor;
        loadingText: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        option: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                item: TreeOptionData<string | number>;
                index: number;
            }) => import("../common").SlotReturnValue>;
        };
        options: {
            type: import("vue").PropType<TreeOptionData<string | number>[]>;
            default: () => TreeOptionData<string | number>[];
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        popupVisible: BooleanConstructor;
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        reserveKeyword: BooleanConstructor;
        selectInputProps: {
            type: import("vue").PropType<import("./interface").TdSelectInputProps>;
        };
        showAllLevels: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            default: import("../common").SizeEnum;
            validator(val: import("../common").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        tagInputProps: {
            type: import("vue").PropType<import("..").TdTagInputProps>;
        };
        tagProps: {
            type: import("vue").PropType<import("..").TdTagProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        trigger: {
            type: import("vue").PropType<"click" | "hover">;
            default: "click" | "hover";
            validator(val: "click" | "hover"): boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
            default: import("./type").CascaderValue<TreeOptionData<string | number>>;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
            default: import("./type").CascaderValue<TreeOptionData<string | number>>;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
            default: () => import("./type").CascaderValue<TreeOptionData<string | number>>;
        };
        valueDisplay: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: import("./type").CascaderValue<TreeOptionData<string | number>>;
                onClose: (index: number) => void;
                displayValue?: import("./type").CascaderValue<TreeOptionData<string | number>>;
                selectedOptions: TreeOptionData<string | number>[];
            }) => import("../common").SlotReturnValue)>;
        };
        valueMode: {
            type: import("vue").PropType<"all" | "onlyLeaf" | "parentFirst">;
            default: "all" | "onlyLeaf" | "parentFirst";
            validator(val: "all" | "onlyLeaf" | "parentFirst"): boolean;
        };
        valueType: {
            type: import("vue").PropType<"full" | "single">;
            default: "full" | "single";
            validator(val: "full" | "single"): boolean;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").CascaderValue<TreeOptionData<string | number>>;
        } & import("..").PopupVisibleChangeContext & {
            inputValue: string;
            tagInputValue?: import("..").TagInputValue;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").CascaderValue<TreeOptionData<string | number>>, context: import("./type").CascaderChangeContext<TreeOptionData<string | number>>) => void>;
        onFocus: import("vue").PropType<(context: {
            value: import("./type").CascaderValue<TreeOptionData<string | number>>;
            e: FocusEvent;
        }) => void>;
        onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
        onRemove: import("vue").PropType<(context: import("./type").RemoveContext<TreeOptionData<string | number>>) => void>;
    }>>, {
        max: number;
        value: string | number | TreeOptionData<string | number> | import("./type").CascaderValue<TreeOptionData<string | number>>[];
        loading: boolean;
        autofocus: boolean;
        lazy: boolean;
        disabled: boolean;
        multiple: boolean;
        options: TreeOptionData<string | number>[];
        size: import("../common").SizeEnum;
        readonly: boolean;
        status: "error" | "default" | "success" | "warning";
        placeholder: string;
        trigger: "click" | "hover";
        modelValue: string | number | TreeOptionData<string | number> | import("./type").CascaderValue<TreeOptionData<string | number>>[];
        defaultValue: import("./type").CascaderValue<TreeOptionData<string | number>>;
        borderless: boolean;
        clearable: boolean;
        minCollapsedNum: number;
        popupVisible: boolean;
        reserveKeyword: boolean;
        valueType: "full" | "single";
        filterable: boolean;
        valueMode: "all" | "onlyLeaf" | "parentFirst";
        checkStrictly: boolean;
        showAllLevels: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        checkProps: {
            type: import("vue").PropType<import("..").TdCheckboxProps>;
        };
        checkStrictly: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: TreeOptionData<string | number>[];
                collapsedSelectedItems: TreeOptionData<string | number>[];
                count: number;
                onClose: (context: {
                    index: number;
                    e?: MouseEvent;
                }) => void;
            }) => import("../common").SlotReturnValue>;
        };
        disabled: BooleanConstructor;
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        filter: {
            type: import("vue").PropType<(filterWords: string, node: import("./interface").TreeNodeModel<TreeOptionData<string | number>>) => boolean | Promise<boolean>>;
        };
        filterable: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        keys: {
            type: import("vue").PropType<import("../common").TreeKeysType>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        load: {
            type: import("vue").PropType<(node: import("./interface").TreeNodeModel<TreeOptionData<string | number>>) => Promise<TreeOptionData<string | number>[]>>;
        };
        loading: BooleanConstructor;
        loadingText: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        option: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                item: TreeOptionData<string | number>;
                index: number;
            }) => import("../common").SlotReturnValue>;
        };
        options: {
            type: import("vue").PropType<TreeOptionData<string | number>[]>;
            default: () => TreeOptionData<string | number>[];
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        popupVisible: BooleanConstructor;
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        reserveKeyword: BooleanConstructor;
        selectInputProps: {
            type: import("vue").PropType<import("./interface").TdSelectInputProps>;
        };
        showAllLevels: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            default: import("../common").SizeEnum;
            validator(val: import("../common").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        tagInputProps: {
            type: import("vue").PropType<import("..").TdTagInputProps>;
        };
        tagProps: {
            type: import("vue").PropType<import("..").TdTagProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        trigger: {
            type: import("vue").PropType<"click" | "hover">;
            default: "click" | "hover";
            validator(val: "click" | "hover"): boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
            default: import("./type").CascaderValue<TreeOptionData<string | number>>;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
            default: import("./type").CascaderValue<TreeOptionData<string | number>>;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
            default: () => import("./type").CascaderValue<TreeOptionData<string | number>>;
        };
        valueDisplay: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: import("./type").CascaderValue<TreeOptionData<string | number>>;
                onClose: (index: number) => void;
                displayValue?: import("./type").CascaderValue<TreeOptionData<string | number>>;
                selectedOptions: TreeOptionData<string | number>[];
            }) => import("../common").SlotReturnValue)>;
        };
        valueMode: {
            type: import("vue").PropType<"all" | "onlyLeaf" | "parentFirst">;
            default: "all" | "onlyLeaf" | "parentFirst";
            validator(val: "all" | "onlyLeaf" | "parentFirst"): boolean;
        };
        valueType: {
            type: import("vue").PropType<"full" | "single">;
            default: "full" | "single";
            validator(val: "full" | "single"): boolean;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").CascaderValue<TreeOptionData<string | number>>;
        } & import("..").PopupVisibleChangeContext & {
            inputValue: string;
            tagInputValue?: import("..").TagInputValue;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").CascaderValue<TreeOptionData<string | number>>, context: import("./type").CascaderChangeContext<TreeOptionData<string | number>>) => void>;
        onFocus: import("vue").PropType<(context: {
            value: import("./type").CascaderValue<TreeOptionData<string | number>>;
            e: FocusEvent;
        }) => void>;
        onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
        onRemove: import("vue").PropType<(context: import("./type").RemoveContext<TreeOptionData<string | number>>) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        max: number;
        value: string | number | TreeOptionData<string | number> | import("./type").CascaderValue<TreeOptionData<string | number>>[];
        loading: boolean;
        autofocus: boolean;
        lazy: boolean;
        disabled: boolean;
        multiple: boolean;
        options: TreeOptionData<string | number>[];
        size: import("../common").SizeEnum;
        readonly: boolean;
        status: "error" | "default" | "success" | "warning";
        placeholder: string;
        trigger: "click" | "hover";
        modelValue: string | number | TreeOptionData<string | number> | import("./type").CascaderValue<TreeOptionData<string | number>>[];
        defaultValue: import("./type").CascaderValue<TreeOptionData<string | number>>;
        borderless: boolean;
        clearable: boolean;
        minCollapsedNum: number;
        popupVisible: boolean;
        reserveKeyword: boolean;
        valueType: "full" | "single";
        filterable: boolean;
        valueMode: "all" | "onlyLeaf" | "parentFirst";
        checkStrictly: boolean;
        showAllLevels: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    autofocus: BooleanConstructor;
    borderless: BooleanConstructor;
    checkProps: {
        type: import("vue").PropType<import("..").TdCheckboxProps>;
    };
    checkStrictly: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            value: TreeOptionData<string | number>[];
            collapsedSelectedItems: TreeOptionData<string | number>[];
            count: number;
            onClose: (context: {
                index: number;
                e?: MouseEvent;
            }) => void;
        }) => import("../common").SlotReturnValue>;
    };
    disabled: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    filter: {
        type: import("vue").PropType<(filterWords: string, node: import("./interface").TreeNodeModel<TreeOptionData<string | number>>) => boolean | Promise<boolean>>;
    };
    filterable: BooleanConstructor;
    inputProps: {
        type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
    };
    keys: {
        type: import("vue").PropType<import("../common").TreeKeysType>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    lazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    load: {
        type: import("vue").PropType<(node: import("./interface").TreeNodeModel<TreeOptionData<string | number>>) => Promise<TreeOptionData<string | number>[]>>;
    };
    loading: BooleanConstructor;
    loadingText: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    option: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            item: TreeOptionData<string | number>;
            index: number;
        }) => import("../common").SlotReturnValue>;
    };
    options: {
        type: import("vue").PropType<TreeOptionData<string | number>[]>;
        default: () => TreeOptionData<string | number>[];
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    popupVisible: BooleanConstructor;
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    reserveKeyword: BooleanConstructor;
    selectInputProps: {
        type: import("vue").PropType<import("./interface").TdSelectInputProps>;
    };
    showAllLevels: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    tagInputProps: {
        type: import("vue").PropType<import("..").TdTagInputProps>;
    };
    tagProps: {
        type: import("vue").PropType<import("..").TdTagProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    trigger: {
        type: import("vue").PropType<"click" | "hover">;
        default: "click" | "hover";
        validator(val: "click" | "hover"): boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
        default: import("./type").CascaderValue<TreeOptionData<string | number>>;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
        default: import("./type").CascaderValue<TreeOptionData<string | number>>;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
        default: () => import("./type").CascaderValue<TreeOptionData<string | number>>;
    };
    valueDisplay: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: import("./type").CascaderValue<TreeOptionData<string | number>>;
            onClose: (index: number) => void;
            displayValue?: import("./type").CascaderValue<TreeOptionData<string | number>>;
            selectedOptions: TreeOptionData<string | number>[];
        }) => import("../common").SlotReturnValue)>;
    };
    valueMode: {
        type: import("vue").PropType<"all" | "onlyLeaf" | "parentFirst">;
        default: "all" | "onlyLeaf" | "parentFirst";
        validator(val: "all" | "onlyLeaf" | "parentFirst"): boolean;
    };
    valueType: {
        type: import("vue").PropType<"full" | "single">;
        default: "full" | "single";
        validator(val: "full" | "single"): boolean;
    };
    onBlur: import("vue").PropType<(context: {
        value: import("./type").CascaderValue<TreeOptionData<string | number>>;
    } & import("..").PopupVisibleChangeContext & {
        inputValue: string;
        tagInputValue?: import("..").TagInputValue;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").CascaderValue<TreeOptionData<string | number>>, context: import("./type").CascaderChangeContext<TreeOptionData<string | number>>) => void>;
    onFocus: import("vue").PropType<(context: {
        value: import("./type").CascaderValue<TreeOptionData<string | number>>;
        e: FocusEvent;
    }) => void>;
    onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
    onRemove: import("vue").PropType<(context: import("./type").RemoveContext<TreeOptionData<string | number>>) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    max: number;
    value: string | number | TreeOptionData<string | number> | import("./type").CascaderValue<TreeOptionData<string | number>>[];
    loading: boolean;
    autofocus: boolean;
    lazy: boolean;
    disabled: boolean;
    multiple: boolean;
    options: TreeOptionData<string | number>[];
    size: import("../common").SizeEnum;
    readonly: boolean;
    status: "error" | "default" | "success" | "warning";
    placeholder: string;
    trigger: "click" | "hover";
    modelValue: string | number | TreeOptionData<string | number> | import("./type").CascaderValue<TreeOptionData<string | number>>[];
    defaultValue: import("./type").CascaderValue<TreeOptionData<string | number>>;
    borderless: boolean;
    clearable: boolean;
    minCollapsedNum: number;
    popupVisible: boolean;
    reserveKeyword: boolean;
    valueType: "full" | "single";
    filterable: boolean;
    valueMode: "all" | "onlyLeaf" | "parentFirst";
    checkStrictly: boolean;
    showAllLevels: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const CascaderPanel: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        checkProps: {
            type: import("vue").PropType<import("..").TdCheckboxProps>;
        };
        checkStrictly: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: TreeOptionData<string | number>[];
                collapsedSelectedItems: TreeOptionData<string | number>[];
                count: number;
                onClose: (context: {
                    index: number;
                    e?: MouseEvent;
                }) => void;
            }) => import("../common").SlotReturnValue>;
        };
        disabled: BooleanConstructor;
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        filter: {
            type: import("vue").PropType<(filterWords: string, node: import("./interface").TreeNodeModel<TreeOptionData<string | number>>) => boolean | Promise<boolean>>;
        };
        filterable: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        keys: {
            type: import("vue").PropType<import("../common").TreeKeysType>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        load: {
            type: import("vue").PropType<(node: import("./interface").TreeNodeModel<TreeOptionData<string | number>>) => Promise<TreeOptionData<string | number>[]>>;
        };
        loading: BooleanConstructor;
        loadingText: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        option: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                item: TreeOptionData<string | number>;
                index: number;
            }) => import("../common").SlotReturnValue>;
        };
        options: {
            type: import("vue").PropType<TreeOptionData<string | number>[]>;
            default: () => TreeOptionData<string | number>[];
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        popupVisible: BooleanConstructor;
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        reserveKeyword: BooleanConstructor;
        selectInputProps: {
            type: import("vue").PropType<import("./interface").TdSelectInputProps>;
        };
        showAllLevels: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            default: import("../common").SizeEnum;
            validator(val: import("../common").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        tagInputProps: {
            type: import("vue").PropType<import("..").TdTagInputProps>;
        };
        tagProps: {
            type: import("vue").PropType<import("..").TdTagProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        trigger: {
            type: import("vue").PropType<"click" | "hover">;
            default: "click" | "hover";
            validator(val: "click" | "hover"): boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
            default: import("./type").CascaderValue<TreeOptionData<string | number>>;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
            default: import("./type").CascaderValue<TreeOptionData<string | number>>;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
            default: () => import("./type").CascaderValue<TreeOptionData<string | number>>;
        };
        valueDisplay: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: import("./type").CascaderValue<TreeOptionData<string | number>>;
                onClose: (index: number) => void;
                displayValue?: import("./type").CascaderValue<TreeOptionData<string | number>>;
                selectedOptions: TreeOptionData<string | number>[];
            }) => import("../common").SlotReturnValue)>;
        };
        valueMode: {
            type: import("vue").PropType<"all" | "onlyLeaf" | "parentFirst">;
            default: "all" | "onlyLeaf" | "parentFirst";
            validator(val: "all" | "onlyLeaf" | "parentFirst"): boolean;
        };
        valueType: {
            type: import("vue").PropType<"full" | "single">;
            default: "full" | "single";
            validator(val: "full" | "single"): boolean;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").CascaderValue<TreeOptionData<string | number>>;
        } & import("..").PopupVisibleChangeContext & {
            inputValue: string;
            tagInputValue?: import("..").TagInputValue;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").CascaderValue<TreeOptionData<string | number>>, context: import("./type").CascaderChangeContext<TreeOptionData<string | number>>) => void>;
        onFocus: import("vue").PropType<(context: {
            value: import("./type").CascaderValue<TreeOptionData<string | number>>;
            e: FocusEvent;
        }) => void>;
        onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
        onRemove: import("vue").PropType<(context: import("./type").RemoveContext<TreeOptionData<string | number>>) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        checkProps: {
            type: import("vue").PropType<import("..").TdCheckboxProps>;
        };
        checkStrictly: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: TreeOptionData<string | number>[];
                collapsedSelectedItems: TreeOptionData<string | number>[];
                count: number;
                onClose: (context: {
                    index: number;
                    e?: MouseEvent;
                }) => void;
            }) => import("../common").SlotReturnValue>;
        };
        disabled: BooleanConstructor;
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        filter: {
            type: import("vue").PropType<(filterWords: string, node: import("./interface").TreeNodeModel<TreeOptionData<string | number>>) => boolean | Promise<boolean>>;
        };
        filterable: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        keys: {
            type: import("vue").PropType<import("../common").TreeKeysType>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        load: {
            type: import("vue").PropType<(node: import("./interface").TreeNodeModel<TreeOptionData<string | number>>) => Promise<TreeOptionData<string | number>[]>>;
        };
        loading: BooleanConstructor;
        loadingText: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        option: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                item: TreeOptionData<string | number>;
                index: number;
            }) => import("../common").SlotReturnValue>;
        };
        options: {
            type: import("vue").PropType<TreeOptionData<string | number>[]>;
            default: () => TreeOptionData<string | number>[];
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        popupVisible: BooleanConstructor;
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        reserveKeyword: BooleanConstructor;
        selectInputProps: {
            type: import("vue").PropType<import("./interface").TdSelectInputProps>;
        };
        showAllLevels: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            default: import("../common").SizeEnum;
            validator(val: import("../common").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        tagInputProps: {
            type: import("vue").PropType<import("..").TdTagInputProps>;
        };
        tagProps: {
            type: import("vue").PropType<import("..").TdTagProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        trigger: {
            type: import("vue").PropType<"click" | "hover">;
            default: "click" | "hover";
            validator(val: "click" | "hover"): boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
            default: import("./type").CascaderValue<TreeOptionData<string | number>>;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
            default: import("./type").CascaderValue<TreeOptionData<string | number>>;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
            default: () => import("./type").CascaderValue<TreeOptionData<string | number>>;
        };
        valueDisplay: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: import("./type").CascaderValue<TreeOptionData<string | number>>;
                onClose: (index: number) => void;
                displayValue?: import("./type").CascaderValue<TreeOptionData<string | number>>;
                selectedOptions: TreeOptionData<string | number>[];
            }) => import("../common").SlotReturnValue)>;
        };
        valueMode: {
            type: import("vue").PropType<"all" | "onlyLeaf" | "parentFirst">;
            default: "all" | "onlyLeaf" | "parentFirst";
            validator(val: "all" | "onlyLeaf" | "parentFirst"): boolean;
        };
        valueType: {
            type: import("vue").PropType<"full" | "single">;
            default: "full" | "single";
            validator(val: "full" | "single"): boolean;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").CascaderValue<TreeOptionData<string | number>>;
        } & import("..").PopupVisibleChangeContext & {
            inputValue: string;
            tagInputValue?: import("..").TagInputValue;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").CascaderValue<TreeOptionData<string | number>>, context: import("./type").CascaderChangeContext<TreeOptionData<string | number>>) => void>;
        onFocus: import("vue").PropType<(context: {
            value: import("./type").CascaderValue<TreeOptionData<string | number>>;
            e: FocusEvent;
        }) => void>;
        onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
        onRemove: import("vue").PropType<(context: import("./type").RemoveContext<TreeOptionData<string | number>>) => void>;
    }>>, {
        max: number;
        value: string | number | TreeOptionData<string | number> | import("./type").CascaderValue<TreeOptionData<string | number>>[];
        loading: boolean;
        autofocus: boolean;
        lazy: boolean;
        disabled: boolean;
        multiple: boolean;
        options: TreeOptionData<string | number>[];
        size: import("../common").SizeEnum;
        readonly: boolean;
        status: "error" | "default" | "success" | "warning";
        placeholder: string;
        trigger: "click" | "hover";
        modelValue: string | number | TreeOptionData<string | number> | import("./type").CascaderValue<TreeOptionData<string | number>>[];
        defaultValue: import("./type").CascaderValue<TreeOptionData<string | number>>;
        borderless: boolean;
        clearable: boolean;
        minCollapsedNum: number;
        popupVisible: boolean;
        reserveKeyword: boolean;
        valueType: "full" | "single";
        filterable: boolean;
        valueMode: "all" | "onlyLeaf" | "parentFirst";
        checkStrictly: boolean;
        showAllLevels: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        checkProps: {
            type: import("vue").PropType<import("..").TdCheckboxProps>;
        };
        checkStrictly: BooleanConstructor;
        clearable: BooleanConstructor;
        collapsedItems: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                value: TreeOptionData<string | number>[];
                collapsedSelectedItems: TreeOptionData<string | number>[];
                count: number;
                onClose: (context: {
                    index: number;
                    e?: MouseEvent;
                }) => void;
            }) => import("../common").SlotReturnValue>;
        };
        disabled: BooleanConstructor;
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        filter: {
            type: import("vue").PropType<(filterWords: string, node: import("./interface").TreeNodeModel<TreeOptionData<string | number>>) => boolean | Promise<boolean>>;
        };
        filterable: BooleanConstructor;
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        keys: {
            type: import("vue").PropType<import("../common").TreeKeysType>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        load: {
            type: import("vue").PropType<(node: import("./interface").TreeNodeModel<TreeOptionData<string | number>>) => Promise<TreeOptionData<string | number>[]>>;
        };
        loading: BooleanConstructor;
        loadingText: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        max: {
            type: NumberConstructor;
            default: number;
        };
        minCollapsedNum: {
            type: NumberConstructor;
            default: number;
        };
        multiple: BooleanConstructor;
        option: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                item: TreeOptionData<string | number>;
                index: number;
            }) => import("../common").SlotReturnValue>;
        };
        options: {
            type: import("vue").PropType<TreeOptionData<string | number>[]>;
            default: () => TreeOptionData<string | number>[];
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        popupVisible: BooleanConstructor;
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        reserveKeyword: BooleanConstructor;
        selectInputProps: {
            type: import("vue").PropType<import("./interface").TdSelectInputProps>;
        };
        showAllLevels: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            default: import("../common").SizeEnum;
            validator(val: import("../common").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        tagInputProps: {
            type: import("vue").PropType<import("..").TdTagInputProps>;
        };
        tagProps: {
            type: import("vue").PropType<import("..").TdTagProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        trigger: {
            type: import("vue").PropType<"click" | "hover">;
            default: "click" | "hover";
            validator(val: "click" | "hover"): boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
            default: import("./type").CascaderValue<TreeOptionData<string | number>>;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
            default: import("./type").CascaderValue<TreeOptionData<string | number>>;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
            default: () => import("./type").CascaderValue<TreeOptionData<string | number>>;
        };
        valueDisplay: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: import("./type").CascaderValue<TreeOptionData<string | number>>;
                onClose: (index: number) => void;
                displayValue?: import("./type").CascaderValue<TreeOptionData<string | number>>;
                selectedOptions: TreeOptionData<string | number>[];
            }) => import("../common").SlotReturnValue)>;
        };
        valueMode: {
            type: import("vue").PropType<"all" | "onlyLeaf" | "parentFirst">;
            default: "all" | "onlyLeaf" | "parentFirst";
            validator(val: "all" | "onlyLeaf" | "parentFirst"): boolean;
        };
        valueType: {
            type: import("vue").PropType<"full" | "single">;
            default: "full" | "single";
            validator(val: "full" | "single"): boolean;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").CascaderValue<TreeOptionData<string | number>>;
        } & import("..").PopupVisibleChangeContext & {
            inputValue: string;
            tagInputValue?: import("..").TagInputValue;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").CascaderValue<TreeOptionData<string | number>>, context: import("./type").CascaderChangeContext<TreeOptionData<string | number>>) => void>;
        onFocus: import("vue").PropType<(context: {
            value: import("./type").CascaderValue<TreeOptionData<string | number>>;
            e: FocusEvent;
        }) => void>;
        onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
        onRemove: import("vue").PropType<(context: import("./type").RemoveContext<TreeOptionData<string | number>>) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        max: number;
        value: string | number | TreeOptionData<string | number> | import("./type").CascaderValue<TreeOptionData<string | number>>[];
        loading: boolean;
        autofocus: boolean;
        lazy: boolean;
        disabled: boolean;
        multiple: boolean;
        options: TreeOptionData<string | number>[];
        size: import("../common").SizeEnum;
        readonly: boolean;
        status: "error" | "default" | "success" | "warning";
        placeholder: string;
        trigger: "click" | "hover";
        modelValue: string | number | TreeOptionData<string | number> | import("./type").CascaderValue<TreeOptionData<string | number>>[];
        defaultValue: import("./type").CascaderValue<TreeOptionData<string | number>>;
        borderless: boolean;
        clearable: boolean;
        minCollapsedNum: number;
        popupVisible: boolean;
        reserveKeyword: boolean;
        valueType: "full" | "single";
        filterable: boolean;
        valueMode: "all" | "onlyLeaf" | "parentFirst";
        checkStrictly: boolean;
        showAllLevels: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    autofocus: BooleanConstructor;
    borderless: BooleanConstructor;
    checkProps: {
        type: import("vue").PropType<import("..").TdCheckboxProps>;
    };
    checkStrictly: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            value: TreeOptionData<string | number>[];
            collapsedSelectedItems: TreeOptionData<string | number>[];
            count: number;
            onClose: (context: {
                index: number;
                e?: MouseEvent;
            }) => void;
        }) => import("../common").SlotReturnValue>;
    };
    disabled: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    filter: {
        type: import("vue").PropType<(filterWords: string, node: import("./interface").TreeNodeModel<TreeOptionData<string | number>>) => boolean | Promise<boolean>>;
    };
    filterable: BooleanConstructor;
    inputProps: {
        type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
    };
    keys: {
        type: import("vue").PropType<import("../common").TreeKeysType>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    lazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    load: {
        type: import("vue").PropType<(node: import("./interface").TreeNodeModel<TreeOptionData<string | number>>) => Promise<TreeOptionData<string | number>[]>>;
    };
    loading: BooleanConstructor;
    loadingText: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    option: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            item: TreeOptionData<string | number>;
            index: number;
        }) => import("../common").SlotReturnValue>;
    };
    options: {
        type: import("vue").PropType<TreeOptionData<string | number>[]>;
        default: () => TreeOptionData<string | number>[];
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    popupVisible: BooleanConstructor;
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    reserveKeyword: BooleanConstructor;
    selectInputProps: {
        type: import("vue").PropType<import("./interface").TdSelectInputProps>;
    };
    showAllLevels: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    tagInputProps: {
        type: import("vue").PropType<import("..").TdTagInputProps>;
    };
    tagProps: {
        type: import("vue").PropType<import("..").TdTagProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    trigger: {
        type: import("vue").PropType<"click" | "hover">;
        default: "click" | "hover";
        validator(val: "click" | "hover"): boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
        default: import("./type").CascaderValue<TreeOptionData<string | number>>;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
        default: import("./type").CascaderValue<TreeOptionData<string | number>>;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").CascaderValue<TreeOptionData<string | number>>>;
        default: () => import("./type").CascaderValue<TreeOptionData<string | number>>;
    };
    valueDisplay: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: import("./type").CascaderValue<TreeOptionData<string | number>>;
            onClose: (index: number) => void;
            displayValue?: import("./type").CascaderValue<TreeOptionData<string | number>>;
            selectedOptions: TreeOptionData<string | number>[];
        }) => import("../common").SlotReturnValue)>;
    };
    valueMode: {
        type: import("vue").PropType<"all" | "onlyLeaf" | "parentFirst">;
        default: "all" | "onlyLeaf" | "parentFirst";
        validator(val: "all" | "onlyLeaf" | "parentFirst"): boolean;
    };
    valueType: {
        type: import("vue").PropType<"full" | "single">;
        default: "full" | "single";
        validator(val: "full" | "single"): boolean;
    };
    onBlur: import("vue").PropType<(context: {
        value: import("./type").CascaderValue<TreeOptionData<string | number>>;
    } & import("..").PopupVisibleChangeContext & {
        inputValue: string;
        tagInputValue?: import("..").TagInputValue;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").CascaderValue<TreeOptionData<string | number>>, context: import("./type").CascaderChangeContext<TreeOptionData<string | number>>) => void>;
    onFocus: import("vue").PropType<(context: {
        value: import("./type").CascaderValue<TreeOptionData<string | number>>;
        e: FocusEvent;
    }) => void>;
    onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
    onRemove: import("vue").PropType<(context: import("./type").RemoveContext<TreeOptionData<string | number>>) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    max: number;
    value: string | number | TreeOptionData<string | number> | import("./type").CascaderValue<TreeOptionData<string | number>>[];
    loading: boolean;
    autofocus: boolean;
    lazy: boolean;
    disabled: boolean;
    multiple: boolean;
    options: TreeOptionData<string | number>[];
    size: import("../common").SizeEnum;
    readonly: boolean;
    status: "error" | "default" | "success" | "warning";
    placeholder: string;
    trigger: "click" | "hover";
    modelValue: string | number | TreeOptionData<string | number> | import("./type").CascaderValue<TreeOptionData<string | number>>[];
    defaultValue: import("./type").CascaderValue<TreeOptionData<string | number>>;
    borderless: boolean;
    clearable: boolean;
    minCollapsedNum: number;
    popupVisible: boolean;
    reserveKeyword: boolean;
    valueType: "full" | "single";
    filterable: boolean;
    valueMode: "all" | "onlyLeaf" | "parentFirst";
    checkStrictly: boolean;
    showAllLevels: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Cascader;
