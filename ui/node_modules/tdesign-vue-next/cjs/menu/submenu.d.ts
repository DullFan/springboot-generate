import { Slots } from 'vue';
declare const _default: import("vue").DefineComponent<{
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    icon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    popupProps: {
        type: import("vue").PropType<import("../popup").TdPopupProps>;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").MenuValue>;
    };
}, {
    classPrefix: import("vue").ComputedRef<string>;
    menuItems: import("vue").Ref<any[]>;
    mode: import("vue").ComputedRef<unknown>;
    theme: import("vue").Ref<string>;
    isHead: boolean;
    isNested: import("vue").Ref<boolean>;
    classes: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    subClass: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    isOpen: import("vue").ComputedRef<boolean>;
    transitionClass: import("vue").ComputedRef<string>;
    arrowClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }[]>;
    overlayInnerClassName: import("vue").ComputedRef<import("..").ClassName[]>;
    overlayClassName: import("vue").ComputedRef<import("..").ClassName[]>;
    submenuClass: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    submenuRef: import("vue").Ref<HTMLElement>;
    popupWrapperRef: import("vue").Ref<HTMLElement>;
    popupVisible: import("vue").Ref<boolean>;
    isCursorInPopup: import("vue").Ref<boolean>;
    handleEnterPopup: () => void;
    handleMouseEnter: () => void;
    handleMouseLeave: (e: MouseEvent) => void;
    handleMouseLeavePopup: (e: any) => void;
    handleSubmenuItemClick: () => void;
}, unknown, {}, {
    renderPopup(triggerElement: Slots[]): JSX.Element;
    renderHeadSubmenu(): JSX.Element | JSX.Element[];
    renderSubmenu(): JSX.Element | JSX.Element[];
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    icon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    popupProps: {
        type: import("vue").PropType<import("../popup").TdPopupProps>;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").MenuValue>;
    };
}>>, {
    disabled: boolean;
}, {}>;
export default _default;
