/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Vue = require('vue');
var camelCase = require('lodash/camelCase');
var get = require('lodash/get');
var pick = require('lodash/pick');
var table_tr = require('./tr.js');
var configProvider_useConfig = require('../config-provider/useConfig.js');
var hooks_tnode = require('../hooks/tnode.js');
var table_hooks_useClassName = require('./hooks/useClassName.js');
var table_baseTableProps = require('./base-table-props.js');
var table_hooks_useRowspanAndColspan = require('./hooks/useRowspanAndColspan.js');
require('@babel/runtime/helpers/typeof');
require('lodash/isFunction');
require('lodash/upperFirst');
require('lodash/isString');
require('./utils.js');
require('lodash/isObject');
require('./hooks/useFixed.js');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/debounce');
require('lodash/xorWith');
require('../_common/js/log/log.js');
require('../_common/js/utils/getScrollbarWidth.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/objectWithoutProperties');
require('lodash/isNull');
require('lodash/isUndefined');
require('lodash/isNumber');
require('lodash/isArray');
require('../utils/dom.js');
require('../_chunks/dep-4980a22e.js');
require('../utils/easing.js');
require('./ellipsis.js');
require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/kebabCase');
require('../tooltip/index.js');
require('../tooltip/tooltip.js');
require('lodash/omit');
require('../tooltip/props.js');
require('../popup/props.js');
require('../popup/index.js');
require('../popup/popup.js');
require('@popperjs/core');
require('../hooks/useConfig.js');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_chunks/dep-c6b6a048.js');
require('dayjs');
require('../hooks/useVModel.js');
require('../_common/js/utils/set-style.js');
require('../popup/container.js');
require('../hooks/useResizeObserver.js');
require('../utils/withInstall.js');
require('../tooltip/util.js');
require('./hooks/useLazyLoad.js');
require('../_common/js/utils/observe.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var camelCase__default = /*#__PURE__*/_interopDefaultLegacy(camelCase);
var get__default = /*#__PURE__*/_interopDefaultLegacy(get);
var pick__default = /*#__PURE__*/_interopDefaultLegacy(pick);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var ROW_AND_TD_LISTENERS = table_tr.ROW_LISTENERS.concat("cell-click");
var extendTableProps = ["bordered", "rowKey", "rowClassName", "rowAttributes", "loading", "empty", "fixedRows", "firstFullRow", "lastFullRow", "rowspanAndColspan", "scroll", "cellEmptyContent", "pagination", "attach", "onCellClick", "onPageChange", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup", "onScroll", "onScrollX", "onScrollY"];
var TBody = Vue.defineComponent({
  name: "TBody",
  props: _objectSpread({
    classPrefix: String,
    data: Array,
    columns: Array,
    ellipsisOverlayClassName: String,
    rowAndColFixedPosition: Map,
    showColumnShadow: Object,
    tableElm: {},
    tableWidth: Number,
    isWidthOverflow: Boolean,
    virtualConfig: Object,
    tableContentElm: {},
    handleRowMounted: Function,
    renderExpandedRow: Function,
    firstFullRow: [String, Function],
    lastFullRow: [String, Function],
    activeRow: [Array],
    hoverRow: [String, Number]
  }, pick__default["default"](table_baseTableProps["default"], extendTableProps)),
  setup: function setup(props) {
    var renderTNode = hooks_tnode.useTNodeJSX();
    var _toRefs = Vue.toRefs(props),
      data = _toRefs.data,
      columns = _toRefs.columns,
      rowKey = _toRefs.rowKey,
      rowspanAndColspan = _toRefs.rowspanAndColspan;
    var _useConfig = configProvider_useConfig.useConfig("table", props.locale),
      t = _useConfig.t,
      globalConfig = _useConfig.globalConfig;
    var _useClassName = table_hooks_useClassName["default"](),
      tableFullRowClasses = _useClassName.tableFullRowClasses,
      tableBaseClass = _useClassName.tableBaseClass;
    var _useRowspanAndColspan = table_hooks_useRowspanAndColspan["default"](data, columns, rowKey, rowspanAndColspan),
      skipSpansMap = _useRowspanAndColspan.skipSpansMap;
    var tbodyClasses = Vue.computed(function () {
      return [tableBaseClass.body];
    });
    return {
      t: t,
      globalConfig: globalConfig,
      renderTNode: renderTNode,
      tableFullRowClasses: tableFullRowClasses,
      tbodyClasses: tbodyClasses,
      tableBaseClass: tableBaseClass,
      skipSpansMap: skipSpansMap
    };
  },
  render: function render() {
    var _this = this,
      _this$data,
      _this$data2,
      _this$virtualConfig,
      _this$virtualConfig2;
    var renderEmpty = function renderEmpty(columns) {
      var tableWidth = _this.bordered ? _this.tableWidth - 2 : _this.tableWidth;
      return Vue.createVNode("tr", {
        "class": [_this.tableBaseClass.emptyRow, _defineProperty__default["default"]({}, _this.tableFullRowClasses.base, _this.isWidthOverflow)]
      }, [Vue.createVNode("td", {
        "colspan": columns.length
      }, [Vue.createVNode("div", {
        "class": [_this.tableBaseClass.empty, _defineProperty__default["default"]({}, _this.tableFullRowClasses.innerFullRow, _this.isWidthOverflow)],
        "style": _this.isWidthOverflow ? {
          width: "".concat(tableWidth, "px")
        } : {}
      }, [_this.renderTNode("empty") || _this.t(_this.globalConfig.empty)])])]);
    };
    var getFullRow = function getFullRow(columnLength2, type) {
      var tType = camelCase__default["default"](type);
      var fullRowNode = _this.renderTNode(tType);
      if (["", null, void 0, false].includes(fullRowNode)) return null;
      var isFixedToLeft = _this.isWidthOverflow && _this.columns.find(function (col) {
        return col.fixed === "left";
      });
      var classes = [_this.tableFullRowClasses.base, _this.tableFullRowClasses[tType]];
      var tableWidth = _this.bordered ? _this.tableWidth - 2 : _this.tableWidth;
      return Vue.createVNode("tr", {
        "class": classes,
        "key": "key-full-row-".concat(type)
      }, [Vue.createVNode("td", {
        "colspan": columnLength2
      }, [Vue.createVNode("div", {
        "class": _defineProperty__default["default"]({}, _this.tableFullRowClasses.innerFullRow, isFixedToLeft),
        "style": isFixedToLeft ? {
          width: "".concat(tableWidth, "px")
        } : {}
      }, [Vue.createVNode("div", {
        "class": _this.tableFullRowClasses.innerFullElement
      }, [fullRowNode])])])]);
    };
    var columnLength = this.columns.length;
    var dataLength = this.data.length;
    var trNodeList = [];
    var properties = ["classPrefix", "ellipsisOverlayClassName", "rowAndColFixedPosition", "scroll", "tableElm", "tableContentElm", "pagination", "attach"];
    (_this$data = this.data) === null || _this$data === void 0 || _this$data.forEach(function (row, rowIndex) {
      var _this$activeRow;
      var rowKey = _this.rowKey || "id";
      var rowValue = get__default["default"](row, rowKey);
      var trProps = _objectSpread(_objectSpread({}, pick__default["default"](_this.$props, table_tr.TABLE_PROPS)), {}, {
        rowKey: rowKey,
        row: row,
        columns: _this.columns,
        rowIndex: row.VIRTUAL_SCROLL_INDEX || rowIndex,
        dataLength: dataLength,
        skipSpansMap: _this.skipSpansMap,
        virtualConfig: _this.virtualConfig,
        active: (_this$activeRow = _this.activeRow) === null || _this$activeRow === void 0 ? void 0 : _this$activeRow.includes(rowValue),
        isHover: _this.hoverRow === rowValue
      }, pick__default["default"](_this.$props, properties));
      if (_this.onCellClick) {
        trProps.onCellClick = _this.onCellClick;
      }
      var trNode = Vue.createVNode(table_tr["default"], Vue.mergeProps({
        "key": get__default["default"](row, _this.rowKey || "id") || rowIndex
      }, trProps, {
        "onRowMounted": _this.handleRowMounted
      }), _this.$slots);
      trNodeList.push(trNode);
      if (_this.renderExpandedRow) {
        var p = {
          row: row,
          index: rowIndex,
          columns: _this.columns,
          tableWidth: _this.tableWidth,
          isWidthOverflow: _this.isWidthOverflow
        };
        var expandedContent = _this.renderExpandedRow(p);
        expandedContent && trNodeList.push(expandedContent);
      }
    });
    var list = [getFullRow(columnLength, "first-full-row")].concat(trNodeList, [getFullRow(columnLength, "last-full-row")]);
    var isEmpty = !((_this$data2 = this.data) !== null && _this$data2 !== void 0 && _this$data2.length) && !this.loading && !this.firstFullRow && !this.lastFullRow;
    var translate = "translateY(".concat((_this$virtualConfig = this.virtualConfig) === null || _this$virtualConfig === void 0 ? void 0 : _this$virtualConfig.translateY.value, "px)");
    var posStyle = (_this$virtualConfig2 = this.virtualConfig) !== null && _this$virtualConfig2 !== void 0 && _this$virtualConfig2.isVirtualScroll.value ? {
      transform: translate,
      "-ms-transform": translate,
      "-moz-transform": translate,
      "-webkit-transform": translate
    } : void 0;
    return Vue.createVNode("tbody", {
      "class": this.tbodyClasses,
      "style": _objectSpread({}, posStyle)
    }, [isEmpty ? renderEmpty(this.columns) : list]);
  }
});

exports.ROW_AND_TD_LISTENERS = ROW_AND_TD_LISTENERS;
exports["default"] = TBody;
exports.extendTableProps = extendTableProps;
//# sourceMappingURL=tbody.js.map
