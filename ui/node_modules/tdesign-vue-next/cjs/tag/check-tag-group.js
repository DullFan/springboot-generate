/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var Vue = require('vue');
var hooks_useConfig = require('../hooks/useConfig.js');
var tag_checkTagGroupProps = require('./check-tag-group-props.js');
var tag_checkTag = require('./check-tag.js');
var hooks_useVModel = require('../hooks/useVModel.js');
var isFunction = require('lodash/isFunction');
require('../config-provider/useConfig.js');
require('lodash/cloneDeep');
require('lodash/isString');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_chunks/dep-c6b6a048.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-4980a22e.js');
require('dayjs');
require('lodash/isArray');
require('@babel/runtime/helpers/defineProperty');
require('./check-tag-props.js');
require('../hooks/tnode.js');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isObject');
require('./tag.js');
require('tdesign-icons-vue-next');
require('tinycolor2');
require('./props.js');
require('../hooks/useGlobalIcon.js');
require('../_common/js/common.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var isFunction__default = /*#__PURE__*/_interopDefaultLegacy(isFunction);

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
}
var _CheckTagGroup = Vue.defineComponent({
  name: "TCheckTagGroup",
  props: tag_checkTagGroupProps["default"],
  setup: function setup(props2, context) {
    var _toRefs = Vue.toRefs(props2),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue,
      options = _toRefs.options;
    var componentName = hooks_useConfig.usePrefixClass("check-tag-group");
    var checkTagGroupClasses = Vue.computed(function () {
      return [componentName.value];
    });
    var _useVModel = hooks_useVModel["default"](value, modelValue, props2.defaultValue, props2.onChange),
      _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
      innerValue = _useVModel2[0],
      setInnerValue = _useVModel2[1];
    var onCheckTagChange = function onCheckTagChange(checked, ctx) {
      var value2 = ctx.value;
      if (checked) {
        if (props2.multiple) {
          setInnerValue(innerValue.value.concat(value2), {
            e: ctx.e,
            type: "check",
            value: value2
          });
        } else {
          setInnerValue([value2], {
            e: ctx.e,
            type: "check",
            value: value2
          });
        }
      } else {
        var newValue = [];
        if (props2.multiple) {
          newValue = innerValue.value.filter(function (t) {
            return t !== value2;
          });
        }
        setInnerValue(newValue, {
          e: ctx.e,
          type: "uncheck",
          value: value2
        });
      }
    };
    var getTagContent = function getTagContent(option) {
      if (context.slots.option) return context.slots.option(option);
      if (context.slots.label) return context.slots.label(option);
      if (option.label) {
        return isFunction__default["default"](option.label) ? option.label(Vue.h) : option.label;
      }
      if (option.content && isFunction__default["default"](option.content)) return option.content(Vue.h);
      if (option["default"] && isFunction__default["default"](option["default"])) return option["default"](Vue.h);
      return option.value;
    };
    return function () {
      return Vue.createVNode("div", {
        "class": checkTagGroupClasses.value
      }, [(options.value || []).map(function (option) {
        var _slot;
        return Vue.createVNode(tag_checkTag["default"], {
          "key": option.value,
          "value": option.value,
          "checkedProps": props2.checkedProps,
          "uncheckedProps": props2.uncheckedProps,
          "checked": innerValue.value.includes(option.value),
          "onChange": onCheckTagChange,
          "disabled": option.disabled,
          "size": option.size,
          "data-value": option.value
        }, _isSlot(_slot = getTagContent(option)) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        });
      })]);
    };
  }
});

exports["default"] = _CheckTagGroup;
//# sourceMappingURL=check-tag-group.js.map
