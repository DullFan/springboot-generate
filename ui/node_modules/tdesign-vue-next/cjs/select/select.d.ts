import { PropType } from 'vue';
import type { PopupVisibleChangeContext } from '../popup';
import type { SelectInputValueChangeContext } from '../select-input';
import type { SelectValue } from './type';
import { SelectInputValueDisplayOptions } from '../select-input/useSingle';
declare const _default: import("vue").DefineComponent<{
    valueDisplayOptions: {
        type: PropType<SelectInputValueDisplayOptions>;
    };
    autoWidth: BooleanConstructor;
    autofocus: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: PropType<(h: typeof import("vue").h, props: {
            value: import("./type").SelectOption[];
            collapsedSelectedItems: import("./type").SelectOption[];
            count: number;
            onClose: (context: {
                index: number;
                e?: MouseEvent;
            }) => void;
        }) => import("..").SlotReturnValue>;
    };
    creatable: BooleanConstructor;
    disabled: BooleanConstructor;
    empty: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    filter: {
        type: PropType<(filterWords: string, option: import("./type").SelectOption) => boolean | Promise<boolean>>;
    };
    filterable: BooleanConstructor;
    inputProps: {
        type: PropType<import("..").InputProps<import("..").InputValue>>;
    };
    inputValue: {
        type: PropType<string>;
        default: string;
    };
    defaultInputValue: {
        type: PropType<string>;
    };
    keys: {
        type: PropType<import("..").KeysType>;
    };
    label: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    loading: BooleanConstructor;
    loadingText: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    options: {
        type: PropType<import("./type").SelectOption[]>;
    };
    panelBottomContent: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    panelTopContent: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: PropType<import("../popup").TdPopupProps>;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultPopupVisible: BooleanConstructor;
    prefixIcon: {
        type: PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    reserveKeyword: BooleanConstructor;
    scroll: {
        type: PropType<import("..").TScroll>;
    };
    selectInputProps: {
        type: PropType<import("../select-input").TdSelectInputProps>;
    };
    showArrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<import("..").SizeEnum>;
        default: import("..").SizeEnum;
        validator(val: import("..").SizeEnum): boolean;
    };
    status: {
        type: PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    suffixIcon: {
        type: PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    tagInputProps: {
        type: PropType<import("..").TdTagInputProps>;
    };
    tagProps: {
        type: PropType<import("..").TdTagProps>;
    };
    tips: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: PropType<SelectValue<import("./type").SelectOption>>;
        default: SelectValue<import("./type").SelectOption>;
    };
    modelValue: {
        type: PropType<SelectValue<import("./type").SelectOption>>;
        default: SelectValue<import("./type").SelectOption>;
    };
    defaultValue: {
        type: PropType<SelectValue<import("./type").SelectOption>>;
        default: any;
    };
    valueDisplay: {
        type: PropType<string | ((h: typeof import("vue").h, props: {
            value: SelectValue<import("./type").SelectOption>;
            onClose: (index: number) => void;
            displayValue?: SelectValue<import("./type").SelectOption>;
        }) => import("..").SlotReturnValue)>;
    };
    valueType: {
        type: PropType<"object" | "value">;
        default: "object" | "value";
        validator(val: "object" | "value"): boolean;
    };
    onBlur: PropType<(context: {
        value: SelectValue<import("./type").SelectOption>;
        e: FocusEvent | KeyboardEvent;
    }) => void>;
    onChange: PropType<(value: SelectValue<import("./type").SelectOption>, context: {
        option?: import("./type").SelectOption;
        selectedOptions: import("./type").SelectOption[];
        trigger: import("./type").SelectValueChangeTrigger;
        e?: MouseEvent | KeyboardEvent;
    }) => void>;
    onClear: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onCreate: PropType<(value: string | number) => void>;
    onEnter: PropType<(context: {
        inputValue: string;
        e: KeyboardEvent;
        value: SelectValue<import("./type").SelectOption>;
    }) => void>;
    onFocus: PropType<(context: {
        value: SelectValue<import("./type").SelectOption>;
        e: FocusEvent | KeyboardEvent;
    }) => void>;
    onInputChange: PropType<(value: string, context?: SelectInputValueChangeContext) => void>;
    onPopupVisibleChange: PropType<(visible: boolean, context: PopupVisibleChangeContext) => void>;
    onRemove: PropType<(options: import("./type").SelectRemoveContext<import("./type").SelectOption>) => void>;
    onSearch: PropType<(filterWords: string, context: {
        e: KeyboardEvent;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    valueDisplayOptions: {
        type: PropType<SelectInputValueDisplayOptions>;
    };
    autoWidth: BooleanConstructor;
    autofocus: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: PropType<(h: typeof import("vue").h, props: {
            value: import("./type").SelectOption[];
            collapsedSelectedItems: import("./type").SelectOption[];
            count: number;
            onClose: (context: {
                index: number;
                e?: MouseEvent;
            }) => void;
        }) => import("..").SlotReturnValue>;
    };
    creatable: BooleanConstructor;
    disabled: BooleanConstructor;
    empty: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    filter: {
        type: PropType<(filterWords: string, option: import("./type").SelectOption) => boolean | Promise<boolean>>;
    };
    filterable: BooleanConstructor;
    inputProps: {
        type: PropType<import("..").InputProps<import("..").InputValue>>;
    };
    inputValue: {
        type: PropType<string>;
        default: string;
    };
    defaultInputValue: {
        type: PropType<string>;
    };
    keys: {
        type: PropType<import("..").KeysType>;
    };
    label: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    loading: BooleanConstructor;
    loadingText: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    options: {
        type: PropType<import("./type").SelectOption[]>;
    };
    panelBottomContent: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    panelTopContent: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: PropType<import("../popup").TdPopupProps>;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultPopupVisible: BooleanConstructor;
    prefixIcon: {
        type: PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    reserveKeyword: BooleanConstructor;
    scroll: {
        type: PropType<import("..").TScroll>;
    };
    selectInputProps: {
        type: PropType<import("../select-input").TdSelectInputProps>;
    };
    showArrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<import("..").SizeEnum>;
        default: import("..").SizeEnum;
        validator(val: import("..").SizeEnum): boolean;
    };
    status: {
        type: PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    suffixIcon: {
        type: PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    tagInputProps: {
        type: PropType<import("..").TdTagInputProps>;
    };
    tagProps: {
        type: PropType<import("..").TdTagProps>;
    };
    tips: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: PropType<SelectValue<import("./type").SelectOption>>;
        default: SelectValue<import("./type").SelectOption>;
    };
    modelValue: {
        type: PropType<SelectValue<import("./type").SelectOption>>;
        default: SelectValue<import("./type").SelectOption>;
    };
    defaultValue: {
        type: PropType<SelectValue<import("./type").SelectOption>>;
        default: any;
    };
    valueDisplay: {
        type: PropType<string | ((h: typeof import("vue").h, props: {
            value: SelectValue<import("./type").SelectOption>;
            onClose: (index: number) => void;
            displayValue?: SelectValue<import("./type").SelectOption>;
        }) => import("..").SlotReturnValue)>;
    };
    valueType: {
        type: PropType<"object" | "value">;
        default: "object" | "value";
        validator(val: "object" | "value"): boolean;
    };
    onBlur: PropType<(context: {
        value: SelectValue<import("./type").SelectOption>;
        e: FocusEvent | KeyboardEvent;
    }) => void>;
    onChange: PropType<(value: SelectValue<import("./type").SelectOption>, context: {
        option?: import("./type").SelectOption;
        selectedOptions: import("./type").SelectOption[];
        trigger: import("./type").SelectValueChangeTrigger;
        e?: MouseEvent | KeyboardEvent;
    }) => void>;
    onClear: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onCreate: PropType<(value: string | number) => void>;
    onEnter: PropType<(context: {
        inputValue: string;
        e: KeyboardEvent;
        value: SelectValue<import("./type").SelectOption>;
    }) => void>;
    onFocus: PropType<(context: {
        value: SelectValue<import("./type").SelectOption>;
        e: FocusEvent | KeyboardEvent;
    }) => void>;
    onInputChange: PropType<(value: string, context?: SelectInputValueChangeContext) => void>;
    onPopupVisibleChange: PropType<(visible: boolean, context: PopupVisibleChangeContext) => void>;
    onRemove: PropType<(options: import("./type").SelectRemoveContext<import("./type").SelectOption>) => void>;
    onSearch: PropType<(filterWords: string, context: {
        e: KeyboardEvent;
    }) => void>;
}>>, {
    max: number;
    value: string | number | boolean | import("..").PlainObject | import("./type").TdOptionProps | import("./type").SelectOptionGroup | SelectValue<import("./type").SelectOption>[];
    loading: boolean;
    autofocus: boolean;
    disabled: boolean;
    multiple: boolean;
    size: import("..").SizeEnum;
    readonly: boolean;
    status: "error" | "default" | "success" | "warning";
    placeholder: string;
    modelValue: string | number | boolean | import("..").PlainObject | import("./type").TdOptionProps | import("./type").SelectOptionGroup | SelectValue<import("./type").SelectOption>[];
    defaultValue: any;
    showArrow: boolean;
    autoWidth: boolean;
    borderless: boolean;
    clearable: boolean;
    inputValue: string;
    minCollapsedNum: number;
    popupVisible: boolean;
    defaultPopupVisible: boolean;
    reserveKeyword: boolean;
    valueType: "object" | "value";
    creatable: boolean;
    filterable: boolean;
}, {}>;
export default _default;
