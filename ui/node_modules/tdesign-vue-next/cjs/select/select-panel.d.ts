import { Styles } from '../common';
import { SelectOption } from './type';
declare const _default: import("vue").DefineComponent<{
    inputValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    panelTopContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    panelBottomContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    empty: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    creatable: BooleanConstructor;
    loading: BooleanConstructor;
    loadingText: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    multiple: BooleanConstructor;
    filterable: BooleanConstructor;
    filter: {
        type: import("vue").PropType<(filterWords: string, option: SelectOption) => boolean | Promise<boolean>>;
    };
    scroll: {
        type: import("vue").PropType<import("../common").TScroll>;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
}, {
    renderPanel: (options: SelectOption[], extraStyle?: Styles) => JSX.Element;
    panelStyle: import("vue").ComputedRef<Styles>;
    cursorStyle: import("vue").ComputedRef<Styles>;
    isVirtual: import("vue").ComputedRef<boolean>;
    displayOptions: import("vue").ComputedRef<SelectOption[]>;
    visibleData: import("vue").Ref<any[]>;
    renderTNodeJSX: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    inputValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    panelTopContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    panelBottomContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    empty: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    creatable: BooleanConstructor;
    loading: BooleanConstructor;
    loadingText: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    multiple: BooleanConstructor;
    filterable: BooleanConstructor;
    filter: {
        type: import("vue").PropType<(filterWords: string, option: SelectOption) => boolean | Promise<boolean>>;
    };
    scroll: {
        type: import("vue").PropType<import("../common").TScroll>;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
}>>, {
    loading: boolean;
    multiple: boolean;
    size: import("../common").SizeEnum;
    inputValue: string;
    creatable: boolean;
    filterable: boolean;
}, {}>;
export default _default;
