import { TdTreeSelectProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    autoWidth: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: PropType<(h: typeof import("vue").h, props: {
            value: import("..").TreeOptionData<string | number>[];
            collapsedSelectedItems: import("..").TreeOptionData<string | number>[];
            count: number;
            onClose: (context: {
                index: number;
                e?: MouseEvent;
            }) => void;
        }) => import("..").SlotReturnValue>;
    };
    data: {
        type: PropType<import("..").TreeOptionData<string | number>[]>;
        default: () => TdTreeSelectProps['data'];
    };
    disabled: BooleanConstructor;
    empty: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string;
    };
    filter: {
        type: PropType<(filterWords: string, option: import("..").TreeOptionData<string | number>) => boolean>;
    };
    filterable: BooleanConstructor;
    inputProps: {
        type: PropType<import("..").InputProps<import("..").InputValue>>;
    };
    inputValue: {
        type: PropType<string>;
        default: any;
    };
    defaultInputValue: {
        type: PropType<string>;
    };
    keys: {
        type: PropType<import("..").TreeKeysType>;
    };
    loading: BooleanConstructor;
    loadingText: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: PropType<import("..").TdPopupProps>;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: any;
    };
    prefixIcon: {
        type: PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    selectInputProps: {
        type: PropType<import("..").TdSelectInputProps>;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: TdTreeSelectProps['size']): boolean;
    };
    suffix: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    suffixIcon: {
        type: PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    tagProps: {
        type: PropType<import("..").TdTagProps>;
    };
    treeProps: {
        type: PropType<import("..").TreeProps>;
    };
    value: {
        type: PropType<import("./type").TreeSelectValue>;
        default: import("./type").TreeSelectValue;
    };
    modelValue: {
        type: PropType<import("./type").TreeSelectValue>;
        default: import("./type").TreeSelectValue;
    };
    defaultValue: {
        type: PropType<import("./type").TreeSelectValue>;
    };
    valueDisplay: {
        type: PropType<(h: typeof import("vue").h, props: {
            value: import("..").TreeOptionData<string | number>[];
            onClose: () => void;
        }) => import("..").SlotReturnValue>;
    };
    valueType: {
        type: PropType<"object" | "value">;
        default: "object" | "value";
        validator(val: TdTreeSelectProps['valueType']): boolean;
    };
    onBlur: PropType<(context: {
        value: import("./type").TreeSelectValue;
        e: FocusEvent;
    }) => void>;
    onChange: PropType<(value: import("./type").TreeSelectValue, context: {
        node: import("..").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        trigger: import("./type").TreeSelectValueChangeTrigger;
        e?: MouseEvent | KeyboardEvent;
    }) => void>;
    onClear: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onFocus: PropType<(context: {
        value: import("./type").TreeSelectValue;
        e: FocusEvent;
    }) => void>;
    onInputChange: PropType<(value: string, context?: import("..").SelectInputValueChangeContext) => void>;
    onPopupVisibleChange: PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
    onRemove: PropType<(options: import("./type").RemoveOptions<import("..").TreeOptionData<string | number>>) => void>;
    onSearch: PropType<(filterWords: string) => void>;
};
export default _default;
