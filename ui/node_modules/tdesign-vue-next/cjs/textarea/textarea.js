/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _typeof = require('@babel/runtime/helpers/typeof');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Vue = require('vue');
var merge = require('lodash/merge');
var isUndefined = require('lodash/isUndefined');
var utils_helper = require('../utils/helper.js');
var textarea_calcTextareaHeight = require('./calcTextareaHeight.js');
var form_const = require('../form/const.js');
var _common_js_utils_setStyle = require('../_common/js/utils/set-style.js');
var _common_js_utils_helper = require('../_common/js/utils/helper.js');
var hooks_useVModel = require('../hooks/useVModel.js');
var form_hooks = require('../form/hooks.js');
var hooks_tnode = require('../hooks/tnode.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var textarea_props = require('./props.js');
var input_useLengthLimit = require('../input/useLengthLimit.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('lodash/camelCase');
require('lodash/isNull');
require('lodash/isArray');
require('lodash/isNumber');
require('lodash/isString');
require('@babel/runtime/helpers/toConsumableArray');
require('lodash/kebabCase');
require('lodash/isFunction');
require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isObject');
require('../config-provider/useConfig.js');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_chunks/dep-c6b6a048.js');
require('../_chunks/dep-4980a22e.js');
require('dayjs');
require('../_common/js/log/log.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var merge__default = /*#__PURE__*/_interopDefaultLegacy(merge);
var isUndefined__default = /*#__PURE__*/_interopDefaultLegacy(isUndefined);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function getValidAttrs(obj) {
  var newObj = {};
  Object.keys(obj).forEach(function (key) {
    if (!isUndefined__default["default"](obj[key])) {
      newObj[key] = obj[key];
    }
  });
  return newObj;
}
var _Textarea = Vue.defineComponent({
  name: "TTextarea",
  inheritAttrs: false,
  props: _objectSpread({}, textarea_props["default"]),
  setup: function setup(props2, _ref) {
    var attrs = _ref.attrs,
      expose = _ref.expose;
    var prefix = hooks_useConfig.usePrefixClass();
    var name = hooks_useConfig.usePrefixClass("textarea");
    var TEXTAREA_TIPS_CLASS = Vue.computed(function () {
      return "".concat(name.value, "__tips");
    });
    var TEXTAREA_LIMIT = Vue.computed(function () {
      return "".concat(name.value, "__limit");
    });
    var _toRefs = Vue.toRefs(props2),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = hooks_useVModel["default"](value, modelValue, props2.defaultValue, props2.onChange),
      _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
      innerValue = _useVModel2[0],
      setInnerValue = _useVModel2[1];
    var disabled = form_hooks.useFormDisabled();
    var textareaStyle = Vue.ref({});
    var refTextareaElem = Vue.ref();
    var focused = Vue.ref(false);
    var isComposing = Vue.ref(false);
    var focus = function focus() {
      var _refTextareaElem$valu;
      return (_refTextareaElem$valu = refTextareaElem.value) === null || _refTextareaElem$valu === void 0 ? void 0 : _refTextareaElem$valu.focus();
    };
    var blur = function blur() {
      var _refTextareaElem$valu2;
      return (_refTextareaElem$valu2 = refTextareaElem.value) === null || _refTextareaElem$valu2 === void 0 ? void 0 : _refTextareaElem$valu2.blur();
    };
    var adjustTextareaHeight = function adjustTextareaHeight() {
      var _refTextareaElem$valu3;
      if (props2.autosize === true) {
        textareaStyle.value = textarea_calcTextareaHeight["default"](refTextareaElem.value);
      } else if (props2.autosize && _typeof__default["default"](props2.autosize) === "object") {
        var _props2$autosize = props2.autosize,
          minRows = _props2$autosize.minRows,
          maxRows = _props2$autosize.maxRows;
        textareaStyle.value = textarea_calcTextareaHeight["default"](refTextareaElem.value, minRows, maxRows);
      } else if (attrs.rows) {
        textareaStyle.value = {
          height: "auto",
          minHeight: "auto"
        };
      } else if (attrs.style && (_refTextareaElem$valu3 = refTextareaElem.value) !== null && _refTextareaElem$valu3 !== void 0 && (_refTextareaElem$valu3 = _refTextareaElem$valu3.style) !== null && _refTextareaElem$valu3 !== void 0 && _refTextareaElem$valu3.height) {
        textareaStyle.value = {
          height: refTextareaElem.value.style.height
        };
      }
    };
    var setInputValue = function setInputValue() {
      var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var textareaElem = refTextareaElem.value;
      var sV = String(v);
      if (!textareaElem) {
        return;
      }
      if (textareaElem.value !== sV) {
        textareaElem.value = sV;
        innerValue.value = sV;
      }
    };
    var inputValueChangeHandle = function inputValueChangeHandle(e) {
      var target = e.target;
      var val = target.value;
      if (props2.maxcharacter && props2.maxcharacter >= 0) {
        var stringInfo = _common_js_utils_helper.getCharacterLength(val, props2.maxcharacter);
        val = _typeof__default["default"](stringInfo) === "object" && stringInfo.characters;
      }
      !isComposing.value && setInnerValue(val, {
        e: e
      });
      Vue.nextTick(function () {
        return setInputValue(val);
      });
      adjustTextareaHeight();
    };
    var handleInput = function handleInput(e) {
      inputValueChangeHandle(e);
    };
    var onCompositionstart = function onCompositionstart() {
      isComposing.value = true;
    };
    var onCompositionend = function onCompositionend(e) {
      isComposing.value = false;
      inputValueChangeHandle(e);
    };
    var eventDeal = function eventDeal(name2, e) {
      var _props2$eventName;
      if (disabled.value) return;
      var eventName = "on".concat(name2[0].toUpperCase()).concat(name2.slice(1));
      (_props2$eventName = props2[eventName]) === null || _props2$eventName === void 0 || _props2$eventName.call(props2, innerValue.value, {
        e: e
      });
    };
    var emitKeyDown = function emitKeyDown(e) {
      eventDeal("keydown", e);
    };
    var emitKeyUp = function emitKeyUp(e) {
      eventDeal("keyup", e);
    };
    var emitKeypress = function emitKeypress(e) {
      eventDeal("keypress", e);
    };
    var emitFocus = function emitFocus(e) {
      var _props2$onFocus;
      adjustTextareaHeight();
      if (disabled.value) return;
      focused.value = true;
      (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 || _props2$onFocus.call(props2, innerValue.value, {
        e: e
      });
    };
    var formItem = Vue.inject(form_const.FormItemInjectionKey, void 0);
    var emitBlur = function emitBlur(e) {
      var _props2$onBlur;
      adjustTextareaHeight();
      focused.value = false;
      (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 || _props2$onBlur.call(props2, innerValue.value, {
        e: e
      });
      formItem === null || formItem === void 0 || formItem.handleBlur();
    };
    var textareaClasses = Vue.computed(function () {
      return [name.value, _defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(prefix.value, "-is-disabled"), disabled.value), "".concat(prefix.value, "-is-readonly"), props2.readonly)];
    });
    var inputAttrs = Vue.computed(function () {
      return getValidAttrs({
        autofocus: props2.autofocus,
        disabled: disabled.value,
        readonly: props2.readonly,
        placeholder: props2.placeholder,
        maxlength: !props2.allowInputOverMax && props2.maxlength || void 0,
        name: props2.name || void 0
      });
    });
    var characterNumber = Vue.computed(function () {
      var characterInfo = _common_js_utils_helper.getCharacterLength(String(innerValue.value || ""));
      if (_typeof__default["default"](characterInfo) === "object") {
        return characterInfo.length;
      }
      return characterInfo;
    });
    var limitParams = Vue.computed(function () {
      return {
        value: [void 0, null].includes(innerValue.value) ? void 0 : String(innerValue.value),
        status: props2.status,
        maxlength: Number(props2.maxlength),
        maxcharacter: props2.maxcharacter,
        allowInputOverMax: props2.allowInputOverMax,
        onValidate: props2.onValidate
      };
    });
    var _useLengthLimit = input_useLengthLimit["default"](limitParams),
      tStatus = _useLengthLimit.tStatus;
    Vue.watch(function () {
      return innerValue.value;
    }, function () {
      return adjustTextareaHeight();
    });
    Vue.watch(refTextareaElem, function (el) {
      if (!el) return;
      adjustTextareaHeight();
    });
    Vue.watch(function () {
      return props2.autofocus;
    }, function (val) {
      if (val) {
        refTextareaElem.value.focus();
      }
    });
    Vue.watch(textareaStyle, function (val) {
      var style = attrs.style;
      _common_js_utils_setStyle["default"](refTextareaElem.value, merge__default["default"](style, val));
    });
    Vue.watch(innerValue, function () {
      Vue.nextTick(function () {
        return adjustTextareaHeight();
      });
    });
    Vue.watch(function () {
      return props2.autosize;
    }, adjustTextareaHeight, {
      deep: true
    });
    expose({
      focus: focus,
      blur: blur
    });
    Vue.onMounted(function () {
      adjustTextareaHeight();
    });
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    return function () {
      var _String;
      var inputEvents = getValidAttrs({
        onFocus: emitFocus,
        onBlur: emitBlur,
        onKeydown: emitKeyDown,
        onKeyup: emitKeyUp,
        onKeypress: emitKeypress
      });
      var _useCommonClassName = hooks_useConfig.useCommonClassName(),
        STATUS = _useCommonClassName.STATUS;
      var classes = Vue.computed(function () {
        return ["".concat(name.value, "__inner"), _defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(prefix.value, "-is-").concat(tStatus.value), tStatus.value), STATUS.value.disabled, disabled.value), STATUS.value.focused, focused.value), "".concat(prefix.value, "-resize-none"), _typeof__default["default"](props2.autosize) === "object"), "narrow-scrollbar"];
      });
      var tips = renderTNodeJSX("tips");
      var textTips = tips && Vue.createVNode("div", {
        "class": "".concat(TEXTAREA_TIPS_CLASS.value, " ").concat(name.value, "__tips--").concat(props2.status || "normal")
      }, [tips]);
      var limitText = props2.maxcharacter && Vue.createVNode("span", {
        "class": TEXTAREA_LIMIT.value
      }, ["".concat(characterNumber.value, "/").concat(props2.maxcharacter)]) || !props2.maxcharacter && props2.maxlength && Vue.createVNode("span", {
        "class": TEXTAREA_LIMIT.value
      }, ["".concat(innerValue.value ? (_String = String(innerValue.value)) === null || _String === void 0 ? void 0 : _String.length : 0, "/").concat(props2.maxlength)]);
      return Vue.createVNode("div", Vue.mergeProps({
        "class": textareaClasses.value
      }, utils_helper.omit(attrs, ["style"])), [Vue.createVNode("textarea", Vue.mergeProps({
        "onInput": handleInput,
        "onCompositionstart": onCompositionstart,
        "onCompositionend": onCompositionend,
        "ref": refTextareaElem,
        "value": innerValue.value,
        "class": classes.value
      }, inputEvents, inputAttrs.value), null), textTips || limitText ? Vue.createVNode("div", {
        "class": ["".concat(name.value, "__info_wrapper"), _defineProperty__default["default"]({}, "".concat(name.value, "__info_wrapper_align"), !textTips)]
      }, [textTips, limitText]) : null]);
    };
  }
});

exports["default"] = _Textarea;
//# sourceMappingURL=textarea.js.map
