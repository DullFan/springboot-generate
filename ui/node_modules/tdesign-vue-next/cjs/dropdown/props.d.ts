import { TdDropdownProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    direction: {
        type: PropType<"left" | "right">;
        default: "left" | "right";
        validator(val: TdDropdownProps['direction']): boolean;
    };
    disabled: BooleanConstructor;
    hideAfterItemClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxColumnWidth: {
        type: PropType<string | number>;
        default: string | number;
    };
    maxHeight: {
        type: NumberConstructor;
        default: number;
    };
    minColumnWidth: {
        type: PropType<string | number>;
        default: string | number;
    };
    options: {
        type: PropType<import("./type").DropdownOption[]>;
        default: () => TdDropdownProps['options'];
    };
    panelBottomContent: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    panelTopContent: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    placement: {
        type: PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
        default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        validator(val: TdDropdownProps['placement']): boolean;
    };
    popupProps: {
        type: PropType<import("..").TdPopupProps>;
    };
    trigger: {
        type: PropType<"click" | "focus" | "context-menu" | "hover">;
        default: "click" | "focus" | "context-menu" | "hover";
        validator(val: TdDropdownProps['trigger']): boolean;
    };
    onClick: PropType<(dropdownItem: import("./type").DropdownOption, context: {
        e: MouseEvent;
    }) => void>;
};
export default _default;
