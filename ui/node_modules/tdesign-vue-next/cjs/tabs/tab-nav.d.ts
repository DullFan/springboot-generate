import { h } from 'vue';
import TTabPanel from './tab-panel';
declare const _default: import("vue").DefineComponent<{
    theme: {
        type: import("vue").PropType<"normal" | "card">;
        default: "normal" | "card";
        validator(val: "normal" | "card"): boolean;
    };
    panels: {
        type: new () => Array<InstanceType<typeof TTabPanel>>;
        default: () => Array<InstanceType<typeof TTabPanel>>;
    };
    action: ArrayConstructor;
    value: {
        type: import("vue").PropType<import("./type").TabValue>;
        default: import("./type").TabValue;
    };
    placement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
        default: "left" | "top" | "bottom" | "right";
        validator(val: "left" | "top" | "bottom" | "right"): boolean;
    };
    size: {
        type: import("vue").PropType<"medium" | "large">;
        default: "medium" | "large";
        validator(val: "medium" | "large"): boolean;
    };
    disabled: BooleanConstructor;
    addable: BooleanConstructor;
    onChange: import("vue").PropType<(value: import("./type").TabValue) => void>;
    onAdd: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onRemove: import("vue").PropType<(options: {
        value: import("./type").TabValue;
        index: number;
        e: MouseEvent;
    }) => void>;
    dragSort: BooleanConstructor;
    onDragSort: import("vue").PropType<(context: import("./type").TabsDragSortContext) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    theme: {
        type: import("vue").PropType<"normal" | "card">;
        default: "normal" | "card";
        validator(val: "normal" | "card"): boolean;
    };
    panels: {
        type: new () => Array<InstanceType<typeof TTabPanel>>;
        default: () => Array<InstanceType<typeof TTabPanel>>;
    };
    action: ArrayConstructor;
    value: {
        type: import("vue").PropType<import("./type").TabValue>;
        default: import("./type").TabValue;
    };
    placement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
        default: "left" | "top" | "bottom" | "right";
        validator(val: "left" | "top" | "bottom" | "right"): boolean;
    };
    size: {
        type: import("vue").PropType<"medium" | "large">;
        default: "medium" | "large";
        validator(val: "medium" | "large"): boolean;
    };
    disabled: BooleanConstructor;
    addable: BooleanConstructor;
    onChange: import("vue").PropType<(value: import("./type").TabValue) => void>;
    onAdd: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onRemove: import("vue").PropType<(options: {
        value: import("./type").TabValue;
        index: number;
        e: MouseEvent;
    }) => void>;
    dragSort: BooleanConstructor;
    onDragSort: import("vue").PropType<(context: import("./type").TabsDragSortContext) => void>;
}>>, {
    value: import("./type").TabValue;
    disabled: boolean;
    size: "medium" | "large";
    theme: "normal" | "card";
    placement: "left" | "top" | "bottom" | "right";
    dragSort: boolean;
    panels: import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        default: {
            type: import("vue").PropType<(h: typeof h) => import("..").SlotReturnValue>;
        };
        destroyOnHide: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: BooleanConstructor;
        draggable: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof h) => import("..").SlotReturnValue)>;
        };
        lazy: BooleanConstructor;
        panel: {
            type: import("vue").PropType<string | ((h: typeof h) => import("..").SlotReturnValue)>;
        };
        removable: BooleanConstructor;
        value: {
            type: import("vue").PropType<import("./type").TabValue>;
        };
        onRemove: import("vue").PropType<(options: {
            value: import("./type").TabValue;
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        default: {
            type: import("vue").PropType<(h: typeof h) => import("..").SlotReturnValue>;
        };
        destroyOnHide: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: BooleanConstructor;
        draggable: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof h) => import("..").SlotReturnValue)>;
        };
        lazy: BooleanConstructor;
        panel: {
            type: import("vue").PropType<string | ((h: typeof h) => import("..").SlotReturnValue)>;
        };
        removable: BooleanConstructor;
        value: {
            type: import("vue").PropType<import("./type").TabValue>;
        };
        onRemove: import("vue").PropType<(options: {
            value: import("./type").TabValue;
            e: MouseEvent;
        }) => void>;
    }>>, {
        draggable: boolean;
        lazy: boolean;
        disabled: boolean;
        destroyOnHide: boolean;
        removable: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        default: {
            type: import("vue").PropType<(h: typeof h) => import("..").SlotReturnValue>;
        };
        destroyOnHide: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: BooleanConstructor;
        draggable: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof h) => import("..").SlotReturnValue)>;
        };
        lazy: BooleanConstructor;
        panel: {
            type: import("vue").PropType<string | ((h: typeof h) => import("..").SlotReturnValue)>;
        };
        removable: BooleanConstructor;
        value: {
            type: import("vue").PropType<import("./type").TabValue>;
        };
        onRemove: import("vue").PropType<(options: {
            value: import("./type").TabValue;
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        draggable: boolean;
        lazy: boolean;
        disabled: boolean;
        destroyOnHide: boolean;
        removable: boolean;
    }>[];
    addable: boolean;
}, {}>;
export default _default;
