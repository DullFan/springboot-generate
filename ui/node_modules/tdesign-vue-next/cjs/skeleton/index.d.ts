import { TdSkeletonProps } from './type';
import './style';
export * from './type';
export declare type SkeletonProps = TdSkeletonProps;
export declare const Skeleton: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        animation: {
            type: import("vue").PropType<"none" | "gradient" | "flashed">;
            default: "none" | "gradient" | "flashed";
            validator(val: "none" | "gradient" | "flashed"): boolean;
        };
        delay: {
            type: NumberConstructor;
            default: number;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowCol: {
            type: import("vue").PropType<import("./type").SkeletonRowCol>;
        };
        theme: {
            type: import("vue").PropType<"article" | "text" | "tab" | "avatar" | "paragraph" | "avatar-text">;
            validator(val: "article" | "text" | "tab" | "avatar" | "paragraph" | "avatar-text"): boolean;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        animation: {
            type: import("vue").PropType<"none" | "gradient" | "flashed">;
            default: "none" | "gradient" | "flashed";
            validator(val: "none" | "gradient" | "flashed"): boolean;
        };
        delay: {
            type: NumberConstructor;
            default: number;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowCol: {
            type: import("vue").PropType<import("./type").SkeletonRowCol>;
        };
        theme: {
            type: import("vue").PropType<"article" | "text" | "tab" | "avatar" | "paragraph" | "avatar-text">;
            validator(val: "article" | "text" | "tab" | "avatar" | "paragraph" | "avatar-text"): boolean;
        };
    }>>, {
        animation: "none" | "gradient" | "flashed";
        loading: boolean;
        delay: number;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        animation: {
            type: import("vue").PropType<"none" | "gradient" | "flashed">;
            default: "none" | "gradient" | "flashed";
            validator(val: "none" | "gradient" | "flashed"): boolean;
        };
        delay: {
            type: NumberConstructor;
            default: number;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowCol: {
            type: import("vue").PropType<import("./type").SkeletonRowCol>;
        };
        theme: {
            type: import("vue").PropType<"article" | "text" | "tab" | "avatar" | "paragraph" | "avatar-text">;
            validator(val: "article" | "text" | "tab" | "avatar" | "paragraph" | "avatar-text"): boolean;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        animation: "none" | "gradient" | "flashed";
        loading: boolean;
        delay: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    animation: {
        type: import("vue").PropType<"none" | "gradient" | "flashed">;
        default: "none" | "gradient" | "flashed";
        validator(val: "none" | "gradient" | "flashed"): boolean;
    };
    delay: {
        type: NumberConstructor;
        default: number;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowCol: {
        type: import("vue").PropType<import("./type").SkeletonRowCol>;
    };
    theme: {
        type: import("vue").PropType<"article" | "text" | "tab" | "avatar" | "paragraph" | "avatar-text">;
        validator(val: "article" | "text" | "tab" | "avatar" | "paragraph" | "avatar-text"): boolean;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    animation: "none" | "gradient" | "flashed";
    loading: boolean;
    delay: number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Skeleton;
