/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var utils_helper = require('../utils/helper.js');
var progress_constants = require('./constants.js');
var progress_props = require('./props.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var hooks_useGlobalIcon = require('../hooks/useGlobalIcon.js');
var hooks_tnode = require('../hooks/tnode.js');
var isObject = require('lodash/isObject');
var isString = require('lodash/isString');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/camelCase');
require('lodash/isUndefined');
require('lodash/isNull');
require('lodash/isArray');
require('lodash/isNumber');
require('../config-provider/useConfig.js');
require('lodash/isFunction');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_chunks/dep-c6b6a048.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-4980a22e.js');
require('dayjs');
require('lodash/kebabCase');
require('../utils/render-tnode.js');
require('lodash/isEmpty');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var isObject__default = /*#__PURE__*/_interopDefaultLegacy(isObject);
var isString__default = /*#__PURE__*/_interopDefaultLegacy(isString);

var _Progress = Vue.defineComponent({
  name: "TProgress",
  props: progress_props["default"],
  setup: function setup(props2) {
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var COMPONENT_NAME = hooks_useConfig.usePrefixClass("progress");
    var _useGlobalIcon = hooks_useGlobalIcon.useGlobalIcon({
        CloseCircleFilledIcon: tdesignIconsVueNext.CloseCircleFilledIcon,
        CheckCircleFilledIcon: tdesignIconsVueNext.CheckCircleFilledIcon,
        ErrorCircleFilledIcon: tdesignIconsVueNext.ErrorCircleFilledIcon,
        CloseIcon: tdesignIconsVueNext.CloseIcon,
        CheckIcon: tdesignIconsVueNext.CheckIcon,
        ErrorIcon: tdesignIconsVueNext.ErrorIcon
      }),
      CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon,
      CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
      ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon,
      CloseIcon = _useGlobalIcon.CloseIcon,
      CheckIcon = _useGlobalIcon.CheckIcon,
      ErrorIcon = _useGlobalIcon.ErrorIcon;
    var statusStyle = Vue.computed(function () {
      if (props2.percentage >= 100) {
        return "success";
      }
      return props2.status || "default";
    });
    var trackBgStyle = Vue.computed(function () {
      var style = {};
      if (props2.strokeWidth) {
        var height = isString__default["default"](props2.strokeWidth) ? props2.strokeWidth : "".concat(props2.strokeWidth, "px");
        style.height = height;
        style.borderRadius = height;
      }
      if (props2.trackColor) {
        style.backgroundColor = props2.trackColor;
      }
      return style;
    });
    var barStyle = Vue.computed(function () {
      return {
        width: "".concat(props2.percentage, "%"),
        background: props2.color && utils_helper.getBackgroundColor(props2.color)
      };
    });
    var circlePathStyle = Vue.computed(function () {
      var strokeColor = isObject__default["default"](props2.color) ? "" : props2.color;
      return {
        stroke: strokeColor
      };
    });
    var circleOuterStyle = Vue.computed(function () {
      var strokeColor = isObject__default["default"](props2.trackColor) ? "" : props2.trackColor;
      return {
        stroke: strokeColor
      };
    });
    var diameter = Vue.computed(function () {
      var diameter2 = progress_constants.CIRCLE_SIZE_PX.MEDIUM;
      if (!props2.size) {
        return diameter2;
      }
      var SMALL = progress_constants.CIRCLE_SIZE.SMALL,
        LARGE = progress_constants.CIRCLE_SIZE.LARGE,
        MEDIUM = progress_constants.CIRCLE_SIZE.MEDIUM;
      switch (props2.size) {
        case SMALL:
          diameter2 = progress_constants.CIRCLE_SIZE_PX.SMALL;
          break;
        case MEDIUM:
          diameter2 = progress_constants.CIRCLE_SIZE_PX.MEDIUM;
          break;
        case LARGE:
          diameter2 = progress_constants.CIRCLE_SIZE_PX.LARGE;
          break;
        default:
          diameter2 = Number(props2.size);
          break;
      }
      return diameter2;
    });
    var rPoints = Vue.computed(function () {
      return diameter.value / 2;
    });
    var radius = Vue.computed(function () {
      return rPoints.value - circleStrokeWidth.value / 2;
    });
    var circleStyle = Vue.computed(function () {
      if (props2.theme !== progress_constants.PRO_THEME.CIRCLE) {
        return {};
      }
      var fontSize = diameter.value * progress_constants.CIRCLE_FONT_SIZE_RATIO.MEDIUM;
      if (diameter.value <= progress_constants.CIRCLE_SIZE_PX.SMALL) {
        fontSize = diameter.value * progress_constants.CIRCLE_FONT_SIZE_RATIO.SMALL;
      } else if (diameter.value >= progress_constants.CIRCLE_SIZE_PX.LARGE) {
        fontSize = diameter.value * progress_constants.CIRCLE_FONT_SIZE_RATIO.LARGE;
      }
      return {
        width: "".concat(diameter.value, "px"),
        height: "".concat(diameter.value, "px"),
        fontSize: "".concat(fontSize, "px")
      };
    });
    var circleStrokeWidth = Vue.computed(function () {
      var defaultWidth = props2.size === progress_constants.CIRCLE_SIZE.SMALL ? 4 : 6;
      return props2.strokeWidth ? Number(props2.strokeWidth) : defaultWidth;
    });
    var strokeDashArr = Vue.computed(function () {
      var radius2 = (diameter.value - circleStrokeWidth.value) / 2;
      var perimeter = Math.PI * 2 * radius2;
      var percent = props2.percentage / 100;
      return "".concat(perimeter * percent, "  ").concat(perimeter * (1 - percent));
    });
    var getIconMap = function getIconMap() {
      var CIRCLE_ICONS = {
        success: CheckIcon,
        warning: ErrorIcon,
        error: CloseIcon
      };
      var NORMAL_ICONS = {
        success: CheckCircleFilledIcon,
        warning: ErrorCircleFilledIcon,
        error: CloseCircleFilledIcon
      };
      return props2.theme === progress_constants.PRO_THEME.CIRCLE ? CIRCLE_ICONS : NORMAL_ICONS;
    };
    var getLabelContent = function getLabelContent() {
      var labelContent = "".concat(props2.percentage, "%");
      var status = props2.status || "";
      if (progress_constants.STATUS_ICON.includes(status) && props2.theme !== progress_constants.PRO_THEME.PLUMP) {
        var components = getIconMap();
        var component = components[status];
        if (component) {
          labelContent = Vue.createVNode(component, {
            "class": ["".concat(COMPONENT_NAME.value, "__icon")]
          }, null);
        }
      }
      return labelContent;
    };
    return function () {
      var labelContent = Vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__info")
      }, [renderTNodeJSX("label", getLabelContent())]);
      var PLUMP_SEPARATE = 10;
      var separateClasses = props2.percentage > PLUMP_SEPARATE ? "".concat(COMPONENT_NAME.value, "--over-ten") : "".concat(COMPONENT_NAME.value, "--under-ten");
      return Vue.createVNode("div", {
        "class": COMPONENT_NAME.value
      }, [props2.theme === progress_constants.PRO_THEME.LINE && Vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "--thin ").concat(COMPONENT_NAME.value, "--status--").concat(statusStyle.value)
      }, [Vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__bar"),
        "style": trackBgStyle.value
      }, [Vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__inner"),
        "style": barStyle.value
      }, null)]), labelContent]), props2.theme === progress_constants.PRO_THEME.PLUMP && Vue.createVNode("div", {
        "class": ["".concat(COMPONENT_NAME.value, "__bar ").concat(COMPONENT_NAME.value, "--plump ").concat(separateClasses), _defineProperty__default["default"]({}, "".concat(COMPONENT_NAME.value, "--status--").concat(statusStyle.value), statusStyle.value)],
        "style": trackBgStyle.value
      }, [Vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__inner"),
        "style": barStyle.value
      }, [props2.percentage > PLUMP_SEPARATE && labelContent]), props2.percentage <= PLUMP_SEPARATE && labelContent]), props2.theme === progress_constants.PRO_THEME.CIRCLE && Vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "--circle ").concat(COMPONENT_NAME.value, "--status--").concat(statusStyle.value),
        "style": circleStyle.value
      }, [labelContent, Vue.createVNode("svg", {
        "width": diameter.value,
        "height": diameter.value,
        "viewBox": "0 0 ".concat(diameter.value, " ").concat(diameter.value)
      }, [Vue.createVNode("circle", {
        "cx": rPoints.value,
        "cy": rPoints.value,
        "r": radius.value,
        "stroke-width": circleStrokeWidth.value,
        "fill": "none",
        "class": ["".concat(COMPONENT_NAME.value, "__circle-outer")],
        "style": circleOuterStyle.value
      }, null), props2.percentage > 0 && Vue.createVNode("circle", {
        "cx": rPoints.value,
        "cy": rPoints.value,
        "r": radius.value,
        "stroke-width": circleStrokeWidth.value,
        "fill": "none",
        "stroke-linecap": "round",
        "class": ["".concat(COMPONENT_NAME.value, "__circle-inner")],
        "transform": "matrix(0,-1,1,0,0,".concat(diameter.value, ")"),
        "stroke-dasharray": strokeDashArr.value,
        "style": circlePathStyle.value
      }, null)])])]);
    };
  }
});

exports["default"] = _Progress;
//# sourceMappingURL=progress.js.map
