import { SwiperNavigation, SwiperChangeSource } from './type';
declare const _default: import("vue").DefineComponent<{
    animation: {
        type: import("vue").PropType<"fade" | "slide">;
        default: "fade" | "slide";
        validator(val: "fade" | "slide"): boolean;
    };
    autoplay: {
        type: BooleanConstructor;
        default: boolean;
    };
    current: {
        type: NumberConstructor;
        default: number;
    };
    defaultCurrent: {
        type: NumberConstructor;
        default: number;
    };
    direction: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    height: {
        type: NumberConstructor;
    };
    interval: {
        type: NumberConstructor;
        default: number;
    };
    loop: {
        type: BooleanConstructor;
        default: boolean;
    };
    navigation: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("..").SlotReturnValue) | SwiperNavigation>;
    };
    stopOnHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<"dark" | "light">;
        default: "dark" | "light";
        validator(val: "dark" | "light"): boolean;
    };
    trigger: {
        type: import("vue").PropType<"click" | "hover">;
        default: "click" | "hover";
        validator(val: "click" | "hover"): boolean;
    };
    type: {
        type: import("vue").PropType<"default" | "card">;
        default: "default" | "card";
        validator(val: "default" | "card"): boolean;
    };
    onChange: import("vue").PropType<(current: number, context: {
        source: SwiperChangeSource;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:current"[], "update:current", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    animation: {
        type: import("vue").PropType<"fade" | "slide">;
        default: "fade" | "slide";
        validator(val: "fade" | "slide"): boolean;
    };
    autoplay: {
        type: BooleanConstructor;
        default: boolean;
    };
    current: {
        type: NumberConstructor;
        default: number;
    };
    defaultCurrent: {
        type: NumberConstructor;
        default: number;
    };
    direction: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    height: {
        type: NumberConstructor;
    };
    interval: {
        type: NumberConstructor;
        default: number;
    };
    loop: {
        type: BooleanConstructor;
        default: boolean;
    };
    navigation: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("..").SlotReturnValue) | SwiperNavigation>;
    };
    stopOnHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<"dark" | "light">;
        default: "dark" | "light";
        validator(val: "dark" | "light"): boolean;
    };
    trigger: {
        type: import("vue").PropType<"click" | "hover">;
        default: "click" | "hover";
        validator(val: "click" | "hover"): boolean;
    };
    type: {
        type: import("vue").PropType<"default" | "card">;
        default: "default" | "card";
        validator(val: "default" | "card"): boolean;
    };
    onChange: import("vue").PropType<(current: number, context: {
        source: SwiperChangeSource;
    }) => void>;
}>> & {
    "onUpdate:current"?: (...args: any[]) => any;
}, {
    type: "default" | "card";
    interval: number;
    animation: "fade" | "slide";
    direction: "horizontal" | "vertical";
    duration: number;
    autoplay: boolean;
    loop: boolean;
    trigger: "click" | "hover";
    current: number;
    theme: "dark" | "light";
    defaultCurrent: number;
    stopOnHover: boolean;
}, {}>;
export default _default;
