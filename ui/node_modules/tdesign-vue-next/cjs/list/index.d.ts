import { TdListProps, TdListItemProps, TdListItemMetaProps } from './type';
import './style';
export * from './type';
export declare type ListProps = TdListProps;
export declare type ListItemProps = TdListItemProps;
export declare type ListItemMetaProps = TdListItemMetaProps;
export declare const List: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        footer: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        header: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        scroll: {
            type: import("vue").PropType<import("..").TScroll>;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        split: BooleanConstructor;
        stripe: BooleanConstructor;
        onLoadMore: import("vue").PropType<(options: {
            e: MouseEvent;
        }) => void>;
        onScroll: import("vue").PropType<(options: {
            e: Event | WheelEvent;
            scrollTop: number;
            scrollBottom: number;
        }) => void>;
    }>>, {
        COMPONENT_NAME: import("vue").ComputedRef<string>;
        listClass: import("vue").ComputedRef<(string | {
            [x: string]: boolean;
        })[]>;
        loadingClass: import("vue").ComputedRef<string>;
        renderLoading: () => any;
        renderContent: () => import("vue").VNodeChild;
        handleScroll: (e: WheelEvent) => void;
        handleLoadMore: (e: MouseEvent) => void;
        listRef: import("vue").Ref<any>;
        isVirtualScroll: import("vue").ComputedRef<boolean>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        footer: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        header: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        scroll: {
            type: import("vue").PropType<import("..").TScroll>;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        split: BooleanConstructor;
        stripe: BooleanConstructor;
        onLoadMore: import("vue").PropType<(options: {
            e: MouseEvent;
        }) => void>;
        onScroll: import("vue").PropType<(options: {
            e: Event | WheelEvent;
            scrollTop: number;
            scrollBottom: number;
        }) => void>;
    }>>, {
        split: boolean;
        size: "small" | "medium" | "large";
        layout: "horizontal" | "vertical";
        stripe: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        footer: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        header: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        scroll: {
            type: import("vue").PropType<import("..").TScroll>;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        split: BooleanConstructor;
        stripe: BooleanConstructor;
        onLoadMore: import("vue").PropType<(options: {
            e: MouseEvent;
        }) => void>;
        onScroll: import("vue").PropType<(options: {
            e: Event | WheelEvent;
            scrollTop: number;
            scrollBottom: number;
        }) => void>;
    }>>, {
        COMPONENT_NAME: import("vue").ComputedRef<string>;
        listClass: import("vue").ComputedRef<(string | {
            [x: string]: boolean;
        })[]>;
        loadingClass: import("vue").ComputedRef<string>;
        renderLoading: () => any;
        renderContent: () => import("vue").VNodeChild;
        handleScroll: (e: WheelEvent) => void;
        handleLoadMore: (e: MouseEvent) => void;
        listRef: import("vue").Ref<any>;
        isVirtualScroll: import("vue").ComputedRef<boolean>;
    }, {}, {}, {}, {
        split: boolean;
        size: "small" | "medium" | "large";
        layout: "horizontal" | "vertical";
        stripe: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    asyncLoading: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    footer: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    header: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    scroll: {
        type: import("vue").PropType<import("..").TScroll>;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    split: BooleanConstructor;
    stripe: BooleanConstructor;
    onLoadMore: import("vue").PropType<(options: {
        e: MouseEvent;
    }) => void>;
    onScroll: import("vue").PropType<(options: {
        e: Event | WheelEvent;
        scrollTop: number;
        scrollBottom: number;
    }) => void>;
}>>, {
    COMPONENT_NAME: import("vue").ComputedRef<string>;
    listClass: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    loadingClass: import("vue").ComputedRef<string>;
    renderLoading: () => any;
    renderContent: () => import("vue").VNodeChild;
    handleScroll: (e: WheelEvent) => void;
    handleLoadMore: (e: MouseEvent) => void;
    listRef: import("vue").Ref<any>;
    isVirtualScroll: import("vue").ComputedRef<boolean>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    split: boolean;
    size: "small" | "medium" | "large";
    layout: "horizontal" | "vertical";
    stripe: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const ListItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        footer: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        header: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        scroll: {
            type: import("vue").PropType<import("..").TScroll>;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        split: BooleanConstructor;
        stripe: BooleanConstructor;
        onLoadMore: import("vue").PropType<(options: {
            e: MouseEvent;
        }) => void>;
        onScroll: import("vue").PropType<(options: {
            e: Event | WheelEvent;
            scrollTop: number;
            scrollBottom: number;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        footer: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        header: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        scroll: {
            type: import("vue").PropType<import("..").TScroll>;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        split: BooleanConstructor;
        stripe: BooleanConstructor;
        onLoadMore: import("vue").PropType<(options: {
            e: MouseEvent;
        }) => void>;
        onScroll: import("vue").PropType<(options: {
            e: Event | WheelEvent;
            scrollTop: number;
            scrollBottom: number;
        }) => void>;
    }>>, {
        split: boolean;
        size: "small" | "medium" | "large";
        layout: "horizontal" | "vertical";
        stripe: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        footer: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        header: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        scroll: {
            type: import("vue").PropType<import("..").TScroll>;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        split: BooleanConstructor;
        stripe: BooleanConstructor;
        onLoadMore: import("vue").PropType<(options: {
            e: MouseEvent;
        }) => void>;
        onScroll: import("vue").PropType<(options: {
            e: Event | WheelEvent;
            scrollTop: number;
            scrollBottom: number;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        split: boolean;
        size: "small" | "medium" | "large";
        layout: "horizontal" | "vertical";
        stripe: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    asyncLoading: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    footer: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    header: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    scroll: {
        type: import("vue").PropType<import("..").TScroll>;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    split: BooleanConstructor;
    stripe: BooleanConstructor;
    onLoadMore: import("vue").PropType<(options: {
        e: MouseEvent;
    }) => void>;
    onScroll: import("vue").PropType<(options: {
        e: Event | WheelEvent;
        scrollTop: number;
        scrollBottom: number;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    split: boolean;
    size: "small" | "medium" | "large";
    layout: "horizontal" | "vertical";
    stripe: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const ListItemMeta: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        avatar: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        description: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        image: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        avatar: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        description: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        image: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
    }>>, {}, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        avatar: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        description: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        image: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
    }>>, () => JSX.Element, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    avatar: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    description: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    image: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
