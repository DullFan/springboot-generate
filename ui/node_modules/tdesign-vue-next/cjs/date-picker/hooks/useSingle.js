/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var dayjs = require('dayjs');
var omit = require('lodash/omit');
var hooks_tnode = require('../../hooks/tnode.js');
var form_hooks = require('../../form/hooks.js');
var hooks_useConfig = require('../../hooks/useConfig.js');
var hooks_useGlobalIcon = require('../../hooks/useGlobalIcon.js');
var _common_js_datePicker_utils = require('../../_chunks/dep-8d57e5cd.js');
var datePicker_hooks_useSingleValue = require('./useSingleValue.js');
require('lodash/isFunction');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../../utils/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isObject');
require('../../config-provider/useConfig.js');
require('lodash/cloneDeep');
require('../../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../../_common/js/global-config/default-config.js');
require('../../_common/js/global-config/locale/zh_CN.js');
require('../../_chunks/dep-c6b6a048.js');
require('@babel/runtime/helpers/typeof');
require('../../_chunks/dep-4980a22e.js');
require('lodash/isArray');
require('@babel/runtime/helpers/slicedToArray');
require('@babel/runtime/helpers/objectDestructuringEmpty');
require('@babel/runtime/helpers/extends');
require('../../_chunks/dep-05c45a56.js');
require('lodash/chunk');
require('../../_common/js/log/log.js');
require('../../hooks/useVModel.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);
var omit__default = /*#__PURE__*/_interopDefaultLegacy(omit);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function useSingle(props) {
  var COMPONENT_NAME = hooks_useConfig.usePrefixClass("date-picker");
  var _useGlobalIcon = hooks_useGlobalIcon.useGlobalIcon({
      CalendarIcon: tdesignIconsVueNext.CalendarIcon
    }),
    CalendarIcon = _useGlobalIcon.CalendarIcon;
  var disabled = form_hooks.useFormDisabled();
  var renderTNodeJSX = hooks_tnode.useTNodeJSX();
  var inputRef = Vue.ref();
  var _useSingleValue = datePicker_hooks_useSingleValue["default"](props),
    value = _useSingleValue.value,
    onChange = _useSingleValue.onChange,
    time = _useSingleValue.time,
    month = _useSingleValue.month,
    year = _useSingleValue.year,
    cacheValue = _useSingleValue.cacheValue;
  var formatRef = Vue.computed(function () {
    return _common_js_datePicker_utils.getDefaultFormat({
      mode: props.mode,
      format: props.format,
      valueType: props.valueType,
      enableTimePicker: props.enableTimePicker
    });
  });
  var popupVisible = Vue.ref(false);
  var isHoverCell = Vue.ref(false);
  var inputValue = Vue.ref(_common_js_datePicker_utils.formatDate(value.value, {
    format: formatRef.value.format
  }));
  var inputProps = Vue.computed(function () {
    return _objectSpread(_objectSpread({}, props.inputProps), {}, {
      size: props.size,
      ref: inputRef,
      prefixIcon: function prefixIcon() {
        return renderTNodeJSX("prefixIcon");
      },
      readonly: !props.allowInput,
      suffixIcon: function suffixIcon() {
        return renderTNodeJSX("suffixIcon") || Vue.createVNode(CalendarIcon, null, null);
      },
      "class": [_defineProperty__default["default"]({}, "".concat(COMPONENT_NAME.value, "__input--placeholder"), isHoverCell.value)],
      onClear: function onClear(context) {
        var _context$e;
        context === null || context === void 0 || (_context$e = context.e) === null || _context$e === void 0 || _context$e.stopPropagation();
        popupVisible.value = false;
        onChange === null || onChange === void 0 || onChange("", {
          dayjsValue: dayjs__default["default"](),
          trigger: "clear"
        });
      },
      onBlur: function onBlur(val, context) {
        var _props$onBlur;
        (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, {
          value: val,
          e: context.e
        });
      },
      onFocus: function onFocus(_, _ref2) {
        var _props$onFocus;
        var e = _ref2.e;
        (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, {
          value: value.value,
          e: e
        });
      },
      onChange: function onChange(val) {
        inputValue.value = val;
        if (!_common_js_datePicker_utils.isValidDate(val, formatRef.value.format)) return;
        cacheValue.value = val;
        var newMonth = _common_js_datePicker_utils.parseToDayjs(val, formatRef.value.format).month();
        var newYear = _common_js_datePicker_utils.parseToDayjs(val, formatRef.value.format).year();
        var newTime = _common_js_datePicker_utils.formatTime(val, formatRef.value.format, formatRef.value.timeFormat, props.defaultTime);
        !Number.isNaN(newYear) && (year.value = newYear);
        !Number.isNaN(newMonth) && (month.value = newMonth);
        !Number.isNaN(newTime) && (time.value = newTime);
      },
      onEnter: function onEnter(val) {
        if (!val) {
          onChange("", {
            dayjsValue: dayjs__default["default"](),
            trigger: "enter"
          });
          popupVisible.value = false;
          return;
        }
        if (!_common_js_datePicker_utils.isValidDate(val, formatRef.value.format) && !_common_js_datePicker_utils.isValidDate(value.value, formatRef.value.format)) return;
        popupVisible.value = false;
        if (_common_js_datePicker_utils.isValidDate(val, formatRef.value.format)) {
          onChange === null || onChange === void 0 || onChange(_common_js_datePicker_utils.formatDate(val, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType
          }), {
            dayjsValue: _common_js_datePicker_utils.parseToDayjs(val, formatRef.value.format),
            trigger: "enter"
          });
        } else if (_common_js_datePicker_utils.isValidDate(value.value, formatRef.value.format)) {
          inputValue.value = _common_js_datePicker_utils.formatDate(value.value, {
            format: formatRef.value.format
          });
        } else {
          inputValue.value = "";
        }
      }
    });
  });
  var popupProps = Vue.computed(function () {
    var _props$popupProps$ove, _props$popupProps, _props$popupProps2;
    return _objectSpread(_objectSpread({
      expandAnimation: true
    }, omit__default["default"](props.popupProps, "on-visible-change")), {}, {
      disabled: disabled.value,
      overlayInnerStyle: (_props$popupProps$ove = (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 ? void 0 : _props$popupProps.overlayInnerStyle) !== null && _props$popupProps$ove !== void 0 ? _props$popupProps$ove : {
        width: "auto"
      },
      overlayClassName: [(_props$popupProps2 = props.popupProps) === null || _props$popupProps2 === void 0 ? void 0 : _props$popupProps2.overlayClassName, "".concat(COMPONENT_NAME.value, "__panel-container")],
      onVisibleChange: function onVisibleChange(visible, context) {
        var _props$popupProps3, _props$popupProps3$on, _props$popupProps4, _props$popupProps4$on;
        if (disabled.value) return;
        (_props$popupProps3 = props.popupProps) === null || _props$popupProps3 === void 0 || (_props$popupProps3$on = _props$popupProps3.onVisibleChange) === null || _props$popupProps3$on === void 0 || _props$popupProps3$on.call(_props$popupProps3, visible, context);
        (_props$popupProps4 = props.popupProps) === null || _props$popupProps4 === void 0 || (_props$popupProps4$on = _props$popupProps4["on-visible-change"]) === null || _props$popupProps4$on === void 0 || _props$popupProps4$on.call(_props$popupProps4, visible, context);
        if (context.trigger === "trigger-element-click") {
          popupVisible.value = true;
          return;
        }
        popupVisible.value = visible;
      }
    });
  });
  Vue.watch(value, function (value2) {
    if (!value2) {
      inputValue.value = "";
      return;
    }
    if (!_common_js_datePicker_utils.isValidDate(value2, formatRef.value.format)) return;
    inputValue.value = _common_js_datePicker_utils.formatDate(value2, {
      format: formatRef.value.format
    });
  });
  return {
    year: year,
    month: month,
    value: value,
    time: time,
    inputValue: inputValue,
    popupVisible: popupVisible,
    inputProps: inputProps,
    popupProps: popupProps,
    inputRef: inputRef,
    cacheValue: cacheValue,
    isHoverCell: isHoverCell,
    onChange: onChange
  };
}

exports["default"] = useSingle;
//# sourceMappingURL=useSingle.js.map
