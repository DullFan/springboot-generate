import { TdDatePickerProps, TdDateRangePickerProps, TdDatePickerPanelProps, TdDateRangePickerPanelProps } from './type';
import './style';
export * from './type';
export declare type DatePickerProps = TdDatePickerProps;
export interface DatePickerPanelProps extends TdDatePickerPanelProps, Pick<TdDatePickerProps, 'modelValue'> {
}
export declare type DateRangePickerProps = TdDateRangePickerProps;
export interface DateRangePickerPanelProps extends TdDateRangePickerPanelProps, Pick<TdDateRangePickerProps, 'modelValue'> {
}
export declare const DatePicker: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        allowInput: BooleanConstructor;
        clearable: BooleanConstructor;
        defaultTime: {
            type: StringConstructor;
            default: string;
        };
        disableDate: {
            type: import("vue").PropType<import("./type").DisableDate>;
        };
        disabled: BooleanConstructor;
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: number): boolean;
        };
        format: {
            type: StringConstructor;
            default: any;
        };
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        mode: {
            type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
            default: "month" | "year" | "quarter" | "week" | "date";
            validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
        };
        placeholder: {
            type: import("vue").PropType<string>;
            default: string;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetDate>;
        };
        presetsPlacement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
            default: "left" | "top" | "bottom" | "right";
            validator(val: "left" | "top" | "bottom" | "right"): boolean;
        };
        selectInputProps: {
            type: import("vue").PropType<import("..").TdSelectInputProps>;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        timePickerProps: {
            type: import("vue").PropType<import("..").TdTimePickerProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: import("./type").DateValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: import("./type").DateValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: import("./type").DateValue;
        };
        valueDisplay: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: import("./type").DateValue;
                displayValue?: import("./type").DateValue;
            }) => import("..").SlotReturnValue)>;
        };
        valueType: {
            type: import("vue").PropType<import("./type").DatePickerValueType>;
            default: import("./type").DatePickerValueType;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").DateValue;
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").DateValue, context: {
            dayjsValue?: import("dayjs").Dayjs;
            trigger?: import("./type").DatePickerTriggerSource;
        }) => void>;
        onConfirm: import("vue").PropType<(context: {
            date: Date;
            e: MouseEvent;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            value: import("./type").DateValue;
            e: FocusEvent;
        }) => void>;
        onPick: import("vue").PropType<(value: import("./type").DateValue) => void>;
        onPresetClick: import("vue").PropType<(context: {
            preset: import("./type").PresetDate;
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        allowInput: BooleanConstructor;
        clearable: BooleanConstructor;
        defaultTime: {
            type: StringConstructor;
            default: string;
        };
        disableDate: {
            type: import("vue").PropType<import("./type").DisableDate>;
        };
        disabled: BooleanConstructor;
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: number): boolean;
        };
        format: {
            type: StringConstructor;
            default: any;
        };
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        mode: {
            type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
            default: "month" | "year" | "quarter" | "week" | "date";
            validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
        };
        placeholder: {
            type: import("vue").PropType<string>;
            default: string;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetDate>;
        };
        presetsPlacement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
            default: "left" | "top" | "bottom" | "right";
            validator(val: "left" | "top" | "bottom" | "right"): boolean;
        };
        selectInputProps: {
            type: import("vue").PropType<import("..").TdSelectInputProps>;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        timePickerProps: {
            type: import("vue").PropType<import("..").TdTimePickerProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: import("./type").DateValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: import("./type").DateValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: import("./type").DateValue;
        };
        valueDisplay: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: import("./type").DateValue;
                displayValue?: import("./type").DateValue;
            }) => import("..").SlotReturnValue)>;
        };
        valueType: {
            type: import("vue").PropType<import("./type").DatePickerValueType>;
            default: import("./type").DatePickerValueType;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").DateValue;
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").DateValue, context: {
            dayjsValue?: import("dayjs").Dayjs;
            trigger?: import("./type").DatePickerTriggerSource;
        }) => void>;
        onConfirm: import("vue").PropType<(context: {
            date: Date;
            e: MouseEvent;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            value: import("./type").DateValue;
            e: FocusEvent;
        }) => void>;
        onPick: import("vue").PropType<(value: import("./type").DateValue) => void>;
        onPresetClick: import("vue").PropType<(context: {
            preset: import("./type").PresetDate;
            e: MouseEvent;
        }) => void>;
    }>>, {
        value: import("./type").DateValue;
        disabled: boolean;
        size: import("..").SizeEnum;
        status: "error" | "default" | "success" | "warning";
        mode: "month" | "year" | "quarter" | "week" | "date";
        placeholder: string;
        format: string;
        modelValue: import("./type").DateValue;
        defaultValue: import("./type").DateValue;
        clearable: boolean;
        allowInput: boolean;
        valueType: import("./type").DatePickerValueType;
        enableTimePicker: boolean;
        presetsPlacement: "left" | "top" | "bottom" | "right";
        defaultTime: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        allowInput: BooleanConstructor;
        clearable: BooleanConstructor;
        defaultTime: {
            type: StringConstructor;
            default: string;
        };
        disableDate: {
            type: import("vue").PropType<import("./type").DisableDate>;
        };
        disabled: BooleanConstructor;
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: number): boolean;
        };
        format: {
            type: StringConstructor;
            default: any;
        };
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        mode: {
            type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
            default: "month" | "year" | "quarter" | "week" | "date";
            validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
        };
        placeholder: {
            type: import("vue").PropType<string>;
            default: string;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetDate>;
        };
        presetsPlacement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
            default: "left" | "top" | "bottom" | "right";
            validator(val: "left" | "top" | "bottom" | "right"): boolean;
        };
        selectInputProps: {
            type: import("vue").PropType<import("..").TdSelectInputProps>;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        timePickerProps: {
            type: import("vue").PropType<import("..").TdTimePickerProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: import("./type").DateValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: import("./type").DateValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: import("./type").DateValue;
        };
        valueDisplay: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
                value: import("./type").DateValue;
                displayValue?: import("./type").DateValue;
            }) => import("..").SlotReturnValue)>;
        };
        valueType: {
            type: import("vue").PropType<import("./type").DatePickerValueType>;
            default: import("./type").DatePickerValueType;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").DateValue;
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").DateValue, context: {
            dayjsValue?: import("dayjs").Dayjs;
            trigger?: import("./type").DatePickerTriggerSource;
        }) => void>;
        onConfirm: import("vue").PropType<(context: {
            date: Date;
            e: MouseEvent;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            value: import("./type").DateValue;
            e: FocusEvent;
        }) => void>;
        onPick: import("vue").PropType<(value: import("./type").DateValue) => void>;
        onPresetClick: import("vue").PropType<(context: {
            preset: import("./type").PresetDate;
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        value: import("./type").DateValue;
        disabled: boolean;
        size: import("..").SizeEnum;
        status: "error" | "default" | "success" | "warning";
        mode: "month" | "year" | "quarter" | "week" | "date";
        placeholder: string;
        format: string;
        modelValue: import("./type").DateValue;
        defaultValue: import("./type").DateValue;
        clearable: boolean;
        allowInput: boolean;
        valueType: import("./type").DatePickerValueType;
        enableTimePicker: boolean;
        presetsPlacement: "left" | "top" | "bottom" | "right";
        defaultTime: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    allowInput: BooleanConstructor;
    clearable: BooleanConstructor;
    defaultTime: {
        type: StringConstructor;
        default: string;
    };
    disableDate: {
        type: import("vue").PropType<import("./type").DisableDate>;
    };
    disabled: BooleanConstructor;
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: number): boolean;
    };
    format: {
        type: StringConstructor;
        default: any;
    };
    inputProps: {
        type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
    };
    mode: {
        type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
        default: "month" | "year" | "quarter" | "week" | "date";
        validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
    };
    placeholder: {
        type: import("vue").PropType<string>;
        default: string;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    presets: {
        type: import("vue").PropType<import("./type").PresetDate>;
    };
    presetsPlacement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
        default: "left" | "top" | "bottom" | "right";
        validator(val: "left" | "top" | "bottom" | "right"): boolean;
    };
    selectInputProps: {
        type: import("vue").PropType<import("..").TdSelectInputProps>;
    };
    size: {
        type: import("vue").PropType<import("..").SizeEnum>;
        default: import("..").SizeEnum;
        validator(val: import("..").SizeEnum): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    timePickerProps: {
        type: import("vue").PropType<import("..").TdTimePickerProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").DateValue>;
        default: import("./type").DateValue;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").DateValue>;
        default: import("./type").DateValue;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").DateValue>;
        default: import("./type").DateValue;
    };
    valueDisplay: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: {
            value: import("./type").DateValue;
            displayValue?: import("./type").DateValue;
        }) => import("..").SlotReturnValue)>;
    };
    valueType: {
        type: import("vue").PropType<import("./type").DatePickerValueType>;
        default: import("./type").DatePickerValueType;
    };
    onBlur: import("vue").PropType<(context: {
        value: import("./type").DateValue;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").DateValue, context: {
        dayjsValue?: import("dayjs").Dayjs;
        trigger?: import("./type").DatePickerTriggerSource;
    }) => void>;
    onConfirm: import("vue").PropType<(context: {
        date: Date;
        e: MouseEvent;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        value: import("./type").DateValue;
        e: FocusEvent;
    }) => void>;
    onPick: import("vue").PropType<(value: import("./type").DateValue) => void>;
    onPresetClick: import("vue").PropType<(context: {
        preset: import("./type").PresetDate;
        e: MouseEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: import("./type").DateValue;
    disabled: boolean;
    size: import("..").SizeEnum;
    status: "error" | "default" | "success" | "warning";
    mode: "month" | "year" | "quarter" | "week" | "date";
    placeholder: string;
    format: string;
    modelValue: import("./type").DateValue;
    defaultValue: import("./type").DateValue;
    clearable: boolean;
    allowInput: boolean;
    valueType: import("./type").DatePickerValueType;
    enableTimePicker: boolean;
    presetsPlacement: "left" | "top" | "bottom" | "right";
    defaultTime: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const DatePickerPanel: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        defaultTime: {
            type: StringConstructor;
            default: string;
        };
        onCellClick: import("vue").PropType<(context: {
            date: Date;
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").DateValue, context: {
            dayjsValue?: import("dayjs").Dayjs;
            e?: MouseEvent;
            trigger?: import("./type").DatePickerTriggerSource;
        }) => void>;
        onConfirm: import("vue").PropType<(context: {
            date: Date;
            e: MouseEvent;
        }) => void>;
        onMonthChange: import("vue").PropType<(context: {
            month: number;
            date: Date;
            e?: MouseEvent;
            trigger: import("./type").DatePickerMonthChangeTrigger;
        }) => void>;
        onPanelClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPresetClick: import("vue").PropType<(context: {
            preset: import("./type").PresetDate;
            e: MouseEvent;
        }) => void>;
        onTimeChange: import("vue").PropType<(context: {
            time: string;
            date: Date;
            trigger: import("./type").DatePickerTimeChangeTrigger;
            e?: MouseEvent;
        }) => void>;
        onYearChange: import("vue").PropType<(context: {
            year: number;
            date: Date;
            trigger: import("./type").DatePickerYearChangeTrigger;
            e?: MouseEvent;
        }) => void>;
        value: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: import("./type").DateValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: import("./type").DateValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: import("./type").DateValue;
        };
        disabled: BooleanConstructor;
        disableDate: {
            type: import("vue").PropType<import("./type").DisableDate>;
        };
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: number): boolean;
        };
        format: {
            type: StringConstructor;
            default: any;
        };
        mode: {
            type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
            default: "month" | "year" | "quarter" | "week" | "date";
            validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetDate>;
        };
        presetsPlacement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
            default: "left" | "top" | "bottom" | "right";
            validator(val: "left" | "top" | "bottom" | "right"): boolean;
        };
        timePickerProps: {
            type: import("vue").PropType<import("..").TdTimePickerProps>;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        defaultTime: {
            type: StringConstructor;
            default: string;
        };
        onCellClick: import("vue").PropType<(context: {
            date: Date;
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").DateValue, context: {
            dayjsValue?: import("dayjs").Dayjs;
            e?: MouseEvent;
            trigger?: import("./type").DatePickerTriggerSource;
        }) => void>;
        onConfirm: import("vue").PropType<(context: {
            date: Date;
            e: MouseEvent;
        }) => void>;
        onMonthChange: import("vue").PropType<(context: {
            month: number;
            date: Date;
            e?: MouseEvent;
            trigger: import("./type").DatePickerMonthChangeTrigger;
        }) => void>;
        onPanelClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPresetClick: import("vue").PropType<(context: {
            preset: import("./type").PresetDate;
            e: MouseEvent;
        }) => void>;
        onTimeChange: import("vue").PropType<(context: {
            time: string;
            date: Date;
            trigger: import("./type").DatePickerTimeChangeTrigger;
            e?: MouseEvent;
        }) => void>;
        onYearChange: import("vue").PropType<(context: {
            year: number;
            date: Date;
            trigger: import("./type").DatePickerYearChangeTrigger;
            e?: MouseEvent;
        }) => void>;
        value: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: import("./type").DateValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: import("./type").DateValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: import("./type").DateValue;
        };
        disabled: BooleanConstructor;
        disableDate: {
            type: import("vue").PropType<import("./type").DisableDate>;
        };
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: number): boolean;
        };
        format: {
            type: StringConstructor;
            default: any;
        };
        mode: {
            type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
            default: "month" | "year" | "quarter" | "week" | "date";
            validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetDate>;
        };
        presetsPlacement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
            default: "left" | "top" | "bottom" | "right";
            validator(val: "left" | "top" | "bottom" | "right"): boolean;
        };
        timePickerProps: {
            type: import("vue").PropType<import("..").TdTimePickerProps>;
        };
    }>>, {
        value: import("./type").DateValue;
        disabled: boolean;
        mode: "month" | "year" | "quarter" | "week" | "date";
        format: string;
        modelValue: import("./type").DateValue;
        defaultValue: import("./type").DateValue;
        enableTimePicker: boolean;
        presetsPlacement: "left" | "top" | "bottom" | "right";
        defaultTime: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        defaultTime: {
            type: StringConstructor;
            default: string;
        };
        onCellClick: import("vue").PropType<(context: {
            date: Date;
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").DateValue, context: {
            dayjsValue?: import("dayjs").Dayjs;
            e?: MouseEvent;
            trigger?: import("./type").DatePickerTriggerSource;
        }) => void>;
        onConfirm: import("vue").PropType<(context: {
            date: Date;
            e: MouseEvent;
        }) => void>;
        onMonthChange: import("vue").PropType<(context: {
            month: number;
            date: Date;
            e?: MouseEvent;
            trigger: import("./type").DatePickerMonthChangeTrigger;
        }) => void>;
        onPanelClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPresetClick: import("vue").PropType<(context: {
            preset: import("./type").PresetDate;
            e: MouseEvent;
        }) => void>;
        onTimeChange: import("vue").PropType<(context: {
            time: string;
            date: Date;
            trigger: import("./type").DatePickerTimeChangeTrigger;
            e?: MouseEvent;
        }) => void>;
        onYearChange: import("vue").PropType<(context: {
            year: number;
            date: Date;
            trigger: import("./type").DatePickerYearChangeTrigger;
            e?: MouseEvent;
        }) => void>;
        value: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: import("./type").DateValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: import("./type").DateValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").DateValue>;
            default: import("./type").DateValue;
        };
        disabled: BooleanConstructor;
        disableDate: {
            type: import("vue").PropType<import("./type").DisableDate>;
        };
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: number): boolean;
        };
        format: {
            type: StringConstructor;
            default: any;
        };
        mode: {
            type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
            default: "month" | "year" | "quarter" | "week" | "date";
            validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetDate>;
        };
        presetsPlacement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
            default: "left" | "top" | "bottom" | "right";
            validator(val: "left" | "top" | "bottom" | "right"): boolean;
        };
        timePickerProps: {
            type: import("vue").PropType<import("..").TdTimePickerProps>;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        value: import("./type").DateValue;
        disabled: boolean;
        mode: "month" | "year" | "quarter" | "week" | "date";
        format: string;
        modelValue: import("./type").DateValue;
        defaultValue: import("./type").DateValue;
        enableTimePicker: boolean;
        presetsPlacement: "left" | "top" | "bottom" | "right";
        defaultTime: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    defaultTime: {
        type: StringConstructor;
        default: string;
    };
    onCellClick: import("vue").PropType<(context: {
        date: Date;
        e: MouseEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").DateValue, context: {
        dayjsValue?: import("dayjs").Dayjs;
        e?: MouseEvent;
        trigger?: import("./type").DatePickerTriggerSource;
    }) => void>;
    onConfirm: import("vue").PropType<(context: {
        date: Date;
        e: MouseEvent;
    }) => void>;
    onMonthChange: import("vue").PropType<(context: {
        month: number;
        date: Date;
        e?: MouseEvent;
        trigger: import("./type").DatePickerMonthChangeTrigger;
    }) => void>;
    onPanelClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPresetClick: import("vue").PropType<(context: {
        preset: import("./type").PresetDate;
        e: MouseEvent;
    }) => void>;
    onTimeChange: import("vue").PropType<(context: {
        time: string;
        date: Date;
        trigger: import("./type").DatePickerTimeChangeTrigger;
        e?: MouseEvent;
    }) => void>;
    onYearChange: import("vue").PropType<(context: {
        year: number;
        date: Date;
        trigger: import("./type").DatePickerYearChangeTrigger;
        e?: MouseEvent;
    }) => void>;
    value: {
        type: import("vue").PropType<import("./type").DateValue>;
        default: import("./type").DateValue;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").DateValue>;
        default: import("./type").DateValue;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").DateValue>;
        default: import("./type").DateValue;
    };
    disabled: BooleanConstructor;
    disableDate: {
        type: import("vue").PropType<import("./type").DisableDate>;
    };
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: number): boolean;
    };
    format: {
        type: StringConstructor;
        default: any;
    };
    mode: {
        type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
        default: "month" | "year" | "quarter" | "week" | "date";
        validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
    };
    presets: {
        type: import("vue").PropType<import("./type").PresetDate>;
    };
    presetsPlacement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
        default: "left" | "top" | "bottom" | "right";
        validator(val: "left" | "top" | "bottom" | "right"): boolean;
    };
    timePickerProps: {
        type: import("vue").PropType<import("..").TdTimePickerProps>;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: import("./type").DateValue;
    disabled: boolean;
    mode: "month" | "year" | "quarter" | "week" | "date";
    format: string;
    modelValue: import("./type").DateValue;
    defaultValue: import("./type").DateValue;
    enableTimePicker: boolean;
    presetsPlacement: "left" | "top" | "bottom" | "right";
    defaultTime: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const DateRangePicker: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        allowInput: BooleanConstructor;
        cancelRangeSelectLimit: BooleanConstructor;
        clearable: BooleanConstructor;
        defaultTime: {
            type: import("vue").PropType<string[]>;
            default: () => string[];
        };
        disableDate: {
            type: import("vue").PropType<import("./type").DisableRangeDate>;
        };
        disabled: BooleanConstructor;
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: number): boolean;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        mode: {
            type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
            default: "month" | "year" | "quarter" | "week" | "date";
            validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
        };
        panelPreselection: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: import("vue").PropType<string | string[]>;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetRange>;
        };
        presetsPlacement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
            default: "left" | "top" | "bottom" | "right";
            validator(val: "left" | "top" | "bottom" | "right"): boolean;
        };
        rangeInputProps: {
            type: import("vue").PropType<import("..").TdRangeInputProps>;
        };
        separator: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        timePickerProps: {
            type: import("vue").PropType<import("..").TdTimePickerProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: import("./type").DateRangeValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: import("./type").DateRangeValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: () => import("./type").DateRangeValue;
        };
        valueType: {
            type: import("vue").PropType<"YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS">;
            validator(val: "YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS"): boolean;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").DateRangeValue;
            partial: import("./type").DateRangePickerPartial;
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").DateRangeValue, context: {
            dayjsValue?: import("dayjs").Dayjs[];
            trigger?: import("./type").DatePickerTriggerSource;
        }) => void>;
        onConfirm: import("vue").PropType<(context: {
            date: Date[];
            e: MouseEvent;
            partial: import("./type").DateRangePickerPartial;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            value: import("./type").DateRangeValue;
            partial: import("./type").DateRangePickerPartial;
            e: FocusEvent;
        }) => void>;
        onInput: import("vue").PropType<(context: {
            input: string;
            value: import("./type").DateRangeValue;
            partial: import("./type").DateRangePickerPartial;
            e: InputEvent;
        }) => void>;
        onPick: import("vue").PropType<(value: import("./type").DateValue, context: import("./type").PickContext) => void>;
        onPresetClick: import("vue").PropType<(context: {
            preset: import("./type").PresetDate;
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        allowInput: BooleanConstructor;
        cancelRangeSelectLimit: BooleanConstructor;
        clearable: BooleanConstructor;
        defaultTime: {
            type: import("vue").PropType<string[]>;
            default: () => string[];
        };
        disableDate: {
            type: import("vue").PropType<import("./type").DisableRangeDate>;
        };
        disabled: BooleanConstructor;
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: number): boolean;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        mode: {
            type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
            default: "month" | "year" | "quarter" | "week" | "date";
            validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
        };
        panelPreselection: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: import("vue").PropType<string | string[]>;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetRange>;
        };
        presetsPlacement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
            default: "left" | "top" | "bottom" | "right";
            validator(val: "left" | "top" | "bottom" | "right"): boolean;
        };
        rangeInputProps: {
            type: import("vue").PropType<import("..").TdRangeInputProps>;
        };
        separator: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        timePickerProps: {
            type: import("vue").PropType<import("..").TdTimePickerProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: import("./type").DateRangeValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: import("./type").DateRangeValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: () => import("./type").DateRangeValue;
        };
        valueType: {
            type: import("vue").PropType<"YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS">;
            validator(val: "YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS"): boolean;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").DateRangeValue;
            partial: import("./type").DateRangePickerPartial;
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").DateRangeValue, context: {
            dayjsValue?: import("dayjs").Dayjs[];
            trigger?: import("./type").DatePickerTriggerSource;
        }) => void>;
        onConfirm: import("vue").PropType<(context: {
            date: Date[];
            e: MouseEvent;
            partial: import("./type").DateRangePickerPartial;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            value: import("./type").DateRangeValue;
            partial: import("./type").DateRangePickerPartial;
            e: FocusEvent;
        }) => void>;
        onInput: import("vue").PropType<(context: {
            input: string;
            value: import("./type").DateRangeValue;
            partial: import("./type").DateRangePickerPartial;
            e: InputEvent;
        }) => void>;
        onPick: import("vue").PropType<(value: import("./type").DateValue, context: import("./type").PickContext) => void>;
        onPresetClick: import("vue").PropType<(context: {
            preset: import("./type").PresetDate;
            e: MouseEvent;
        }) => void>;
    }>>, {
        value: import("./type").DateRangeValue;
        disabled: boolean;
        size: import("..").SizeEnum;
        status: "error" | "default" | "success" | "warning";
        mode: "month" | "year" | "quarter" | "week" | "date";
        separator: string;
        format: string;
        modelValue: import("./type").DateRangeValue;
        defaultValue: import("./type").DateRangeValue;
        clearable: boolean;
        allowInput: boolean;
        enableTimePicker: boolean;
        presetsPlacement: "left" | "top" | "bottom" | "right";
        defaultTime: string[];
        panelPreselection: boolean;
        cancelRangeSelectLimit: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        allowInput: BooleanConstructor;
        cancelRangeSelectLimit: BooleanConstructor;
        clearable: BooleanConstructor;
        defaultTime: {
            type: import("vue").PropType<string[]>;
            default: () => string[];
        };
        disableDate: {
            type: import("vue").PropType<import("./type").DisableRangeDate>;
        };
        disabled: BooleanConstructor;
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: number): boolean;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        mode: {
            type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
            default: "month" | "year" | "quarter" | "week" | "date";
            validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
        };
        panelPreselection: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: import("vue").PropType<string | string[]>;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetRange>;
        };
        presetsPlacement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
            default: "left" | "top" | "bottom" | "right";
            validator(val: "left" | "top" | "bottom" | "right"): boolean;
        };
        rangeInputProps: {
            type: import("vue").PropType<import("..").TdRangeInputProps>;
        };
        separator: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        timePickerProps: {
            type: import("vue").PropType<import("..").TdTimePickerProps>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: import("./type").DateRangeValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: import("./type").DateRangeValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: () => import("./type").DateRangeValue;
        };
        valueType: {
            type: import("vue").PropType<"YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS">;
            validator(val: "YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS"): boolean;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").DateRangeValue;
            partial: import("./type").DateRangePickerPartial;
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").DateRangeValue, context: {
            dayjsValue?: import("dayjs").Dayjs[];
            trigger?: import("./type").DatePickerTriggerSource;
        }) => void>;
        onConfirm: import("vue").PropType<(context: {
            date: Date[];
            e: MouseEvent;
            partial: import("./type").DateRangePickerPartial;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            value: import("./type").DateRangeValue;
            partial: import("./type").DateRangePickerPartial;
            e: FocusEvent;
        }) => void>;
        onInput: import("vue").PropType<(context: {
            input: string;
            value: import("./type").DateRangeValue;
            partial: import("./type").DateRangePickerPartial;
            e: InputEvent;
        }) => void>;
        onPick: import("vue").PropType<(value: import("./type").DateValue, context: import("./type").PickContext) => void>;
        onPresetClick: import("vue").PropType<(context: {
            preset: import("./type").PresetDate;
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        value: import("./type").DateRangeValue;
        disabled: boolean;
        size: import("..").SizeEnum;
        status: "error" | "default" | "success" | "warning";
        mode: "month" | "year" | "quarter" | "week" | "date";
        separator: string;
        format: string;
        modelValue: import("./type").DateRangeValue;
        defaultValue: import("./type").DateRangeValue;
        clearable: boolean;
        allowInput: boolean;
        enableTimePicker: boolean;
        presetsPlacement: "left" | "top" | "bottom" | "right";
        defaultTime: string[];
        panelPreselection: boolean;
        cancelRangeSelectLimit: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    allowInput: BooleanConstructor;
    cancelRangeSelectLimit: BooleanConstructor;
    clearable: BooleanConstructor;
    defaultTime: {
        type: import("vue").PropType<string[]>;
        default: () => string[];
    };
    disableDate: {
        type: import("vue").PropType<import("./type").DisableRangeDate>;
    };
    disabled: BooleanConstructor;
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: number): boolean;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    mode: {
        type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
        default: "month" | "year" | "quarter" | "week" | "date";
        validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
    };
    panelPreselection: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: import("vue").PropType<string | string[]>;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    presets: {
        type: import("vue").PropType<import("./type").PresetRange>;
    };
    presetsPlacement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
        default: "left" | "top" | "bottom" | "right";
        validator(val: "left" | "top" | "bottom" | "right"): boolean;
    };
    rangeInputProps: {
        type: import("vue").PropType<import("..").TdRangeInputProps>;
    };
    separator: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: import("vue").PropType<import("..").SizeEnum>;
        default: import("..").SizeEnum;
        validator(val: import("..").SizeEnum): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    timePickerProps: {
        type: import("vue").PropType<import("..").TdTimePickerProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").DateRangeValue>;
        default: import("./type").DateRangeValue;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").DateRangeValue>;
        default: import("./type").DateRangeValue;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").DateRangeValue>;
        default: () => import("./type").DateRangeValue;
    };
    valueType: {
        type: import("vue").PropType<"YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS">;
        validator(val: "YYYY-MM-DD" | "Date" | "time-stamp" | "YYYY" | "YYYY-MM" | "YYYY-MM-DD HH" | "YYYY-MM-DD HH:mm" | "YYYY-MM-DD HH:mm:ss" | "YYYY-MM-DD HH:mm:ss:SSS"): boolean;
    };
    onBlur: import("vue").PropType<(context: {
        value: import("./type").DateRangeValue;
        partial: import("./type").DateRangePickerPartial;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").DateRangeValue, context: {
        dayjsValue?: import("dayjs").Dayjs[];
        trigger?: import("./type").DatePickerTriggerSource;
    }) => void>;
    onConfirm: import("vue").PropType<(context: {
        date: Date[];
        e: MouseEvent;
        partial: import("./type").DateRangePickerPartial;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        value: import("./type").DateRangeValue;
        partial: import("./type").DateRangePickerPartial;
        e: FocusEvent;
    }) => void>;
    onInput: import("vue").PropType<(context: {
        input: string;
        value: import("./type").DateRangeValue;
        partial: import("./type").DateRangePickerPartial;
        e: InputEvent;
    }) => void>;
    onPick: import("vue").PropType<(value: import("./type").DateValue, context: import("./type").PickContext) => void>;
    onPresetClick: import("vue").PropType<(context: {
        preset: import("./type").PresetDate;
        e: MouseEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: import("./type").DateRangeValue;
    disabled: boolean;
    size: import("..").SizeEnum;
    status: "error" | "default" | "success" | "warning";
    mode: "month" | "year" | "quarter" | "week" | "date";
    separator: string;
    format: string;
    modelValue: import("./type").DateRangeValue;
    defaultValue: import("./type").DateRangeValue;
    clearable: boolean;
    allowInput: boolean;
    enableTimePicker: boolean;
    presetsPlacement: "left" | "top" | "bottom" | "right";
    defaultTime: string[];
    panelPreselection: boolean;
    cancelRangeSelectLimit: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const DateRangePickerPanel: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        defaultTime: {
            type: import("vue").PropType<string[]>;
            default: () => string[];
        };
        onCellClick: import("vue").PropType<(context: {
            date: Date[];
            partial: import("./type").DateRangePickerPartial;
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").DateRangeValue, context: {
            dayjsValue?: import("dayjs").Dayjs[];
            partial: import("./type").DateRangePickerPartial;
            e?: MouseEvent;
            trigger?: import("./type").DatePickerTriggerSource;
        }) => void>;
        onConfirm: import("vue").PropType<(context: {
            date: Date[];
            e: MouseEvent;
        }) => void>;
        onMonthChange: import("vue").PropType<(context: {
            month: number;
            date: Date[];
            partial: import("./type").DateRangePickerPartial;
            e?: MouseEvent;
            trigger: import("./type").DatePickerMonthChangeTrigger;
        }) => void>;
        onPanelClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPresetClick: import("vue").PropType<(context: {
            preset: import("./type").PresetDate;
            e: MouseEvent;
        }) => void>;
        onTimeChange: import("vue").PropType<(context: {
            time: string;
            date: Date[];
            partial: import("./type").DateRangePickerPartial;
            trigger: import("./type").DatePickerTimeChangeTrigger;
            e?: MouseEvent;
        }) => void>;
        onYearChange: import("vue").PropType<(context: {
            year: number;
            date: Date[];
            partial: import("./type").DateRangePickerPartial;
            trigger: import("./type").DatePickerYearChangeTrigger;
            e?: MouseEvent;
        }) => void>;
        value: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: import("./type").DateRangeValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: () => import("./type").DateRangeValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: import("./type").DateRangeValue;
        };
        disabled: BooleanConstructor;
        disableDate: {
            type: import("vue").PropType<import("./type").DisableRangeDate>;
        };
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: number): boolean;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        mode: {
            type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
            default: "month" | "year" | "quarter" | "week" | "date";
            validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetRange>;
        };
        presetsPlacement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
            default: "left" | "top" | "bottom" | "right";
            validator(val: "left" | "top" | "bottom" | "right"): boolean;
        };
        timePickerProps: {
            type: import("vue").PropType<import("..").TdTimePickerProps>;
        };
        panelPreselection: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        defaultTime: {
            type: import("vue").PropType<string[]>;
            default: () => string[];
        };
        onCellClick: import("vue").PropType<(context: {
            date: Date[];
            partial: import("./type").DateRangePickerPartial;
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").DateRangeValue, context: {
            dayjsValue?: import("dayjs").Dayjs[];
            partial: import("./type").DateRangePickerPartial;
            e?: MouseEvent;
            trigger?: import("./type").DatePickerTriggerSource;
        }) => void>;
        onConfirm: import("vue").PropType<(context: {
            date: Date[];
            e: MouseEvent;
        }) => void>;
        onMonthChange: import("vue").PropType<(context: {
            month: number;
            date: Date[];
            partial: import("./type").DateRangePickerPartial;
            e?: MouseEvent;
            trigger: import("./type").DatePickerMonthChangeTrigger;
        }) => void>;
        onPanelClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPresetClick: import("vue").PropType<(context: {
            preset: import("./type").PresetDate;
            e: MouseEvent;
        }) => void>;
        onTimeChange: import("vue").PropType<(context: {
            time: string;
            date: Date[];
            partial: import("./type").DateRangePickerPartial;
            trigger: import("./type").DatePickerTimeChangeTrigger;
            e?: MouseEvent;
        }) => void>;
        onYearChange: import("vue").PropType<(context: {
            year: number;
            date: Date[];
            partial: import("./type").DateRangePickerPartial;
            trigger: import("./type").DatePickerYearChangeTrigger;
            e?: MouseEvent;
        }) => void>;
        value: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: import("./type").DateRangeValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: () => import("./type").DateRangeValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: import("./type").DateRangeValue;
        };
        disabled: BooleanConstructor;
        disableDate: {
            type: import("vue").PropType<import("./type").DisableRangeDate>;
        };
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: number): boolean;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        mode: {
            type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
            default: "month" | "year" | "quarter" | "week" | "date";
            validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetRange>;
        };
        presetsPlacement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
            default: "left" | "top" | "bottom" | "right";
            validator(val: "left" | "top" | "bottom" | "right"): boolean;
        };
        timePickerProps: {
            type: import("vue").PropType<import("..").TdTimePickerProps>;
        };
        panelPreselection: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>>, {
        value: import("./type").DateRangeValue;
        disabled: boolean;
        mode: "month" | "year" | "quarter" | "week" | "date";
        format: string;
        modelValue: import("./type").DateRangeValue;
        defaultValue: import("./type").DateRangeValue;
        enableTimePicker: boolean;
        presetsPlacement: "left" | "top" | "bottom" | "right";
        defaultTime: string[];
        panelPreselection: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        defaultTime: {
            type: import("vue").PropType<string[]>;
            default: () => string[];
        };
        onCellClick: import("vue").PropType<(context: {
            date: Date[];
            partial: import("./type").DateRangePickerPartial;
            e: MouseEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").DateRangeValue, context: {
            dayjsValue?: import("dayjs").Dayjs[];
            partial: import("./type").DateRangePickerPartial;
            e?: MouseEvent;
            trigger?: import("./type").DatePickerTriggerSource;
        }) => void>;
        onConfirm: import("vue").PropType<(context: {
            date: Date[];
            e: MouseEvent;
        }) => void>;
        onMonthChange: import("vue").PropType<(context: {
            month: number;
            date: Date[];
            partial: import("./type").DateRangePickerPartial;
            e?: MouseEvent;
            trigger: import("./type").DatePickerMonthChangeTrigger;
        }) => void>;
        onPanelClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPresetClick: import("vue").PropType<(context: {
            preset: import("./type").PresetDate;
            e: MouseEvent;
        }) => void>;
        onTimeChange: import("vue").PropType<(context: {
            time: string;
            date: Date[];
            partial: import("./type").DateRangePickerPartial;
            trigger: import("./type").DatePickerTimeChangeTrigger;
            e?: MouseEvent;
        }) => void>;
        onYearChange: import("vue").PropType<(context: {
            year: number;
            date: Date[];
            partial: import("./type").DateRangePickerPartial;
            trigger: import("./type").DatePickerYearChangeTrigger;
            e?: MouseEvent;
        }) => void>;
        value: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: import("./type").DateRangeValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: () => import("./type").DateRangeValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").DateRangeValue>;
            default: import("./type").DateRangeValue;
        };
        disabled: BooleanConstructor;
        disableDate: {
            type: import("vue").PropType<import("./type").DisableRangeDate>;
        };
        enableTimePicker: BooleanConstructor;
        firstDayOfWeek: {
            type: NumberConstructor;
            validator(val: number): boolean;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        mode: {
            type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
            default: "month" | "year" | "quarter" | "week" | "date";
            validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetRange>;
        };
        presetsPlacement: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
            default: "left" | "top" | "bottom" | "right";
            validator(val: "left" | "top" | "bottom" | "right"): boolean;
        };
        timePickerProps: {
            type: import("vue").PropType<import("..").TdTimePickerProps>;
        };
        panelPreselection: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        value: import("./type").DateRangeValue;
        disabled: boolean;
        mode: "month" | "year" | "quarter" | "week" | "date";
        format: string;
        modelValue: import("./type").DateRangeValue;
        defaultValue: import("./type").DateRangeValue;
        enableTimePicker: boolean;
        presetsPlacement: "left" | "top" | "bottom" | "right";
        defaultTime: string[];
        panelPreselection: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    defaultTime: {
        type: import("vue").PropType<string[]>;
        default: () => string[];
    };
    onCellClick: import("vue").PropType<(context: {
        date: Date[];
        partial: import("./type").DateRangePickerPartial;
        e: MouseEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").DateRangeValue, context: {
        dayjsValue?: import("dayjs").Dayjs[];
        partial: import("./type").DateRangePickerPartial;
        e?: MouseEvent;
        trigger?: import("./type").DatePickerTriggerSource;
    }) => void>;
    onConfirm: import("vue").PropType<(context: {
        date: Date[];
        e: MouseEvent;
    }) => void>;
    onMonthChange: import("vue").PropType<(context: {
        month: number;
        date: Date[];
        partial: import("./type").DateRangePickerPartial;
        e?: MouseEvent;
        trigger: import("./type").DatePickerMonthChangeTrigger;
    }) => void>;
    onPanelClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPresetClick: import("vue").PropType<(context: {
        preset: import("./type").PresetDate;
        e: MouseEvent;
    }) => void>;
    onTimeChange: import("vue").PropType<(context: {
        time: string;
        date: Date[];
        partial: import("./type").DateRangePickerPartial;
        trigger: import("./type").DatePickerTimeChangeTrigger;
        e?: MouseEvent;
    }) => void>;
    onYearChange: import("vue").PropType<(context: {
        year: number;
        date: Date[];
        partial: import("./type").DateRangePickerPartial;
        trigger: import("./type").DatePickerYearChangeTrigger;
        e?: MouseEvent;
    }) => void>;
    value: {
        type: import("vue").PropType<import("./type").DateRangeValue>;
        default: import("./type").DateRangeValue;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").DateRangeValue>;
        default: () => import("./type").DateRangeValue;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").DateRangeValue>;
        default: import("./type").DateRangeValue;
    };
    disabled: BooleanConstructor;
    disableDate: {
        type: import("vue").PropType<import("./type").DisableRangeDate>;
    };
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: number): boolean;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    mode: {
        type: import("vue").PropType<"month" | "year" | "quarter" | "week" | "date">;
        default: "month" | "year" | "quarter" | "week" | "date";
        validator(val: "month" | "year" | "quarter" | "week" | "date"): boolean;
    };
    presets: {
        type: import("vue").PropType<import("./type").PresetRange>;
    };
    presetsPlacement: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
        default: "left" | "top" | "bottom" | "right";
        validator(val: "left" | "top" | "bottom" | "right"): boolean;
    };
    timePickerProps: {
        type: import("vue").PropType<import("..").TdTimePickerProps>;
    };
    panelPreselection: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: import("./type").DateRangeValue;
    disabled: boolean;
    mode: "month" | "year" | "quarter" | "week" | "date";
    format: string;
    modelValue: import("./type").DateRangeValue;
    defaultValue: import("./type").DateRangeValue;
    enableTimePicker: boolean;
    presetsPlacement: "left" | "top" | "bottom" | "right";
    defaultTime: string[];
    panelPreselection: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default DatePicker;
