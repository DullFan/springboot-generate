import { TdDatePickerProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    allowInput: BooleanConstructor;
    clearable: BooleanConstructor;
    defaultTime: {
        type: StringConstructor;
        default: string;
    };
    disableDate: {
        type: PropType<import("./type").DisableDate>;
    };
    disabled: BooleanConstructor;
    enableTimePicker: BooleanConstructor;
    firstDayOfWeek: {
        type: NumberConstructor;
        validator(val: TdDatePickerProps['firstDayOfWeek']): boolean;
    };
    format: {
        type: StringConstructor;
        default: any;
    };
    inputProps: {
        type: PropType<import("..").InputProps<import("..").InputValue>>;
    };
    mode: {
        type: PropType<"month" | "year" | "quarter" | "week" | "date">;
        default: "month" | "year" | "quarter" | "week" | "date";
        validator(val: TdDatePickerProps['mode']): boolean;
    };
    placeholder: {
        type: PropType<string>;
        default: string;
    };
    popupProps: {
        type: PropType<import("..").TdPopupProps>;
    };
    prefixIcon: {
        type: PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    presets: {
        type: PropType<import("./type").PresetDate>;
    };
    presetsPlacement: {
        type: PropType<"left" | "top" | "bottom" | "right">;
        default: "left" | "top" | "bottom" | "right";
        validator(val: TdDatePickerProps['presetsPlacement']): boolean;
    };
    selectInputProps: {
        type: PropType<import("..").TdSelectInputProps>;
    };
    size: {
        type: PropType<import("..").SizeEnum>;
        default: import("..").SizeEnum;
        validator(val: TdDatePickerProps['size']): boolean;
    };
    status: {
        type: PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: TdDatePickerProps['status']): boolean;
    };
    suffixIcon: {
        type: PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    timePickerProps: {
        type: PropType<import("..").TdTimePickerProps>;
    };
    tips: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: PropType<import("./type").DateValue>;
        default: import("./type").DateValue;
    };
    modelValue: {
        type: PropType<import("./type").DateValue>;
        default: import("./type").DateValue;
    };
    defaultValue: {
        type: PropType<import("./type").DateValue>;
        default: import("./type").DateValue;
    };
    valueDisplay: {
        type: PropType<string | ((h: typeof import("vue").h, props: {
            value: import("./type").DateValue;
            displayValue?: import("./type").DateValue;
        }) => import("..").SlotReturnValue)>;
    };
    valueType: {
        type: PropType<import("./type").DatePickerValueType>;
        default: import("./type").DatePickerValueType;
    };
    onBlur: PropType<(context: {
        value: import("./type").DateValue;
        e: FocusEvent;
    }) => void>;
    onChange: PropType<(value: import("./type").DateValue, context: {
        dayjsValue?: import("dayjs").Dayjs;
        trigger?: import("./type").DatePickerTriggerSource;
    }) => void>;
    onConfirm: PropType<(context: {
        date: Date;
        e: MouseEvent;
    }) => void>;
    onFocus: PropType<(context: {
        value: import("./type").DateValue;
        e: FocusEvent;
    }) => void>;
    onPick: PropType<(value: import("./type").DateValue) => void>;
    onPresetClick: PropType<(context: {
        preset: import("./type").PresetDate;
        e: MouseEvent;
    }) => void>;
};
export default _default;
