import { TdAlertProps } from './type';
import './style';
export * from './type';
export declare type AlertProps = TdAlertProps;
export declare const Alert: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        close: {
            type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        icon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        maxLine: {
            type: NumberConstructor;
            default: number;
        };
        message: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        operation: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        theme: {
            type: import("vue").PropType<"error" | "success" | "warning" | "info">;
            default: "error" | "success" | "warning" | "info";
            validator(val: "error" | "success" | "warning" | "info"): boolean;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        onClose: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onClosed: import("vue").PropType<(context: {
            e: TransitionEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        close: {
            type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        icon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        maxLine: {
            type: NumberConstructor;
            default: number;
        };
        message: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        operation: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        theme: {
            type: import("vue").PropType<"error" | "success" | "warning" | "info">;
            default: "error" | "success" | "warning" | "info";
            validator(val: "error" | "success" | "warning" | "info"): boolean;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        onClose: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onClosed: import("vue").PropType<(context: {
            e: TransitionEvent;
        }) => void>;
    }>>, {
        close: string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        theme: "error" | "success" | "warning" | "info";
        maxLine: number;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        close: {
            type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        icon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        maxLine: {
            type: NumberConstructor;
            default: number;
        };
        message: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        operation: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        theme: {
            type: import("vue").PropType<"error" | "success" | "warning" | "info">;
            default: "error" | "success" | "warning" | "info";
            validator(val: "error" | "success" | "warning" | "info"): boolean;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        onClose: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onClosed: import("vue").PropType<(context: {
            e: TransitionEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        close: string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        theme: "error" | "success" | "warning" | "info";
        maxLine: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    close: {
        type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: boolean;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    icon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    maxLine: {
        type: NumberConstructor;
        default: number;
    };
    message: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    operation: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    theme: {
        type: import("vue").PropType<"error" | "success" | "warning" | "info">;
        default: "error" | "success" | "warning" | "info";
        validator(val: "error" | "success" | "warning" | "info"): boolean;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    onClose: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClosed: import("vue").PropType<(context: {
        e: TransitionEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    close: string | boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    theme: "error" | "success" | "warning" | "info";
    maxLine: number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Alert;
