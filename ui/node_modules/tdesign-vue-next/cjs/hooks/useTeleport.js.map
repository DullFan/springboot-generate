{"version":3,"file":"useTeleport.js","sources":["../../src/hooks/useTeleport.ts"],"sourcesContent":["import { getSSRAttach, getAttach } from '../utils/dom';\nimport { computed, Ref, onMounted, ref, watch } from 'vue';\nimport { AttachNode } from '../common';\nimport isFunction from 'lodash/isFunction';\n\n/**\n * @description 返回挂载的节点, 用于teleport\n * @param attach 既可以是一个函数, 也可以是一个ref\n * @param triggerNode 既可以是一个函数, 也可以是一个ref\n */\nconst useTeleport = (\n  attach: (() => AttachNode) | Ref<AttachNode>,\n  triggerNode?: (() => any) | Ref<any>,\n): Ref<string | Element> => {\n  // 如果是函数, 则使用computed包裹 否则直接使用ref\n  const to = isFunction(attach) ? computed(attach) : ref(attach);\n  const innerTriggerNode = isFunction(triggerNode) ? computed(triggerNode) : ref(triggerNode);\n\n  const element = ref<string | Element>();\n\n  const getElement = () => {\n    element.value = getSSRAttach() || getAttach(to.value, innerTriggerNode.value);\n  };\n\n  onMounted(() => getElement());\n\n  watch([to, innerTriggerNode], () => getElement());\n\n  return element;\n};\n\nexport default useTeleport;\n"],"names":["useTeleport","attach","triggerNode","to","isFunction","computed","ref","innerTriggerNode","element","getElement","value","getSSRAttach","getAttach","onMounted","watch"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAUMA,IAAAA,WAAA,GAAc,SAAdA,WAAAA,CACJC,MAAA,EACAC,WAC0B,EAAA;AAEpB,EAAA,IAAAC,EAAA,GAAKC,+BAAWH,MAAM,CAAA,GAAII,aAASJ,MAAM,CAAA,GAAIK,QAAIL,MAAM,CAAA,CAAA;AACvD,EAAA,IAAAM,gBAAA,GAAmBH,+BAAWF,WAAW,CAAA,GAAIG,aAASH,WAAW,CAAA,GAAII,QAAIJ,WAAW,CAAA,CAAA;AAE1F,EAAA,IAAMM,UAAUF,OAAsB,EAAA,CAAA;AAEtC,EAAA,IAAMG,aAAa,SAAbA,aAAmB;AACvBD,IAAAA,OAAA,CAAQE,QAAQC,sBAAa,EAAA,IAAKC,oBAAUT,EAAG,CAAAO,KAAA,EAAOH,iBAAiBG,KAAK,CAAA,CAAA;GAC9E,CAAA;AAEUG,EAAAA,aAAA,CAAA,YAAA;IAAA,OAAMJ,YAAY,CAAA;GAAA,CAAA,CAAA;AAE5BK,EAAAA,SAAA,CAAM,CAACX,EAAI,EAAAI,gBAAgB,CAAG,EAAA,YAAA;IAAA,OAAME,YAAY,CAAA;GAAA,CAAA,CAAA;AAEzC,EAAA,OAAAD,OAAA,CAAA;AACT;;;;"}