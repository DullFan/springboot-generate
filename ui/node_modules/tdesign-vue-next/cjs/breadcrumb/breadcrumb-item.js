/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var breadcrumb_breadcrumbItemProps = require('./breadcrumb-item-props.js');
var tooltip_index = require('../tooltip/index.js');
var utils_dom = require('../utils/dom.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var hooks_useGlobalIcon = require('../hooks/useGlobalIcon.js');
var hooks_tnode = require('../hooks/tnode.js');
var isFunction = require('lodash/isFunction');
require('../tooltip/tooltip.js');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/omit');
require('../tooltip/props.js');
require('../popup/props.js');
require('../popup/index.js');
require('../popup/popup.js');
require('@popperjs/core');
require('lodash/isObject');
require('lodash/debounce');
require('lodash/isString');
require('../hooks/useVModel.js');
require('lodash/kebabCase');
require('../_common/js/utils/set-style.js');
require('../popup/container.js');
require('@babel/runtime/helpers/toConsumableArray');
require('../hooks/useResizeObserver.js');
require('lodash/isArray');
require('../utils/withInstall.js');
require('../config-provider/useConfig.js');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_chunks/dep-c6b6a048.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-4980a22e.js');
require('dayjs');
require('../utils/easing.js');
require('lodash/camelCase');
require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('../tooltip/util.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var isFunction__default = /*#__PURE__*/_interopDefaultLegacy(isFunction);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
}
var localTBreadcrumbOrigin = {
  separator: "",
  theme: "light",
  slots: {
    separator: ""
  },
  maxItemWidth: void 0
};
var _BreadcrumbItem = Vue.defineComponent({
  name: "TBreadcrumbItem",
  inheritAttrs: false,
  props: _objectSpread({}, breadcrumb_breadcrumbItemProps["default"]),
  setup: function setup(props2, _ref) {
    var _localTBreadcrumb$slo;
    var attrs = _ref.attrs;
    var renderContent = hooks_tnode.useContent();
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var breadcrumbText = Vue.ref();
    var localTBreadcrumb = Vue.inject("tBreadcrumb", localTBreadcrumbOrigin);
    var themeClassName = Vue.ref(localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : localTBreadcrumb.theme);
    var isCutOff = Vue.ref(false);
    var COMPONENT_NAME = hooks_useConfig.usePrefixClass("breadcrumb__item");
    var separatorClass = hooks_useConfig.usePrefixClass("breadcrumb__separator");
    var disableClass = hooks_useConfig.usePrefixClass("is-disabled");
    var linkClass = hooks_useConfig.usePrefixClass("link");
    var maxLengthClass = hooks_useConfig.usePrefixClass("breadcrumb__inner");
    var textFlowClass = hooks_useConfig.usePrefixClass("breadcrumb--text-overflow");
    var _useGlobalIcon = hooks_useGlobalIcon.useGlobalIcon({
        ChevronRightIcon: tdesignIconsVueNext.ChevronRightIcon
      }),
      ChevronRightIcon = _useGlobalIcon.ChevronRightIcon;
    var maxWithStyle = Vue.computed(function () {
      var maxItemWidth = localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : localTBreadcrumb.maxItemWidth;
      var maxWith = props2.maxWidth || maxItemWidth || "120";
      return {
        maxWidth: "".concat(maxWith, "px")
      };
    });
    Vue.onMounted(function () {
      isCutOff.value = utils_dom.isNodeOverflow(breadcrumbText.value);
    });
    Vue.onBeforeUpdate(function () {
      isCutOff.value = utils_dom.isNodeOverflow(breadcrumbText.value);
    });
    var separatorPropContent = localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : localTBreadcrumb.separator;
    var separatorSlot = localTBreadcrumb === null || localTBreadcrumb === void 0 || (_localTBreadcrumb$slo = localTBreadcrumb.slots) === null || _localTBreadcrumb$slo === void 0 ? void 0 : _localTBreadcrumb$slo.separator;
    var separatorContent = separatorPropContent || separatorSlot || Vue.createVNode(ChevronRightIcon, {
      color: "rgba(0,0,0,.3)"
    }, null);
    var _getCurrentInstance = Vue.getCurrentInstance(),
      proxy = _getCurrentInstance.proxy;
    var handleClick = function handleClick() {
      if (props2.href) {
        window.location.href = props2.href;
      }
      var router = props2.router || proxy.$router;
      if (props2.to && router) {
        props2.replace ? router.replace(props2.to) : router.push(props2.to);
      }
    };
    var bindEvent = function bindEvent(e) {
      if (!props2.disabled) if (props2.target === "_blank") {
        props2.href ? window.open(props2.href) : window.open(props2.to);
      } else {
        e.preventDefault();
        handleClick();
      }
    };
    return function () {
      var itemClass = [COMPONENT_NAME.value, themeClassName.value];
      var textClass = [textFlowClass.value];
      if (props2.disabled) {
        textClass.push(disableClass.value);
      }
      var listeners = {
        onClick: function onClick(e) {
          if (props2.disabled) {
            e.stopPropagation();
            return;
          }
        }
      };
      var _content = renderContent("default", "content");
      var textContent = Vue.createVNode("span", {
        "class": maxLengthClass.value,
        style: maxWithStyle.value
      }, [renderTNodeJSX("icon"), Vue.createVNode("span", {
        "ref": breadcrumbText,
        "class": "".concat(maxLengthClass.value, "-text")
      }, [_content])]);
      var itemContent = Vue.createVNode("span", _objectSpread({
        "class": textClass
      }, listeners), [textContent]);
      if ((props2.href || props2.to) && !props2.disabled) {
        textClass.push(linkClass.value);
        itemContent = Vue.createVNode("a", Vue.mergeProps({
          "class": textClass,
          "href": props2.href,
          "target": props2.target
        }, listeners, {
          "onClick": bindEvent
        }), [textContent]);
      }
      return Vue.createVNode("div", Vue.mergeProps({
        "class": itemClass
      }, attrs, {
        "onClick": !props2.disabled && props2.onClick
      }), [isCutOff.value ? Vue.createVNode(tooltip_index.Tooltip, {
        "content": function content() {
          return _content;
        }
      }, _isSlot(itemContent) ? itemContent : {
        "default": function _default() {
          return [itemContent];
        }
      }) : itemContent, Vue.createVNode("span", {
        "class": separatorClass.value
      }, [isFunction__default["default"](separatorContent) ? separatorContent() : separatorContent])]);
    };
  }
});

exports["default"] = _BreadcrumbItem;
//# sourceMappingURL=breadcrumb-item.js.map
