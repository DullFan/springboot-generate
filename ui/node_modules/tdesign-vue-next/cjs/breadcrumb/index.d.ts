import { TdBreadcrumbProps, TdBreadcrumbItemProps } from './type';
import './style';
export * from './type';
export declare type BreadcrumbProps = TdBreadcrumbProps;
export declare type BreadcrumbItemProps = TdBreadcrumbItemProps;
export declare const Breadcrumb: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        maxItemWidth: {
            type: StringConstructor;
            default: any;
        };
        options: {
            type: import("vue").PropType<TdBreadcrumbItemProps[]>;
        };
        separator: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        theme: {
            type: import("vue").PropType<"light">;
            default: "light";
            validator(val: "light"): boolean;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        maxItemWidth: {
            type: StringConstructor;
            default: any;
        };
        options: {
            type: import("vue").PropType<TdBreadcrumbItemProps[]>;
        };
        separator: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        theme: {
            type: import("vue").PropType<"light">;
            default: "light";
            validator(val: "light"): boolean;
        };
    }>>, {
        theme: "light";
        maxItemWidth: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        maxItemWidth: {
            type: StringConstructor;
            default: any;
        };
        options: {
            type: import("vue").PropType<TdBreadcrumbItemProps[]>;
        };
        separator: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        theme: {
            type: import("vue").PropType<"light">;
            default: "light";
            validator(val: "light"): boolean;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        theme: "light";
        maxItemWidth: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    maxItemWidth: {
        type: StringConstructor;
        default: any;
    };
    options: {
        type: import("vue").PropType<TdBreadcrumbItemProps[]>;
    };
    separator: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    theme: {
        type: import("vue").PropType<"light">;
        default: "light";
        validator(val: "light"): boolean;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    theme: "light";
    maxItemWidth: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const BreadcrumbItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        href: {
            type: StringConstructor;
            default: string;
        };
        icon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        maxWidth: {
            type: StringConstructor;
            default: any;
        };
        replace: BooleanConstructor;
        router: {
            type: import("vue").PropType<any>;
        };
        target: {
            type: import("vue").PropType<"_self" | "_blank" | "_parent" | "_top">;
            default: "_self" | "_blank" | "_parent" | "_top";
            validator(val: "_self" | "_blank" | "_parent" | "_top"): boolean;
        };
        to: {
            type: import("vue").PropType<string | import("./type").Route>;
        };
        onClick: import("vue").PropType<(e: MouseEvent) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        href: {
            type: StringConstructor;
            default: string;
        };
        icon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        maxWidth: {
            type: StringConstructor;
            default: any;
        };
        replace: BooleanConstructor;
        router: {
            type: import("vue").PropType<any>;
        };
        target: {
            type: import("vue").PropType<"_self" | "_blank" | "_parent" | "_top">;
            default: "_self" | "_blank" | "_parent" | "_top";
            validator(val: "_self" | "_blank" | "_parent" | "_top"): boolean;
        };
        to: {
            type: import("vue").PropType<string | import("./type").Route>;
        };
        onClick: import("vue").PropType<(e: MouseEvent) => void>;
    }>>, {
        replace: boolean;
        maxWidth: string;
        target: "_self" | "_blank" | "_parent" | "_top";
        disabled: boolean;
        href: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: BooleanConstructor;
        href: {
            type: StringConstructor;
            default: string;
        };
        icon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        maxWidth: {
            type: StringConstructor;
            default: any;
        };
        replace: BooleanConstructor;
        router: {
            type: import("vue").PropType<any>;
        };
        target: {
            type: import("vue").PropType<"_self" | "_blank" | "_parent" | "_top">;
            default: "_self" | "_blank" | "_parent" | "_top";
            validator(val: "_self" | "_blank" | "_parent" | "_top"): boolean;
        };
        to: {
            type: import("vue").PropType<string | import("./type").Route>;
        };
        onClick: import("vue").PropType<(e: MouseEvent) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        replace: boolean;
        maxWidth: string;
        target: "_self" | "_blank" | "_parent" | "_top";
        disabled: boolean;
        href: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    href: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    maxWidth: {
        type: StringConstructor;
        default: any;
    };
    replace: BooleanConstructor;
    router: {
        type: import("vue").PropType<any>;
    };
    target: {
        type: import("vue").PropType<"_self" | "_blank" | "_parent" | "_top">;
        default: "_self" | "_blank" | "_parent" | "_top";
        validator(val: "_self" | "_blank" | "_parent" | "_top"): boolean;
    };
    to: {
        type: import("vue").PropType<string | import("./type").Route>;
    };
    onClick: import("vue").PropType<(e: MouseEvent) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    replace: boolean;
    maxWidth: string;
    target: "_self" | "_blank" | "_parent" | "_top";
    disabled: boolean;
    href: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Breadcrumb;
