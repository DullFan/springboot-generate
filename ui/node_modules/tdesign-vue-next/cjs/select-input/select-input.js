/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Vue = require('vue');
var popup_index = require('../popup/index.js');
var selectInput_props = require('./props.js');
var selectInput_useSingle = require('./useSingle.js');
var selectInput_useMultiple = require('./useMultiple.js');
var selectInput_useOverlayInnerStyle = require('./useOverlayInnerStyle.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var hooks_tnode = require('../hooks/tnode.js');
require('../popup/popup.js');
require('@popperjs/core');
require('lodash/isFunction');
require('lodash/isObject');
require('lodash/debounce');
require('lodash/isString');
require('../hooks/useVModel.js');
require('lodash/kebabCase');
require('../utils/dom.js');
require('../_chunks/dep-4980a22e.js');
require('lodash/isArray');
require('../utils/easing.js');
require('../_common/js/utils/set-style.js');
require('../popup/container.js');
require('@babel/runtime/helpers/toConsumableArray');
require('../popup/props.js');
require('../hooks/useResizeObserver.js');
require('../utils/withInstall.js');
require('../config-provider/useConfig.js');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/default-config.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../_chunks/dep-c6b6a048.js');
require('@babel/runtime/helpers/typeof');
require('dayjs');
require('lodash/camelCase');
require('../utils/render-tnode.js');
require('lodash/isEmpty');
require('@babel/runtime/helpers/objectWithoutProperties');
require('lodash/pick');
require('../input/index.js');
require('../input/input.js');
require('tdesign-icons-vue-next');
require('../input/props.js');
require('../form/hooks.js');
require('../hooks/useGlobalIcon.js');
require('../input/useInput.js');
require('../form/const.js');
require('../input/useLengthLimit.js');
require('../_common/js/log/log.js');
require('../_common/js/utils/helper.js');
require('lodash/isNull');
require('lodash/isUndefined');
require('lodash/isNumber');
require('../input/useInputEventHandler.js');
require('../input/useInputWidth.js');
require('../input/input-group.js');
require('../input/input-group-props.js');
require('../loading/index.js');
require('../loading/directive.js');
require('lodash/mapKeys');
require('lodash/isEqual');
require('../loading/plugin.js');
require('../loading/loading.js');
require('../loading/icon/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../loading/props.js');
require('../hooks/useTeleport.js');
require('../hooks/useDefaultValue.js');
require('../tag-input/index.js');
require('../tag-input/tag-input.js');
require('../tag-input/props.js');
require('../tag-input/hooks/useTagScroll.js');
require('../tag-input/useTagList.js');
require('../tag/index.js');
require('../tag/tag.js');
require('tinycolor2');
require('../tag/props.js');
require('../tag/check-tag.js');
require('../tag/check-tag-props.js');
require('../_common/js/common.js');
require('../tag/check-tag-group.js');
require('../tag/check-tag-group-props.js');
require('../tag-input/hooks/useHover.js');
require('../tag-input/hooks/useDragSorter.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var useComponentClassName = function useComponentClassName() {
  return {
    NAME_CLASS: hooks_useConfig.usePrefixClass("select-input"),
    BASE_CLASS_BORDERLESS: hooks_useConfig.usePrefixClass("select-input--borderless"),
    BASE_CLASS_MULTIPLE: hooks_useConfig.usePrefixClass("select-input--multiple"),
    BASE_CLASS_POPUP_VISIBLE: hooks_useConfig.usePrefixClass("select-input--popup-visible"),
    BASE_CLASS_EMPTY: hooks_useConfig.usePrefixClass("select-input--empty")
  };
};
var _SelectInput = Vue.defineComponent({
  name: "TSelectInput",
  props: _objectSpread(_objectSpread({}, selectInput_props["default"]), {}, {
    valueDisplayOptions: {
      type: Object
    }
  }),
  setup: function setup(props2, context) {
    var _useComponentClassNam = useComponentClassName(),
      NAME_CLASS = _useComponentClassNam.NAME_CLASS,
      BASE_CLASS_BORDERLESS = _useComponentClassNam.BASE_CLASS_BORDERLESS,
      BASE_CLASS_MULTIPLE = _useComponentClassNam.BASE_CLASS_MULTIPLE,
      BASE_CLASS_POPUP_VISIBLE = _useComponentClassNam.BASE_CLASS_POPUP_VISIBLE,
      BASE_CLASS_EMPTY = _useComponentClassNam.BASE_CLASS_EMPTY;
    var classPrefix = hooks_useConfig.usePrefixClass();
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var selectInputRef = Vue.ref();
    var popupRef = Vue.ref();
    var _toRefs = Vue.toRefs(props2),
      multiple = _toRefs.multiple,
      value = _toRefs.value,
      popupVisible = _toRefs.popupVisible,
      borderless = _toRefs.borderless;
    var _useOverlayInnerStyle = selectInput_useOverlayInnerStyle["default"](props2),
      tOverlayInnerStyle = _useOverlayInnerStyle.tOverlayInnerStyle,
      innerPopupVisible = _useOverlayInnerStyle.innerPopupVisible,
      onInnerPopupVisibleChange = _useOverlayInnerStyle.onInnerPopupVisibleChange;
    var _useSingle = selectInput_useSingle["default"](props2, context, popupRef),
      isSingleFocus = _useSingle.isSingleFocus,
      commonInputProps = _useSingle.commonInputProps,
      onInnerClear = _useSingle.onInnerClear,
      renderSelectSingle = _useSingle.renderSelectSingle;
    var _useMultiple = selectInput_useMultiple["default"](props2, context, popupRef),
      isMultipleFocus = _useMultiple.isMultipleFocus,
      tagInputRef = _useMultiple.tagInputRef,
      renderSelectMultiple = _useMultiple.renderSelectMultiple;
    var isFocus = Vue.computed(function () {
      return props2.multiple ? isMultipleFocus.value : isSingleFocus.value;
    });
    var classes = Vue.computed(function () {
      var _popupVisible$value;
      return ["".concat(NAME_CLASS.value), _defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"]({}, BASE_CLASS_MULTIPLE.value, multiple.value), BASE_CLASS_BORDERLESS.value, borderless.value), BASE_CLASS_POPUP_VISIBLE.value, (_popupVisible$value = popupVisible.value) !== null && _popupVisible$value !== void 0 ? _popupVisible$value : innerPopupVisible.value), BASE_CLASS_EMPTY.value, value.value instanceof Array ? !value.value.length : !value.value)];
    });
    var addKeyboardEventListener = function addKeyboardEventListener(e) {
      var _e$key;
      var code = e.code || ((_e$key = e.key) === null || _e$key === void 0 ? void 0 : _e$key.trim());
      if (/(ArrowDown|ArrowUp)/.test(code) && !popupVisible.value) {
        var _props2$onPopupVisibl;
        var ctx = _objectSpread(_objectSpread({}, context), {}, {
          trigger: "trigger-element-focus"
        });
        (_props2$onPopupVisibl = props2.onPopupVisibleChange) === null || _props2$onPopupVisibl === void 0 || _props2$onPopupVisibl.call(props2, true, ctx);
      }
    };
    Vue.watch([isFocus], function (_ref2) {
      var _ref3 = _slicedToArray__default["default"](_ref2, 1),
        isFocus2 = _ref3[0];
      if (popupVisible.value) return;
      if (isFocus2) {
        selectInputRef.value.addEventListener("keydown", addKeyboardEventListener);
      } else {
        selectInputRef.value.removeEventListener("keydown", addKeyboardEventListener);
      }
    });
    Vue.onMounted(function () {
      if (!popupVisible.value && isFocus) {
        selectInputRef.value.addEventListener("keydown", addKeyboardEventListener);
      }
    });
    Vue.onBeforeUnmount(function () {
      selectInputRef.value.removeEventListener("keydown", addKeyboardEventListener);
    });
    var onOverlayClick = function onOverlayClick(ctx) {
      var _ctx$e, _tagInputRef$value;
      (_ctx$e = ctx.e) === null || _ctx$e === void 0 || _ctx$e.stopPropagation();
      if (ctx.e.target.tabIndex >= 0) return;
      if (props2.multiple) (_tagInputRef$value = tagInputRef.value) === null || _tagInputRef$value === void 0 || _tagInputRef$value.focus();
    };
    return {
      classPrefix: classPrefix,
      NAME_CLASS: NAME_CLASS,
      innerPopupVisible: innerPopupVisible,
      commonInputProps: commonInputProps,
      tOverlayInnerStyle: tOverlayInnerStyle,
      selectInputRef: selectInputRef,
      popupRef: popupRef,
      classes: classes,
      onInnerClear: onInnerClear,
      renderTNodeJSX: renderTNodeJSX,
      renderSelectSingle: renderSelectSingle,
      renderSelectMultiple: renderSelectMultiple,
      onOverlayClick: onOverlayClick,
      onInnerPopupVisibleChange: onInnerPopupVisibleChange
    };
  },
  render: function render() {
    var _this$popupVisible,
      _this$popupProps,
      _this = this;
    var visibleProps = {
      visible: (_this$popupVisible = this.popupVisible) !== null && _this$popupVisible !== void 0 ? _this$popupVisible : this.innerPopupVisible
    };
    var mainContent = Vue.createVNode(popup_index.Popup, Vue.mergeProps({
      "ref": "popupRef",
      "trigger": ((_this$popupProps = this.popupProps) === null || _this$popupProps === void 0 ? void 0 : _this$popupProps.trigger) || "click",
      "placement": "bottom-left"
    }, visibleProps, {
      "content": this.panel,
      "hideEmptyPopup": true
    }, _objectSpread(_objectSpread({
      onVisibleChange: this.onInnerPopupVisibleChange,
      onOverlayClick: this.onOverlayClick
    }, this.popupProps), {}, {
      overlayInnerStyle: this.tOverlayInnerStyle
    })), _objectSpread({
      "default": function _default() {
        return [_this.multiple ? _this.renderSelectMultiple({
          commonInputProps: _this.commonInputProps,
          onInnerClear: _this.onInnerClear,
          popupVisible: visibleProps.visible,
          allowInput: _this.allowInput
        }) : _this.renderSelectSingle(visibleProps.visible)];
      }
    }, _objectSpread(_objectSpread({}, this.$slots), {}, {
      content: this.$slots.panel
    })));
    var tipsNode = this.renderTNodeJSX("tips");
    var tipsClasses = ["".concat(this.classPrefix, "-input__tips"), "".concat(this.classPrefix, "-tips"), "".concat(this.classPrefix, "-is-").concat(this.status)];
    return Vue.createVNode("div", {
      "ref": "selectInputRef",
      "class": this.classes
    }, [mainContent, tipsNode && Vue.createVNode("div", {
      "class": tipsClasses
    }, [tipsNode])]);
  }
});

exports["default"] = _SelectInput;
//# sourceMappingURL=select-input.js.map
