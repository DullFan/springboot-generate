import { PropType } from 'vue';
import { PopupInstanceFunctions, PopupVisibleChangeContext } from '../popup';
import { SelectInputValueDisplayOptions } from './useSingle';
declare const _default: import("vue").DefineComponent<{
    valueDisplayOptions: {
        type: PropType<SelectInputValueDisplayOptions>;
    };
    allowInput: BooleanConstructor;
    autoWidth: BooleanConstructor;
    autofocus: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: PropType<(h: typeof import("vue").h, props: {
            value: import("./type").SelectInputValue;
            collapsedSelectedItems: import("./type").SelectInputValue;
            count: number;
            onClose: (context: {
                index: number;
                e?: MouseEvent;
            }) => void;
        }) => import("..").SlotReturnValue>;
    };
    disabled: BooleanConstructor;
    inputProps: {
        type: PropType<import("..").InputProps<import("..").InputValue>>;
    };
    inputValue: {
        type: PropType<string>;
        default: string;
    };
    defaultInputValue: {
        type: PropType<string>;
    };
    keys: {
        type: PropType<import("./type").SelectInputKeys>;
    };
    label: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    loading: BooleanConstructor;
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    panel: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    popupProps: {
        type: PropType<import("../popup").TdPopupProps>;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultPopupVisible: BooleanConstructor;
    readonly: BooleanConstructor;
    reserveKeyword: BooleanConstructor;
    status: {
        type: PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    suffixIcon: {
        type: PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    tag: {
        type: PropType<string | ((h: typeof import("vue").h, props: {
            value: string | number;
        }) => import("..").SlotReturnValue)>;
    };
    tagInputProps: {
        type: PropType<import("..").TdTagInputProps>;
    };
    tagProps: {
        type: PropType<import("..").TdTagProps>;
    };
    tips: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: PropType<import("./type").SelectInputValue>;
        default: import("./type").SelectInputValue;
    };
    valueDisplay: {
        type: PropType<string | ((h: typeof import("vue").h, props: {
            value: import("..").TagInputValue;
            onClose: (index: number, item?: any) => void;
        }) => import("..").SlotReturnValue)>;
    };
    onBlur: PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputBlurContext) => void>;
    onClear: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onEnter: PropType<(value: import("./type").SelectInputValue, context: {
        e: KeyboardEvent;
        inputValue: string;
        tagInputValue?: import("..").TagInputValue;
    }) => void>;
    onFocus: PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void>;
    onInputChange: PropType<(value: string, context?: import("./type").SelectInputValueChangeContext) => void>;
    onMouseenter: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPaste: PropType<(context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void>;
    onPopupVisibleChange: PropType<(visible: boolean, context: PopupVisibleChangeContext) => void>;
    onTagChange: PropType<(value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void>;
}, {
    classPrefix: import("vue").ComputedRef<string>;
    NAME_CLASS: import("vue").ComputedRef<string>;
    innerPopupVisible: import("vue").Ref<boolean>;
    commonInputProps: import("vue").ComputedRef<import("./interface").SelectInputCommonProperties>;
    tOverlayInnerStyle: import("vue").ComputedRef<import("..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("..").Styles)>;
    selectInputRef: import("vue").Ref<any>;
    popupRef: import("vue").Ref<PopupInstanceFunctions>;
    classes: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    onInnerClear: (context: {
        e: MouseEvent;
    }) => void;
    renderTNodeJSX: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
    renderSelectSingle: (popupVisible: boolean) => JSX.Element;
    renderSelectMultiple: (p: import("./useMultiple").RenderSelectMultipleParams) => JSX.Element;
    onOverlayClick: (context: {
        e: MouseEvent;
    }) => void;
    onInnerPopupVisibleChange: (visible: boolean, ctx: PopupVisibleChangeContext) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    valueDisplayOptions: {
        type: PropType<SelectInputValueDisplayOptions>;
    };
    allowInput: BooleanConstructor;
    autoWidth: BooleanConstructor;
    autofocus: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: PropType<(h: typeof import("vue").h, props: {
            value: import("./type").SelectInputValue;
            collapsedSelectedItems: import("./type").SelectInputValue;
            count: number;
            onClose: (context: {
                index: number;
                e?: MouseEvent;
            }) => void;
        }) => import("..").SlotReturnValue>;
    };
    disabled: BooleanConstructor;
    inputProps: {
        type: PropType<import("..").InputProps<import("..").InputValue>>;
    };
    inputValue: {
        type: PropType<string>;
        default: string;
    };
    defaultInputValue: {
        type: PropType<string>;
    };
    keys: {
        type: PropType<import("./type").SelectInputKeys>;
    };
    label: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    loading: BooleanConstructor;
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    panel: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    popupProps: {
        type: PropType<import("../popup").TdPopupProps>;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultPopupVisible: BooleanConstructor;
    readonly: BooleanConstructor;
    reserveKeyword: BooleanConstructor;
    status: {
        type: PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    suffixIcon: {
        type: PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    tag: {
        type: PropType<string | ((h: typeof import("vue").h, props: {
            value: string | number;
        }) => import("..").SlotReturnValue)>;
    };
    tagInputProps: {
        type: PropType<import("..").TdTagInputProps>;
    };
    tagProps: {
        type: PropType<import("..").TdTagProps>;
    };
    tips: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: PropType<import("./type").SelectInputValue>;
        default: import("./type").SelectInputValue;
    };
    valueDisplay: {
        type: PropType<string | ((h: typeof import("vue").h, props: {
            value: import("..").TagInputValue;
            onClose: (index: number, item?: any) => void;
        }) => import("..").SlotReturnValue)>;
    };
    onBlur: PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputBlurContext) => void>;
    onClear: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onEnter: PropType<(value: import("./type").SelectInputValue, context: {
        e: KeyboardEvent;
        inputValue: string;
        tagInputValue?: import("..").TagInputValue;
    }) => void>;
    onFocus: PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void>;
    onInputChange: PropType<(value: string, context?: import("./type").SelectInputValueChangeContext) => void>;
    onMouseenter: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPaste: PropType<(context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void>;
    onPopupVisibleChange: PropType<(visible: boolean, context: PopupVisibleChangeContext) => void>;
    onTagChange: PropType<(value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void>;
}>>, {
    value: string | number | boolean | Object | any[] | Date | import("./type").SelectInputValue[];
    loading: boolean;
    autofocus: boolean;
    disabled: boolean;
    multiple: boolean;
    readonly: boolean;
    status: "error" | "default" | "success" | "warning";
    placeholder: string;
    autoWidth: boolean;
    borderless: boolean;
    clearable: boolean;
    inputValue: string;
    minCollapsedNum: number;
    allowInput: boolean;
    popupVisible: boolean;
    defaultPopupVisible: boolean;
    reserveKeyword: boolean;
}, {}>;
export default _default;
