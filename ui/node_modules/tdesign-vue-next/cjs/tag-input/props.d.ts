import { TdTagInputProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    autoWidth: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: PropType<(h: typeof import("vue").h, props: {
            value: import("./type").TagInputValue;
            collapsedSelectedItems: import("./type").TagInputValue;
            count: number;
            onClose: (context: {
                index: number;
                e?: MouseEvent;
            }) => void;
        }) => import("..").SlotReturnValue>;
    };
    disabled: BooleanConstructor;
    dragSort: BooleanConstructor;
    excessTagsDisplayType: {
        type: PropType<"scroll" | "break-line">;
        default: "scroll" | "break-line";
        validator(val: TdTagInputProps['excessTagsDisplayType']): boolean;
    };
    inputProps: {
        type: PropType<import("..").InputProps<import("..").InputValue>>;
    };
    inputValue: {
        type: PropType<string>;
        default: string;
    };
    defaultInputValue: {
        type: PropType<string>;
        default: string;
    };
    label: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    max: {
        type: NumberConstructor;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    prefixIcon: {
        type: PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    size: {
        type: PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: TdTagInputProps['size']): boolean;
    };
    status: {
        type: PropType<"error" | "default" | "success" | "warning">;
        validator(val: TdTagInputProps['status']): boolean;
    };
    suffix: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    suffixIcon: {
        type: PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    tag: {
        type: PropType<string | ((h: typeof import("vue").h, props: {
            value: string | number;
        }) => import("..").SlotReturnValue)>;
    };
    tagProps: {
        type: PropType<import("..").TdTagProps>;
    };
    tips: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: PropType<import("./type").TagInputValue>;
        default: import("./type").TagInputValue;
    };
    modelValue: {
        type: PropType<import("./type").TagInputValue>;
        default: import("./type").TagInputValue;
    };
    defaultValue: {
        type: PropType<import("./type").TagInputValue>;
        default: () => TdTagInputProps['defaultValue'];
    };
    valueDisplay: {
        type: PropType<string | ((h: typeof import("vue").h, props: {
            value: import("./type").TagInputValue;
            onClose: (index: number, item?: any) => void;
        }) => import("..").SlotReturnValue)>;
    };
    onBlur: PropType<(value: import("./type").TagInputValue, context: {
        inputValue: string;
        e: FocusEvent;
    }) => void>;
    onChange: PropType<(value: import("./type").TagInputValue, context: import("./type").TagInputChangeContext) => void>;
    onClear: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClick: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onDragSort: PropType<(context: import("./type").TagInputDragSortContext) => void>;
    onEnter: PropType<(value: import("./type").TagInputValue, context: {
        e: KeyboardEvent;
        inputValue: string;
    }) => void>;
    onFocus: PropType<(value: import("./type").TagInputValue, context: {
        inputValue: string;
        e: FocusEvent;
    }) => void>;
    onInputChange: PropType<(value: string, context?: import("./type").InputValueChangeContext) => void>;
    onMouseenter: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPaste: PropType<(context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void>;
    onRemove: PropType<(context: import("./type").TagInputRemoveContext) => void>;
};
export default _default;
