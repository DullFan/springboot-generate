import { TdStepsProps, TdStepItemProps } from './type';
import './style';
export * from './type';
export declare type StepsProps = TdStepsProps;
export declare type StepItemProps = TdStepItemProps;
export declare const Steps: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        current: {
            type: import("vue").PropType<string | number>;
            default: any;
        };
        modelValue: {
            type: import("vue").PropType<string | number>;
            default: any;
        };
        defaultCurrent: {
            type: import("vue").PropType<string | number>;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        options: {
            type: import("vue").PropType<TdStepItemProps[]>;
        };
        readonly: BooleanConstructor;
        separator: {
            type: import("vue").PropType<"line" | "dashed" | "arrow">;
            default: "line" | "dashed" | "arrow";
            validator(val: "line" | "dashed" | "arrow"): boolean;
        };
        sequence: {
            type: import("vue").PropType<"reverse" | "positive">;
            default: "reverse" | "positive";
            validator(val: "reverse" | "positive"): boolean;
        };
        theme: {
            type: import("vue").PropType<"default" | "dot">;
            default: "default" | "dot";
            validator(val: "default" | "dot"): boolean;
        };
        onChange: import("vue").PropType<(current: string | number, previous: string | number, context?: {
            e?: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        current: {
            type: import("vue").PropType<string | number>;
            default: any;
        };
        modelValue: {
            type: import("vue").PropType<string | number>;
            default: any;
        };
        defaultCurrent: {
            type: import("vue").PropType<string | number>;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        options: {
            type: import("vue").PropType<TdStepItemProps[]>;
        };
        readonly: BooleanConstructor;
        separator: {
            type: import("vue").PropType<"line" | "dashed" | "arrow">;
            default: "line" | "dashed" | "arrow";
            validator(val: "line" | "dashed" | "arrow"): boolean;
        };
        sequence: {
            type: import("vue").PropType<"reverse" | "positive">;
            default: "reverse" | "positive";
            validator(val: "reverse" | "positive"): boolean;
        };
        theme: {
            type: import("vue").PropType<"default" | "dot">;
            default: "default" | "dot";
            validator(val: "default" | "dot"): boolean;
        };
        onChange: import("vue").PropType<(current: string | number, previous: string | number, context?: {
            e?: MouseEvent;
        }) => void>;
    }>>, {
        readonly: boolean;
        sequence: "reverse" | "positive";
        layout: "horizontal" | "vertical";
        separator: "line" | "dashed" | "arrow";
        modelValue: string | number;
        current: string | number;
        theme: "default" | "dot";
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        current: {
            type: import("vue").PropType<string | number>;
            default: any;
        };
        modelValue: {
            type: import("vue").PropType<string | number>;
            default: any;
        };
        defaultCurrent: {
            type: import("vue").PropType<string | number>;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        options: {
            type: import("vue").PropType<TdStepItemProps[]>;
        };
        readonly: BooleanConstructor;
        separator: {
            type: import("vue").PropType<"line" | "dashed" | "arrow">;
            default: "line" | "dashed" | "arrow";
            validator(val: "line" | "dashed" | "arrow"): boolean;
        };
        sequence: {
            type: import("vue").PropType<"reverse" | "positive">;
            default: "reverse" | "positive";
            validator(val: "reverse" | "positive"): boolean;
        };
        theme: {
            type: import("vue").PropType<"default" | "dot">;
            default: "default" | "dot";
            validator(val: "default" | "dot"): boolean;
        };
        onChange: import("vue").PropType<(current: string | number, previous: string | number, context?: {
            e?: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        readonly: boolean;
        sequence: "reverse" | "positive";
        layout: "horizontal" | "vertical";
        separator: "line" | "dashed" | "arrow";
        modelValue: string | number;
        current: string | number;
        theme: "default" | "dot";
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    current: {
        type: import("vue").PropType<string | number>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<string | number>;
        default: any;
    };
    defaultCurrent: {
        type: import("vue").PropType<string | number>;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    options: {
        type: import("vue").PropType<TdStepItemProps[]>;
    };
    readonly: BooleanConstructor;
    separator: {
        type: import("vue").PropType<"line" | "dashed" | "arrow">;
        default: "line" | "dashed" | "arrow";
        validator(val: "line" | "dashed" | "arrow"): boolean;
    };
    sequence: {
        type: import("vue").PropType<"reverse" | "positive">;
        default: "reverse" | "positive";
        validator(val: "reverse" | "positive"): boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "dot">;
        default: "default" | "dot";
        validator(val: "default" | "dot"): boolean;
    };
    onChange: import("vue").PropType<(current: string | number, previous: string | number, context?: {
        e?: MouseEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    readonly: boolean;
    sequence: "reverse" | "positive";
    layout: "horizontal" | "vertical";
    separator: "line" | "dashed" | "arrow";
    modelValue: string | number;
    current: string | number;
    theme: "default" | "dot";
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const StepItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        index: NumberConstructor;
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        extra: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        icon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean;
        };
        status: {
            type: import("vue").PropType<import("./type").StepStatus>;
            default: import("./type").StepStatus;
            validator(val: import("./type").StepStatus): boolean;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
        value: {
            type: import("vue").PropType<string | number>;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        index: NumberConstructor;
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        extra: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        icon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean;
        };
        status: {
            type: import("vue").PropType<import("./type").StepStatus>;
            default: import("./type").StepStatus;
            validator(val: import("./type").StepStatus): boolean;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
        value: {
            type: import("vue").PropType<string | number>;
        };
    }>>, {
        content: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        title: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        status: import("./type").StepStatus;
        icon: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        index: NumberConstructor;
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        extra: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        icon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean;
        };
        status: {
            type: import("vue").PropType<import("./type").StepStatus>;
            default: import("./type").StepStatus;
            validator(val: import("./type").StepStatus): boolean;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string;
        };
        value: {
            type: import("vue").PropType<string | number>;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        content: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        title: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        status: import("./type").StepStatus;
        icon: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    index: NumberConstructor;
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    extra: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    icon: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: boolean;
    };
    status: {
        type: import("vue").PropType<import("./type").StepStatus>;
        default: import("./type").StepStatus;
        validator(val: import("./type").StepStatus): boolean;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string;
    };
    value: {
        type: import("vue").PropType<string | number>;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    content: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    title: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    status: import("./type").StepStatus;
    icon: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Steps;
