import { TdStepItemProps } from './type';
declare const _default: import("vue").DefineComponent<{
    current: {
        type: import("vue").PropType<string | number>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<string | number>;
        default: any;
    };
    defaultCurrent: {
        type: import("vue").PropType<string | number>;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    options: {
        type: import("vue").PropType<TdStepItemProps[]>;
    };
    readonly: BooleanConstructor;
    separator: {
        type: import("vue").PropType<"line" | "dashed" | "arrow">;
        default: "line" | "dashed" | "arrow";
        validator(val: "line" | "dashed" | "arrow"): boolean;
    };
    sequence: {
        type: import("vue").PropType<"reverse" | "positive">;
        default: "reverse" | "positive";
        validator(val: "reverse" | "positive"): boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "dot">;
        default: "default" | "dot";
        validator(val: "default" | "dot"): boolean;
    };
    onChange: import("vue").PropType<(current: string | number, previous: string | number, context?: {
        e?: MouseEvent;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    current: {
        type: import("vue").PropType<string | number>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<string | number>;
        default: any;
    };
    defaultCurrent: {
        type: import("vue").PropType<string | number>;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    options: {
        type: import("vue").PropType<TdStepItemProps[]>;
    };
    readonly: BooleanConstructor;
    separator: {
        type: import("vue").PropType<"line" | "dashed" | "arrow">;
        default: "line" | "dashed" | "arrow";
        validator(val: "line" | "dashed" | "arrow"): boolean;
    };
    sequence: {
        type: import("vue").PropType<"reverse" | "positive">;
        default: "reverse" | "positive";
        validator(val: "reverse" | "positive"): boolean;
    };
    theme: {
        type: import("vue").PropType<"default" | "dot">;
        default: "default" | "dot";
        validator(val: "default" | "dot"): boolean;
    };
    onChange: import("vue").PropType<(current: string | number, previous: string | number, context?: {
        e?: MouseEvent;
    }) => void>;
}>>, {
    readonly: boolean;
    sequence: "reverse" | "positive";
    layout: "horizontal" | "vertical";
    separator: "line" | "dashed" | "arrow";
    modelValue: string | number;
    current: string | number;
    theme: "default" | "dot";
}, {}>;
export default _default;
