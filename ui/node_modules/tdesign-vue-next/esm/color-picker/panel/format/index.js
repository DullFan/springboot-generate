/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { isVNode, defineComponent, ref, watch, createVNode, mergeProps } from 'vue';
import upperCase from 'lodash/upperCase';
import props from '../../props.js';
import { FORMATS } from '../../const.js';
import { Select, Option } from '../../../select/index.js';
import FormatInputs from './inputs.js';
import { useBaseClassName } from '../../hooks.js';
import '../../../_common/js/color-picker/constants.js';
import '../../../select/select.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/pick';
import 'lodash/isArray';
import 'lodash/isFunction';
import 'lodash/debounce';
import 'lodash/cloneDeep';
import 'lodash/get';
import 'lodash/intersection';
import '../../../common-components/fake-arrow.js';
import '../../../hooks/useConfig.js';
import '../../../config-provider/useConfig.js';
import 'lodash/isString';
import '../../../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../../../_common/js/global-config/default-config.js';
import '../../../_common/js/global-config/locale/zh_CN.js';
import '../../../_chunks/dep-4514b13f.js';
import '@babel/runtime/helpers/typeof';
import '../../../_chunks/dep-224df961.js';
import 'dayjs';
import '../../../_chunks/dep-d396aaa6.js';
import '../../../config-provider/type.js';
import '../../../select-input/index.js';
import '../../../select-input/select-input.js';
import '../../../popup/index.js';
import '../../../popup/popup.js';
import '@popperjs/core';
import 'lodash/isObject';
import '../../../hooks/index.js';
import '../../../hooks/icon.js';
import '../../../hooks/slot.js';
import '../../../hooks/tnode.js';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../../../utils/render-tnode.js';
import 'lodash/isEmpty';
import '../../../hooks/useCommonClassName.js';
import '../../../hooks/useDefaultValue.js';
import '../../../hooks/useDestroyOnClose.js';
import '../../../hooks/useKeepAnimation.js';
import '../../../hooks/useRipple.js';
import '../../../utils/set-style.js';
import '../../../hooks/useVirtualScroll.js';
import '../../../hooks/useVModel.js';
import '../../../hooks/useImagePreviewUrl.js';
import '../../../_common/js/upload/utils.js';
import '../../../_common/js/log/log.js';
import '../../../utils/dom.js';
import '../../../utils/easing.js';
import '../../../_common/js/utils/set-style.js';
import '../../../popup/container.js';
import '../../../popup/props.js';
import '../../../hooks/useResizeObserver.js';
import '../../../utils/withInstall.js';
import '../../../popup/style';
import '../../../popup/type.js';
import '../../../select-input/props.js';
import '../../../select-input/useSingle.js';
import '../../../input/index.js';
import '../../../input/input.js';
import 'tdesign-icons-vue-next';
import '../../../input/props.js';
import '../../../form/hooks.js';
import '../../../hooks/useGlobalIcon.js';
import '../../../input/useInput.js';
import '../../../form/const.js';
import '../../../input/useLengthLimit.js';
import '../../../_common/js/log/index.js';
import '../../../_common/js/utils/helper.js';
import 'lodash/isNull';
import 'lodash/isUndefined';
import 'lodash/isNumber';
import '../../../input/useInputEventHandler.js';
import '../../../input/useInputWidth.js';
import '../../../input/input-group.js';
import '../../../input/input-group-props.js';
import '../../../input/style';
import '../../../input/type.js';
import '../../../loading/index.js';
import '../../../loading/directive.js';
import 'lodash/mapKeys';
import 'lodash/isEqual';
import '../../../loading/plugin.js';
import '../../../loading/loading.js';
import '../../../loading/icon/gradient.js';
import '../../../_common/js/loading/circle-adapter.js';
import '../../../loading/props.js';
import '../../../hooks/useTeleport.js';
import '../../../loading/style';
import '../../../loading/type.js';
import '../../../select-input/useMultiple.js';
import '../../../tag-input/index.js';
import '../../../tag-input/tag-input.js';
import '../../../tag-input/props.js';
import '../../../tag-input/hooks/useTagScroll.js';
import '../../../tag-input/useTagList.js';
import '../../../tag/index.js';
import '../../../tag/tag.js';
import 'tinycolor2';
import '../../../tag/props.js';
import '../../../tag/check-tag.js';
import '../../../tag/check-tag-props.js';
import '../../../_common/js/common.js';
import '../../../tag/check-tag-group.js';
import '../../../tag/check-tag-group-props.js';
import '../../../tag/style';
import '../../../tag/type.js';
import '../../../tag-input/hooks/useHover.js';
import '../../../tag-input/hooks/useDragSorter.js';
import '../../../tag-input/style';
import '../../../tag-input/type.js';
import '../../../select-input/useOverlayInnerStyle.js';
import '../../../select-input/style';
import '../../../select-input/type.js';
import '../../../select/select-panel.js';
import 'lodash/omit';
import '../../../select/option.js';
import '../../../select/option-props.js';
import '../../../checkbox/index.js';
import '../../../checkbox/checkbox.js';
import '../../../checkbox/props.js';
import '../../../checkbox/constants.js';
import '../../../checkbox/hooks/useCheckboxLazyLoad.js';
import '../../../_common/js/utils/observe.js';
import '../../../checkbox/hooks/useKeyboardEvent.js';
import '../../../hooks/useDisabled.js';
import 'lodash/isBoolean';
import '../../../checkbox/group.js';
import '../../../checkbox/checkbox-group-props.js';
import '../../../checkbox/style';
import '../../../checkbox/type.js';
import '../../../select/helper.js';
import '../../../select/optionGroup.js';
import '../../../select/option-group-props.js';
import '../../../select/props.js';
import '../../../select/hooks/usePanelVirtualScroll.js';
import '../../../select/hooks/useSelectOptions.js';
import '../../../select/hooks/useKeyboardControl.js';
import '../../../select/style';
import '../../../select/type.js';
import 'lodash/throttle';
import '../../utils/index.js';
import '../../../_common/js/color-picker/index.js';
import '../../../_common/js/color-picker/cmyk.js';
import '../../../_common/js/color-picker/color.js';
import '@babel/runtime/helpers/classCallCheck';
import '@babel/runtime/helpers/createClass';
import '../../../_common/js/color-picker/gradient.js';
import '../../../_common/js/color-picker/draggable.js';
import '../../../input-number/index.js';
import '../../../input-number/input-number.js';
import '../../../button/index.js';
import '../../../button/button.js';
import '../../../button/props.js';
import '../../../button/style';
import '../../../button/type.js';
import '../../../input-number/props.js';
import '../../../input-number/useInputNumber.js';
import '../../../_common/js/input-number/number.js';
import '../../../_common/js/input-number/large-number.js';
import '../../../input-number/style';
import '../../../input-number/type.js';
import './config.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var FormatPanel = defineComponent({
  name: "FormatPanel",
  inheritAttrs: false,
  props: _objectSpread(_objectSpread({}, props), {}, {
    color: {
      type: Object
    },
    onModeChange: {
      type: Function,
      "default": function _default() {
        return function () {};
      }
    },
    onInputChange: {
      type: Function,
      "default": function _default() {
        return function () {};
      }
    }
  }),
  setup: function setup(props2) {
    var baseClassName = useBaseClassName();
    var formatModel = ref(props2.format);
    watch(function () {
      return [props2.format];
    }, function () {
      return formatModel.value = props2.format;
    });
    var handleModeChange = function handleModeChange(v) {
      formatModel.value = v;
      props2.onModeChange(v);
    };
    return {
      formatModel: formatModel,
      baseClassName: baseClassName,
      handleModeChange: handleModeChange
    };
  },
  render: function render() {
    var _this = this;
    var _slot;
    var formats = _toConsumableArray(FORMATS);
    var baseClassName = this.baseClassName,
      handleModeChange = this.handleModeChange;
    var newProps = _objectSpread(_objectSpread({}, this.$props), {}, {
      format: this.formatModel
    });
    var selectInputProps = _objectSpread({}, this.selectInputProps || {});
    return createVNode("div", {
      "class": "".concat(baseClassName, "__format")
    }, [createVNode("div", {
      "class": "".concat(baseClassName, "__format--item")
    }, [createVNode(Select, mergeProps({
      "size": "small",
      "class": "".concat(baseClassName, "__format-mode-select")
    }, selectInputProps, {
      "popupProps": _objectSpread({
        overlayClassName: "".concat(baseClassName, "__select-options")
      }, selectInputProps.popupProps),
      "modelValue": _this.formatModel,
      "onUpdate:modelValue": function onUpdateModelValue($event) {
        return _this.formatModel = $event;
      },
      "onChange": handleModeChange
    }), _isSlot(_slot = formats.map(function (item) {
      return createVNode(Option, {
        "key": item,
        "value": item,
        "label": upperCase(item),
        "style": {
          fontSize: "12px"
        }
      }, null);
    })) ? _slot : {
      "default": function _default() {
        return [_slot];
      }
    })]), createVNode("div", {
      "class": "".concat(baseClassName, "__format--item")
    }, [createVNode(FormatInputs, newProps, null)])]);
  }
});

export { FormatPanel as default };
//# sourceMappingURL=index.js.map
