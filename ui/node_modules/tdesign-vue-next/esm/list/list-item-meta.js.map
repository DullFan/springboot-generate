{"version":3,"file":"list-item-meta.js","sources":["../../src/list/list-item-meta.tsx"],"sourcesContent":["import { defineComponent } from 'vue';\nimport props from './list-item-meta-props';\nimport { usePrefixClass } from '../hooks/useConfig';\nimport { useContent, useTNodeJSX } from '../hooks/tnode';\nimport isString from 'lodash/isString';\n\nexport default defineComponent({\n  name: 'TListItemMeta',\n  props,\n  setup(props, ctx) {\n    const COMPONENT_NAME = usePrefixClass('list-item__meta');\n    const renderContent = useContent();\n    const renderTNodeJSX = useTNodeJSX();\n\n    const renderAvatar = () => {\n      if (props.avatar || ctx.slots.avatar) {\n        console.warn('`avatar` is going to be deprecated, please use `image` instead');\n      }\n      const thumbnail = renderContent('avatar', 'image');\n      if (!thumbnail) return;\n      if (isString(thumbnail)) {\n        return (\n          <div class={`${COMPONENT_NAME.value}-avatar`}>\n            <img src={thumbnail}></img>\n          </div>\n        );\n      }\n      return <div class={`${COMPONENT_NAME.value}-avatar`}>{thumbnail}</div>;\n    };\n    return () => {\n      const propsTitleContent = renderTNodeJSX('title');\n      const propsDescriptionContent = renderTNodeJSX('description');\n\n      const listItemMetaContent = [\n        renderAvatar(),\n        <div class={`${COMPONENT_NAME.value}-content`}>\n          {propsTitleContent && <h3 class={`${COMPONENT_NAME.value}-title`}>{propsTitleContent}</h3>}\n          {propsDescriptionContent && <p class={`${COMPONENT_NAME.value}-description`}>{propsDescriptionContent}</p>}\n        </div>,\n      ];\n\n      return <div class={COMPONENT_NAME.value}>{listItemMetaContent}</div>;\n    };\n  },\n});\n"],"names":["defineComponent","name","props","setup","ctx","COMPONENT_NAME","usePrefixClass","renderContent","useContent","renderTNodeJSX","useTNodeJSX","renderAvatar","avatar","slots","console","warn","thumbnail","isString","_createVNode","concat","value","propsTitleContent","propsDescriptionContent","listItemMetaContent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,oBAAeA,eAAgB,CAAA;AAC7BC,EAAAA,IAAM,EAAA,eAAA;AACNC,EAAAA,KAAA,EAAAA,KAAA;AACAC,EAAAA,KAAA,EAAAA,SAAAA,KAAAA,CAAMD,QAAOE,GAAK,EAAA;AACV,IAAA,IAAAC,cAAA,GAAiBC,eAAe,iBAAiB,CAAA,CAAA;AACvD,IAAA,IAAMC,gBAAgBC,UAAW,EAAA,CAAA;AACjC,IAAA,IAAMC,iBAAiBC,WAAY,EAAA,CAAA;AAEnC,IAAA,IAAMC,eAAe,SAAfA,eAAqB;MACzB,IAAIT,MAAM,CAAAU,MAAA,IAAUR,GAAI,CAAAS,KAAA,CAAMD,MAAQ,EAAA;AACpCE,QAAAA,OAAA,CAAQC,KAAK,gEAAgE,CAAA,CAAA;AAC/E,OAAA;AACM,MAAA,IAAAC,SAAA,GAAYT,aAAc,CAAA,QAAA,EAAU,OAAO,CAAA,CAAA;MACjD,IAAI,CAACS,SAAA,EAAW,OAAA;AACZ,MAAA,IAAAC,QAAA,CAASD,SAAS,CAAG,EAAA;AAErB,QAAA,OAAAE,WAAA,CAAA,KAAA,EAAA;AAAA,UAAA,OAAA,EAAA,EAAA,CAAAC,MAAA,CAAed,cAAA,CAAee,KAC5B,EAAA,SAAA,CAAA;AAAA,SAAA,EAAA,CAAAF,WAAA,CAAA,KAAA,EAAA;UAAA,KAAUF,EAAAA,SAAAA;AAAW,SAAA,EAAA,IAAA,CAAA,CAAA,CAAA,CAAA;AAG3B,OAAA;AACA,MAAA,OAAAE,WAAA,CAAA,KAAA,EAAA;AAAA,QAAA,OAAA,EAAA,EAAA,CAAAC,MAAA,CAAsBd,cAAe,CAAAe,KAAA,EAAA,SAAA,CAAA;AAAA,OAAA,EAAA,CAAiBJ;KACxD,CAAA;AACA,IAAA,OAAO,YAAM;AACL,MAAA,IAAAK,iBAAA,GAAoBZ,eAAe,OAAO,CAAA,CAAA;AAC1C,MAAA,IAAAa,uBAAA,GAA0Bb,eAAe,aAAa,CAAA,CAAA;AAE5D,MAAA,IAAMc,mBAAsB,GAAA,CAC1BZ,YAAa,EAAA,EAAAO,WAAA,CAAA,KAAA,EAAA;AAAA,QAAA,OAAA,EAAA,EAAA,CAAAC,MAAA,CACEd,cAAe,CAAAe,KAAA,EAAA,UAAA,CAAA;OAC3BC,EAAAA,CAAAA,iBAAA,IAAAH,WAAA,CAAA,IAAA,EAAA;AAAA,QAAA,OAAA,EAAA,EAAA,CAAAC,MAAA,CAAmCd,cAAe,CAAAe,KAAA,EAAA,QAAA,CAAA;AAAA,OAAA,EAAA,CAAgBC,mBAA5C,EACtBC,uBAAA,IAAAJ,WAAA,CAAA,GAAA,EAAA;AAAA,QAAA,OAAA,EAAA,EAAA,CAAAC,MAAA,CAAwCd,cAAe,CAAAe,KAAA,EAAA,cAAA,CAAA;OAAsBE,EAAAA,CAAAA,yBAAjD,CAEjC,CAAA,CAAA,CAAA;AAEA,MAAA,OAAAJ,WAAA,CAAA,KAAA,EAAA;AAAA,QAAA,OAAA,EAAmBb,cAAe,CAAAe,KAAAA;AAAA,OAAA,EAAA,CAAQG;KAC5C,CAAA;AACF,GAAA;AACF,CAAC,CAAA;;;;"}