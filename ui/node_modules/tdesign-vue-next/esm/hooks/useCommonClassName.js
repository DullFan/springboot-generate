/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

import './useConfig.js';
import { useConfig } from '../config-provider/useConfig.js';
import 'vue';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import 'lodash/isString';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/default-config.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../_chunks/dep-4514b13f.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-224df961.js';
import 'dayjs';
import '../_chunks/dep-d396aaa6.js';
import 'lodash/isArray';
import '../config-provider/type.js';

function useCommonClassName() {
  var _useConfig = useConfig(),
    classPrefix = _useConfig.classPrefix;
  var sizeClassNames = {
    small: "".concat(classPrefix.value, "-size-s"),
    medium: "".concat(classPrefix.value, "-size-m"),
    large: "".concat(classPrefix.value, "-size-l"),
    "default": "",
    xs: "".concat(classPrefix.value, "-size-xs"),
    xl: "".concat(classPrefix.value, "-size-xl"),
    block: "".concat(classPrefix.value, "-size-full-width")
  };
  var statusClassNames = {
    loading: "".concat(classPrefix.value, "-is-loading"),
    loadMore: "".concat(classPrefix.value, "-is-load-more"),
    disabled: "".concat(classPrefix.value, "-is-disabled"),
    focused: "".concat(classPrefix.value, "-is-focused"),
    success: "".concat(classPrefix.value, "-is-success"),
    error: "".concat(classPrefix.value, "-is-error"),
    warning: "".concat(classPrefix.value, "-is-warning"),
    selected: "".concat(classPrefix.value, "-is-selected"),
    active: "".concat(classPrefix.value, "-is-active"),
    checked: "".concat(classPrefix.value, "-is-checked"),
    current: "".concat(classPrefix.value, "-is-current"),
    hidden: "".concat(classPrefix.value, "-is-hidden"),
    visible: "".concat(classPrefix.value, "-is-visible"),
    expanded: "".concat(classPrefix.value, "-is-expanded"),
    indeterminate: "".concat(classPrefix.value, "-is-indeterminate")
  };
  return {
    classPrefix: classPrefix,
    sizeClassNames: sizeClassNames,
    statusClassNames: statusClassNames,
    classNames: {
      size: sizeClassNames,
      status: statusClassNames
    }
  };
}

export { useCommonClassName as default };
//# sourceMappingURL=useCommonClassName.js.map
