{"version":3,"file":"useVirtualScrollNew.js","sources":["../../src/hooks/useVirtualScrollNew.ts"],"sourcesContent":["/**\n * 基于原作者（@louiszhai）的思路二次开发，为保证其他组件暂不受影响，单独开一个文件\n * 新增支持以下 3 个特性\n * 1. 支持不同表格高度\n * 2. 支持滚动到特定元素，方便 Select 等组件展开时直接定位到选中元素\n * 3. 支持数据变化不重置，方便支持树形结构虚拟滚动\n */\nimport { ref, computed, watch, Ref } from 'vue';\nimport { TScroll } from '../common';\nimport useResizeObserver from './useResizeObserver';\nimport max from 'lodash/max';\nimport min from 'lodash/min';\nimport sum from 'lodash/sum';\nimport throttle from 'lodash/throttle';\n\nexport type UseVirtualScrollParams = Ref<{\n  /** 列数据 */\n  data: { [key: string]: any }[];\n  scroll: TScroll;\n}>;\n\nexport interface ScrollToElementParams {\n  /** 跳转元素下标 */\n  index: number;\n  /** 跳转元素距离顶部的距离 */\n  top?: number;\n  /** 单个元素高度非固定场景下，即 isFixedRowHeight = false。延迟设置元素位置，一般用于依赖不同高度异步渲染等场景，单位：毫秒 */\n  time?: number;\n  behavior?: 'auto' | 'smooth';\n}\n\nconst useVirtualScroll = (container: Ref<HTMLElement | null>, params: UseVirtualScrollParams) => {\n  /** 注意测试：数据长度为空；数据长度小于表格高度等情况。即期望只有数据量达到一定程度才允许开启虚拟滚动 */\n  const visibleData = ref<any[]>([]);\n  // 用于显示表格列\n  const translateY = ref((params.value.data?.length || 0) * (params.value.scroll?.rowHeight || 50));\n  // 滚动高度，用于显示滚动条\n  const scrollHeight = ref(0);\n  // 已经通过节点渲染计算出来的各自行高\n  // 不要使用响应式，数据量大时会产生卡顿\n  let trHeightList: number[] = [];\n  const containerHeight = ref(0);\n  const containerWidth = ref(0);\n  const startAndEndIndex = ref<[number, number]>([0, 15]);\n\n  // 设置初始值\n  const tScroll = computed(() => {\n    const { scroll } = params.value;\n    if (!scroll) return {};\n    return {\n      bufferSize: scroll.bufferSize || 10,\n      isFixedRowHeight: scroll.isFixedRowHeight ?? false,\n      rowHeight: scroll.rowHeight || 47,\n      threshold: scroll.threshold || 100,\n      type: scroll.type,\n    };\n  });\n\n  // 当前场景是否满足开启虚拟滚动的条件\n  const isVirtualScroll = computed(() => {\n    const { data } = params.value;\n    return tScroll.value.type === 'virtual' && tScroll.value.threshold < data.length;\n  });\n\n  // 一次循环遍历中计算可视范围的相关信息，减少大数据量时的遍历开销\n  function getVisibleRangeConfig() {\n    const scrollTop = container.value?.scrollTop ?? 0;\n\n    // 记录前置 buffer 的高度\n    const prevBufferHeightList: number[] = [];\n    // 没有被渲染的行的高度，用于设定容器的 translateY\n    let hiddenHeight = 0;\n\n    let visibleStart = -1;\n    let visibleEnd = -1;\n\n    let totalHeight = 0;\n\n    for (let i = 0, len = params.value.data.length; i < len; i++) {\n      const rowHeight = trHeightList[i] ?? tScroll.value.rowHeight;\n      totalHeight = totalHeight + rowHeight;\n      // 获取第一个可视范围内的元素\n      if (totalHeight > scrollTop && visibleStart === -1) {\n        visibleStart = i;\n        if (visibleStart - tScroll.value.bufferSize > 0) {\n          hiddenHeight = totalHeight - rowHeight - sum(prevBufferHeightList);\n        }\n      }\n      if (visibleStart === -1) {\n        prevBufferHeightList.push(rowHeight);\n        if (prevBufferHeightList.length > tScroll.value.bufferSize) {\n          prevBufferHeightList.shift();\n        }\n      }\n      // 获取最后一个可视范围内的元素\n      if (\n        visibleEnd === -1 &&\n        (totalHeight > containerHeight.value + scrollTop || i === params.value.data.length - 1)\n      ) {\n        visibleEnd = i;\n      }\n\n      if (visibleStart !== -1 && visibleEnd !== -1) {\n        // 不再统计高度\n        break;\n      }\n    }\n\n    // 前后偏移 buffer\n    const startIndex = max([visibleStart - tScroll.value.bufferSize, 0]);\n    const endIndex = min([visibleEnd + tScroll.value.bufferSize, params.value.data.length]);\n\n    return {\n      startIndex,\n      endIndex,\n      translateY: hiddenHeight,\n    };\n  }\n\n  const updateVisibleData = throttle(() => {\n    // 计算前后的buffer偏移后的渲染数据\n    const { startIndex, endIndex, translateY: translateYValue } = getVisibleRangeConfig();\n\n    if (startAndEndIndex.value.join() !== [startIndex, endIndex].join() && startIndex >= 0) {\n      translateY.value = translateYValue;\n      visibleData.value = params.value.data.slice(startIndex, endIndex);\n      startAndEndIndex.value = [startIndex, endIndex];\n    }\n  }, 100);\n\n  // 固定高度场景，不需要通过行渲染获取高度（仅非固定高度场景需要）\n  const handleRowMounted = (rowData: any) => {\n    if (!isVirtualScroll.value || !rowData || tScroll.value.isFixedRowHeight || !container.value) return;\n    const trHeight = rowData.ref.value?.getBoundingClientRect().height;\n    const rowIndex = rowData.data.VIRTUAL_SCROLL_INDEX;\n\n    if (trHeightList[rowIndex] !== trHeight) {\n      const diff = trHeight - trHeightList[rowIndex];\n      trHeightList[rowIndex] = trHeight;\n      // 采用 diff 的方式更新，不再遍历数组\n      scrollHeight.value = scrollHeight.value + diff;\n    }\n  };\n\n  const handleScroll = () => {\n    if (!isVirtualScroll.value) return;\n    updateVisibleData();\n  };\n\n  const refreshVirtualScroll = ([{ contentRect }]: [ResizeObserverEntry]) => {\n    // 如果宽度发生变化，重置滚动位置\n    const maxScrollbarWidth = 16;\n    if (Math.abs(contentRect.width - containerWidth.value) > maxScrollbarWidth) {\n      container.value.scrollTop = 0;\n      translateY.value = 0;\n    }\n    containerWidth.value = contentRect.width;\n    // 高度更新后，由 height 独立的 watch 触发可视区域的更新\n    containerHeight.value = contentRect.height;\n  };\n\n  const addIndexToData = (data: any[]) => {\n    data.forEach((item, index) => {\n      // eslint-disable-next-line\n      item['VIRTUAL_SCROLL_INDEX'] = index;\n    });\n  };\n\n  const updateScrollTop = ({ index, top = 0, behavior }: ScrollToElementParams) => {\n    const scrollTop = sum(trHeightList.slice(0, index)) - top;\n    container.value.scrollTo({\n      top: scrollTop,\n      behavior: behavior || 'auto',\n    });\n  };\n\n  /**\n   * 滚动到指定元素（对外暴露的方法，谨慎修改）\n   */\n  const scrollToElement = (p: ScrollToElementParams) => {\n    updateScrollTop(p);\n    // 不同行高的表格需要异步计算\n    if (!tScroll.value.isFixedRowHeight) {\n      const duration = p.time ?? 60;\n      const timer = setTimeout(() => {\n        updateScrollTop(p);\n        clearTimeout(timer);\n      }, duration);\n    }\n  };\n\n  // 如果初始化时 isVirtualScroll 为 false，undefined 的 ref 会导致无法监听元素高度变化\n  useResizeObserver(\n    computed(() => (isVirtualScroll.value ? container.value : undefined)),\n    refreshVirtualScroll,\n  );\n\n  // 固定高度场景，可直接通过数据长度计算出最大滚动高度\n  watch(\n    () => [[...params.value.data], tScroll.value, isVirtualScroll.value, container.value],\n    () => {\n      if (!isVirtualScroll.value || !container.value) return;\n      const { data } = params.value;\n      addIndexToData(data);\n\n      // 有可能初始化时，resize 监听没触发，尝试设置初始化容器高度\n      containerHeight.value = container.value.getBoundingClientRect().height;\n\n      if (trHeightList.length !== params.value.data.length) {\n        // 暂时对于 table 和 tree 场景，信任之前缓存的行高\n        // 后续优化可能提供一个参数，进行监听从而清除记录的行高会更好\n        const initHeightList: number[] = Array.from(trHeightList);\n        // 数据长度如果发生变化，裁剪高度记录的数组，避免算出异常的总高度\n        initHeightList.length = params.value.data.length;\n        initHeightList.fill(tScroll.value.rowHeight || 47);\n        trHeightList = initHeightList;\n      }\n\n      scrollHeight.value = sum(trHeightList);\n\n      // 清除记录的滚动顺序\n      startAndEndIndex.value = [0, 0];\n      updateVisibleData();\n    },\n    { immediate: true },\n  );\n\n  // 当容器高度变化后，重新计算可视区域数据\n  watch(\n    () => containerHeight.value,\n    () => {\n      updateVisibleData();\n    },\n  );\n\n  return {\n    visibleData,\n    translateY,\n    scrollHeight,\n    isVirtualScroll,\n    handleScroll,\n    handleRowMounted,\n    scrollToElement,\n  };\n};\n\nexport type VirtualScrollConfig = ReturnType<typeof useVirtualScroll>;\n\nexport default useVirtualScroll;\n"],"names":["useVirtualScroll","container","params","_params$value$data","_params$value$scroll","visibleData","ref","translateY","value","data","length","scroll","rowHeight","scrollHeight","trHeightList","containerHeight","containerWidth","startAndEndIndex","tScroll","computed","_scroll$isFixedRowHei","bufferSize","isFixedRowHeight","threshold","type","isVirtualScroll","getVisibleRangeConfig","_container$value$scro","_container$value","scrollTop","prevBufferHeightList","hiddenHeight","visibleStart","visibleEnd","totalHeight","i","len","_trHeightList$i","sum","push","shift","startIndex","max","endIndex","min","updateVisibleData","throttle","_getVisibleRangeConfi","translateYValue","join","slice","handleRowMounted","rowData","_rowData$ref$value","trHeight","getBoundingClientRect","height","rowIndex","VIRTUAL_SCROLL_INDEX","diff","handleScroll","refreshVirtualScroll","_ref2","_slicedToArray","_ref","contentRect","maxScrollbarWidth","Math","abs","width","addIndexToData","forEach","item","index","updateScrollTop","top","_ref3$top","behavior","scrollTo","scrollToElement","p","_p$time","duration","time","timer","setTimeout","clearTimeout","useResizeObserver","watch","_toConsumableArray","initHeightList","Array","from","fill","immediate"],"mappings":"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"}