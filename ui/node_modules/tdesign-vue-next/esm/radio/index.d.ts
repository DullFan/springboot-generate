import { TdRadioProps, TdRadioGroupProps } from './type';
import './style';
export * from './type';
export declare type RadioProps = TdRadioProps;
export declare type RadioGroupProps = TdRadioGroupProps;
export declare const Radio: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        allowUncheck: BooleanConstructor;
        checked: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultChecked: BooleanConstructor;
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        readonly: BooleanConstructor;
        value: {
            type: import("vue").PropType<string | number | boolean>;
            default: string | number | boolean;
        };
        onChange: import("vue").PropType<(checked: boolean, context: {
            e: Event;
        }) => void>;
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        allowUncheck: BooleanConstructor;
        checked: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultChecked: BooleanConstructor;
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        readonly: BooleanConstructor;
        value: {
            type: import("vue").PropType<string | number | boolean>;
            default: string | number | boolean;
        };
        onChange: import("vue").PropType<(checked: boolean, context: {
            e: Event;
        }) => void>;
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
    }>>, {
        name: string;
        value: string | number | boolean;
        disabled: boolean;
        readonly: boolean;
        checked: boolean;
        modelValue: boolean;
        allowUncheck: boolean;
        defaultChecked: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        allowUncheck: BooleanConstructor;
        checked: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultChecked: BooleanConstructor;
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        readonly: BooleanConstructor;
        value: {
            type: import("vue").PropType<string | number | boolean>;
            default: string | number | boolean;
        };
        onChange: import("vue").PropType<(checked: boolean, context: {
            e: Event;
        }) => void>;
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        name: string;
        value: string | number | boolean;
        disabled: boolean;
        readonly: boolean;
        checked: boolean;
        modelValue: boolean;
        allowUncheck: boolean;
        defaultChecked: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    allowUncheck: BooleanConstructor;
    checked: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultChecked: BooleanConstructor;
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    readonly: BooleanConstructor;
    value: {
        type: import("vue").PropType<string | number | boolean>;
        default: string | number | boolean;
    };
    onChange: import("vue").PropType<(checked: boolean, context: {
        e: Event;
    }) => void>;
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    name: string;
    value: string | number | boolean;
    disabled: boolean;
    readonly: boolean;
    checked: boolean;
    modelValue: boolean;
    allowUncheck: boolean;
    defaultChecked: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const RadioGroup: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        allowUncheck: BooleanConstructor;
        disabled: BooleanConstructor;
        name: {
            type: StringConstructor;
            default: string;
        };
        options: {
            type: import("vue").PropType<import("./type").RadioOption[]>;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").RadioValue>;
            default: import("./type").RadioValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").RadioValue>;
            default: import("./type").RadioValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").RadioValue>;
        };
        variant: {
            type: import("vue").PropType<"outline" | "primary-filled" | "default-filled">;
            default: "outline" | "primary-filled" | "default-filled";
            validator(val: "outline" | "primary-filled" | "default-filled"): boolean;
        };
        onChange: import("vue").PropType<(value: import("./type").RadioValue, context: {
            e: Event;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        allowUncheck: BooleanConstructor;
        disabled: BooleanConstructor;
        name: {
            type: StringConstructor;
            default: string;
        };
        options: {
            type: import("vue").PropType<import("./type").RadioOption[]>;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").RadioValue>;
            default: import("./type").RadioValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").RadioValue>;
            default: import("./type").RadioValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").RadioValue>;
        };
        variant: {
            type: import("vue").PropType<"outline" | "primary-filled" | "default-filled">;
            default: "outline" | "primary-filled" | "default-filled";
            validator(val: "outline" | "primary-filled" | "default-filled"): boolean;
        };
        onChange: import("vue").PropType<(value: import("./type").RadioValue, context: {
            e: Event;
        }) => void>;
    }>>, {
        name: string;
        value: import("./type").RadioValue;
        disabled: boolean;
        size: import("..").SizeEnum;
        modelValue: import("./type").RadioValue;
        allowUncheck: boolean;
        variant: "outline" | "primary-filled" | "default-filled";
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        allowUncheck: BooleanConstructor;
        disabled: BooleanConstructor;
        name: {
            type: StringConstructor;
            default: string;
        };
        options: {
            type: import("vue").PropType<import("./type").RadioOption[]>;
        };
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").RadioValue>;
            default: import("./type").RadioValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").RadioValue>;
            default: import("./type").RadioValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").RadioValue>;
        };
        variant: {
            type: import("vue").PropType<"outline" | "primary-filled" | "default-filled">;
            default: "outline" | "primary-filled" | "default-filled";
            validator(val: "outline" | "primary-filled" | "default-filled"): boolean;
        };
        onChange: import("vue").PropType<(value: import("./type").RadioValue, context: {
            e: Event;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        name: string;
        value: import("./type").RadioValue;
        disabled: boolean;
        size: import("..").SizeEnum;
        modelValue: import("./type").RadioValue;
        allowUncheck: boolean;
        variant: "outline" | "primary-filled" | "default-filled";
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    allowUncheck: BooleanConstructor;
    disabled: BooleanConstructor;
    name: {
        type: StringConstructor;
        default: string;
    };
    options: {
        type: import("vue").PropType<import("./type").RadioOption[]>;
    };
    size: {
        type: import("vue").PropType<import("..").SizeEnum>;
        default: import("..").SizeEnum;
        validator(val: import("..").SizeEnum): boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").RadioValue>;
        default: import("./type").RadioValue;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").RadioValue>;
        default: import("./type").RadioValue;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").RadioValue>;
    };
    variant: {
        type: import("vue").PropType<"outline" | "primary-filled" | "default-filled">;
        default: "outline" | "primary-filled" | "default-filled";
        validator(val: "outline" | "primary-filled" | "default-filled"): boolean;
    };
    onChange: import("vue").PropType<(value: import("./type").RadioValue, context: {
        e: Event;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    name: string;
    value: import("./type").RadioValue;
    disabled: boolean;
    size: import("..").SizeEnum;
    modelValue: import("./type").RadioValue;
    allowUncheck: boolean;
    variant: "outline" | "primary-filled" | "default-filled";
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const RadioButton: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        allowUncheck: BooleanConstructor;
        checked: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultChecked: BooleanConstructor;
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        readonly: BooleanConstructor;
        value: {
            type: import("vue").PropType<string | number | boolean>;
            default: string | number | boolean;
        };
        onChange: import("vue").PropType<(checked: boolean, context: {
            e: Event;
        }) => void>;
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        allowUncheck: BooleanConstructor;
        checked: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultChecked: BooleanConstructor;
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        readonly: BooleanConstructor;
        value: {
            type: import("vue").PropType<string | number | boolean>;
            default: string | number | boolean;
        };
        onChange: import("vue").PropType<(checked: boolean, context: {
            e: Event;
        }) => void>;
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
    }>>, {
        name: string;
        value: string | number | boolean;
        disabled: boolean;
        readonly: boolean;
        checked: boolean;
        modelValue: boolean;
        allowUncheck: boolean;
        defaultChecked: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        allowUncheck: BooleanConstructor;
        checked: {
            type: BooleanConstructor;
            default: any;
        };
        modelValue: {
            type: BooleanConstructor;
            default: any;
        };
        defaultChecked: BooleanConstructor;
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        readonly: BooleanConstructor;
        value: {
            type: import("vue").PropType<string | number | boolean>;
            default: string | number | boolean;
        };
        onChange: import("vue").PropType<(checked: boolean, context: {
            e: Event;
        }) => void>;
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        name: string;
        value: string | number | boolean;
        disabled: boolean;
        readonly: boolean;
        checked: boolean;
        modelValue: boolean;
        allowUncheck: boolean;
        defaultChecked: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    allowUncheck: BooleanConstructor;
    checked: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultChecked: BooleanConstructor;
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    readonly: BooleanConstructor;
    value: {
        type: import("vue").PropType<string | number | boolean>;
        default: string | number | boolean;
    };
    onChange: import("vue").PropType<(checked: boolean, context: {
        e: Event;
    }) => void>;
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    name: string;
    value: string | number | boolean;
    disabled: boolean;
    readonly: boolean;
    checked: boolean;
    modelValue: boolean;
    allowUncheck: boolean;
    defaultChecked: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Radio;
