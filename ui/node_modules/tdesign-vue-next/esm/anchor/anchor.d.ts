import { ComponentPublicInstance } from 'vue';
import { ANCHOR_CONTAINER } from './utils';
import { SlotReturnValue } from '../common';
export interface Anchor extends ComponentPublicInstance {
    scrollContainer: ANCHOR_CONTAINER;
    handleScrollLock: boolean;
}
declare const _default: import("vue").DefineComponent<{
    affixProps: {
        type: import("vue").PropType<import("../affix").TdAffixProps>;
    };
    bounds: {
        type: NumberConstructor;
        default: number;
    };
    container: {
        type: import("vue").PropType<import("../common").ScrollContainer>;
        default: () => () => Window & typeof globalThis;
    };
    cursor: {
        type: import("vue").PropType<(h: typeof import("vue").h) => SlotReturnValue>;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    targetOffset: {
        type: NumberConstructor;
        default: number;
    };
    onChange: import("vue").PropType<(currentLink: string, prevLink: string) => void>;
    onClick: import("vue").PropType<(link: {
        href: string;
        title: string;
        e: MouseEvent;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    affixProps: {
        type: import("vue").PropType<import("../affix").TdAffixProps>;
    };
    bounds: {
        type: NumberConstructor;
        default: number;
    };
    container: {
        type: import("vue").PropType<import("../common").ScrollContainer>;
        default: () => () => Window & typeof globalThis;
    };
    cursor: {
        type: import("vue").PropType<(h: typeof import("vue").h) => SlotReturnValue>;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    targetOffset: {
        type: NumberConstructor;
        default: number;
    };
    onChange: import("vue").PropType<(currentLink: string, prevLink: string) => void>;
    onClick: import("vue").PropType<(link: {
        href: string;
        title: string;
        e: MouseEvent;
    }) => void>;
}>>, {
    size: "small" | "medium" | "large";
    container: import("../common").ScrollContainer;
    bounds: number;
    targetOffset: number;
}, {}>;
export default _default;
