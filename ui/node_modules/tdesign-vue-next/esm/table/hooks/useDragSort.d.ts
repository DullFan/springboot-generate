import { SetupContext, h, ComputedRef } from 'vue';
import { TdPrimaryTableProps } from '../type';
import { BaseTableColumns } from '../interface';
export default function useDragSort(props: TdPrimaryTableProps, context: SetupContext, params: ComputedRef<{
    showElement: boolean;
}>): {
    innerPagination: import("vue").Ref<{
        current?: number;
        defaultCurrent?: number;
        modelValue?: number;
        disabled?: boolean;
        foldedMaxPageBtn?: number;
        maxPageBtn?: number;
        pageEllipsisMode?: "mid" | "both-ends";
        pageSize?: number;
        defaultPageSize?: number;
        pageSizeOptions?: (number | {
            label: string;
            value: number;
        })[];
        selectProps?: {
            autoWidth?: boolean;
            autofocus?: boolean;
            borderless?: boolean;
            clearable?: boolean;
            collapsedItems?: (h: typeof h, props: {
                value: import("../..").SelectOption[];
                collapsedSelectedItems: import("../..").SelectOption[];
                count: number;
                onClose: (context: {
                    index: number;
                    e?: MouseEvent;
                }) => void;
            }) => import("../..").SlotReturnValue;
            creatable?: boolean;
            disabled?: boolean;
            empty?: string | ((h: typeof h) => import("../..").SlotReturnValue);
            filter?: (filterWords: string, option: import("../..").SelectOption) => boolean | Promise<boolean>;
            filterable?: boolean;
            inputProps?: {
                align?: "center" | "left" | "right";
                allowInputOverMax?: boolean;
                autoWidth?: boolean;
                autocomplete?: string;
                autofocus?: boolean;
                borderless?: boolean;
                clearable?: boolean;
                disabled?: boolean;
                format?: import("../..").InputFormatType;
                inputClass?: string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | any[] | {
                    [className: string]: any;
                })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                label?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                maxcharacter?: number;
                maxlength?: string | number;
                name?: string;
                placeholder?: string;
                prefixIcon?: (h: typeof h) => import("../..").SlotReturnValue;
                readonly?: boolean;
                showClearIconOnEmpty?: boolean;
                showLimitNumber?: boolean;
                size?: import("../..").SizeEnum;
                status?: "error" | "default" | "success" | "warning";
                suffix?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                suffixIcon?: (h: typeof h) => import("../..").SlotReturnValue;
                tips?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                type?: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
                value?: import("../..").InputValue;
                defaultValue?: import("../..").InputValue;
                modelValue?: import("../..").InputValue;
                onBlur?: (value: import("../..").InputValue, context: {
                    e: FocusEvent;
                }) => void;
                onChange?: (value: import("../..").InputValue, context?: {
                    e?: MouseEvent | CompositionEvent | InputEvent;
                    trigger: "input" | "clear" | "initial";
                }) => void;
                onClear?: (context: {
                    e: MouseEvent;
                }) => void;
                onClick?: (context: {
                    e: MouseEvent;
                }) => void;
                onCompositionend?: (value: string, context: {
                    e: CompositionEvent;
                }) => void;
                onCompositionstart?: (value: string, context: {
                    e: CompositionEvent;
                }) => void;
                onEnter?: (value: import("../..").InputValue, context: {
                    e: KeyboardEvent;
                }) => void;
                onFocus?: (value: import("../..").InputValue, context: {
                    e: FocusEvent;
                }) => void;
                onKeydown?: (value: import("../..").InputValue, context: {
                    e: KeyboardEvent;
                }) => void;
                onKeypress?: (value: import("../..").InputValue, context: {
                    e: KeyboardEvent;
                }) => void;
                onKeyup?: (value: import("../..").InputValue, context: {
                    e: KeyboardEvent;
                }) => void;
                onMouseenter?: (context: {
                    e: MouseEvent;
                }) => void;
                onMouseleave?: (context: {
                    e: MouseEvent;
                }) => void;
                onPaste?: (context: {
                    e: ClipboardEvent;
                    pasteValue: string;
                }) => void;
                onValidate?: (context: {
                    error?: "exceed-maximum" | "below-minimum";
                }) => void;
                onWheel?: (context: {
                    e: WheelEvent;
                }) => void;
            };
            inputValue?: string;
            defaultInputValue?: string;
            keys?: {
                value?: string;
                label?: string;
                disabled?: string;
            };
            label?: string | ((h: typeof h) => import("../..").SlotReturnValue);
            loading?: boolean;
            loadingText?: string | ((h: typeof h) => import("../..").SlotReturnValue);
            max?: number;
            minCollapsedNum?: number;
            multiple?: boolean;
            options?: (import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            })[];
            panelBottomContent?: string | ((h: typeof h) => import("../..").SlotReturnValue);
            panelTopContent?: string | ((h: typeof h) => import("../..").SlotReturnValue);
            placeholder?: string;
            popupProps?: {
                attach?: import("../..").AttachNode;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                delay?: number | number[];
                destroyOnClose?: boolean;
                disabled?: boolean;
                hideEmptyPopup?: boolean;
                overlayClassName?: string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | any[] | {
                    [className: string]: any;
                })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                overlayInnerClassName?: string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | any[] | {
                    [className: string]: any;
                })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                overlayInnerStyle?: import("../..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../..").Styles);
                overlayStyle?: import("../..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../..").Styles);
                placement?: import("../..").PopupPlacement;
                popperOptions?: object;
                showArrow?: boolean;
                trigger?: "click" | "focus" | "mousedown" | "context-menu" | "hover";
                triggerElement?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                visible?: boolean;
                defaultVisible?: boolean;
                modelValue?: boolean;
                zIndex?: number;
                onOverlayClick?: (context: {
                    e: MouseEvent;
                }) => void;
                onScroll?: (context: {
                    e: WheelEvent;
                }) => void;
                onScrollToBottom?: (context: {
                    e: WheelEvent;
                }) => void;
                onVisibleChange?: (visible: boolean, context: import("../..").PopupVisibleChangeContext) => void;
            };
            popupVisible?: boolean;
            defaultPopupVisible?: boolean;
            prefixIcon?: (h: typeof h) => import("../..").SlotReturnValue;
            readonly?: boolean;
            reserveKeyword?: boolean;
            scroll?: {
                bufferSize?: number;
                isFixedRowHeight?: boolean;
                rowHeight?: number;
                threshold?: number;
                type: "lazy" | "virtual";
            };
            selectInputProps?: {
                allowInput?: boolean;
                autoWidth?: boolean;
                autofocus?: boolean;
                borderless?: boolean;
                clearable?: boolean;
                collapsedItems?: (h: typeof h, props: {
                    value: import("../..").SelectInputValue;
                    collapsedSelectedItems: import("../..").SelectInputValue;
                    count: number;
                    onClose: (context: {
                        index: number;
                        e?: MouseEvent;
                    }) => void;
                }) => import("../..").SlotReturnValue;
                disabled?: boolean;
                inputProps?: {
                    align?: "center" | "left" | "right";
                    allowInputOverMax?: boolean;
                    autoWidth?: boolean;
                    autocomplete?: string;
                    autofocus?: boolean;
                    borderless?: boolean;
                    clearable?: boolean;
                    disabled?: boolean;
                    format?: import("../..").InputFormatType;
                    inputClass?: string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | any[] | {
                        [className: string]: any;
                    })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                    label?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    maxcharacter?: number;
                    maxlength?: string | number;
                    name?: string;
                    placeholder?: string;
                    prefixIcon?: (h: typeof h) => import("../..").SlotReturnValue;
                    readonly?: boolean;
                    showClearIconOnEmpty?: boolean;
                    showLimitNumber?: boolean;
                    size?: import("../..").SizeEnum;
                    status?: "error" | "default" | "success" | "warning";
                    suffix?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    suffixIcon?: (h: typeof h) => import("../..").SlotReturnValue;
                    tips?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    type?: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
                    value?: import("../..").InputValue;
                    defaultValue?: import("../..").InputValue;
                    modelValue?: import("../..").InputValue;
                    onBlur?: (value: import("../..").InputValue, context: {
                        e: FocusEvent;
                    }) => void;
                    onChange?: (value: import("../..").InputValue, context?: {
                        e?: MouseEvent | CompositionEvent | InputEvent;
                        trigger: "input" | "clear" | "initial";
                    }) => void;
                    onClear?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onCompositionend?: (value: string, context: {
                        e: CompositionEvent;
                    }) => void;
                    onCompositionstart?: (value: string, context: {
                        e: CompositionEvent;
                    }) => void;
                    onEnter?: (value: import("../..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onFocus?: (value: import("../..").InputValue, context: {
                        e: FocusEvent;
                    }) => void;
                    onKeydown?: (value: import("../..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onKeypress?: (value: import("../..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onKeyup?: (value: import("../..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onMouseenter?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onMouseleave?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onPaste?: (context: {
                        e: ClipboardEvent;
                        pasteValue: string;
                    }) => void;
                    onValidate?: (context: {
                        error?: "exceed-maximum" | "below-minimum";
                    }) => void;
                    onWheel?: (context: {
                        e: WheelEvent;
                    }) => void;
                };
                inputValue?: string;
                defaultInputValue?: string;
                keys?: {
                    label?: string;
                    value?: string;
                    children?: string;
                };
                label?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                loading?: boolean;
                minCollapsedNum?: number;
                multiple?: boolean;
                panel?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                placeholder?: string;
                popupProps?: {
                    attach?: import("../..").AttachNode;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    delay?: number | number[];
                    destroyOnClose?: boolean;
                    disabled?: boolean;
                    hideEmptyPopup?: boolean;
                    overlayClassName?: string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | any[] | {
                        [className: string]: any;
                    })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                    overlayInnerClassName?: string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | any[] | {
                        [className: string]: any;
                    })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                    overlayInnerStyle?: import("../..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../..").Styles);
                    overlayStyle?: import("../..").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../..").Styles);
                    placement?: import("../..").PopupPlacement;
                    popperOptions?: object;
                    showArrow?: boolean;
                    trigger?: "click" | "focus" | "mousedown" | "context-menu" | "hover";
                    triggerElement?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    visible?: boolean;
                    defaultVisible?: boolean;
                    modelValue?: boolean;
                    zIndex?: number;
                    onOverlayClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onScroll?: (context: {
                        e: WheelEvent;
                    }) => void;
                    onScrollToBottom?: (context: {
                        e: WheelEvent;
                    }) => void;
                    onVisibleChange?: (visible: boolean, context: import("../..").PopupVisibleChangeContext) => void;
                };
                popupVisible?: boolean;
                defaultPopupVisible?: boolean;
                readonly?: boolean;
                reserveKeyword?: boolean;
                status?: "error" | "default" | "success" | "warning";
                suffix?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                suffixIcon?: (h: typeof h) => import("../..").SlotReturnValue;
                tag?: string | ((h: typeof h, props: {
                    value: string | number;
                }) => import("../..").SlotReturnValue);
                tagInputProps?: {
                    autoWidth?: boolean;
                    clearable?: boolean;
                    collapsedItems?: (h: typeof h, props: {
                        value: import("../..").TagInputValue;
                        collapsedSelectedItems: import("../..").TagInputValue;
                        count: number;
                        onClose: (context: {
                            index: number;
                            e?: MouseEvent;
                        }) => void;
                    }) => import("../..").SlotReturnValue;
                    disabled?: boolean;
                    dragSort?: boolean;
                    excessTagsDisplayType?: "scroll" | "break-line";
                    inputProps?: {
                        align?: "center" | "left" | "right";
                        allowInputOverMax?: boolean;
                        autoWidth?: boolean;
                        autocomplete?: string;
                        autofocus?: boolean;
                        borderless?: boolean;
                        clearable?: boolean;
                        disabled?: boolean;
                        format?: import("../..").InputFormatType;
                        inputClass?: string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | any[] | {
                            [className: string]: any;
                        })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                        label?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                        maxcharacter?: number;
                        maxlength?: string | number;
                        name?: string;
                        placeholder?: string;
                        prefixIcon?: (h: typeof h) => import("../..").SlotReturnValue;
                        readonly?: boolean;
                        showClearIconOnEmpty?: boolean;
                        showLimitNumber?: boolean;
                        size?: import("../..").SizeEnum;
                        status?: "error" | "default" | "success" | "warning";
                        suffix?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                        suffixIcon?: (h: typeof h) => import("../..").SlotReturnValue;
                        tips?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                        type?: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
                        value?: import("../..").InputValue;
                        defaultValue?: import("../..").InputValue;
                        modelValue?: import("../..").InputValue;
                        onBlur?: (value: import("../..").InputValue, context: {
                            e: FocusEvent;
                        }) => void;
                        onChange?: (value: import("../..").InputValue, context?: {
                            e?: MouseEvent | CompositionEvent | InputEvent;
                            trigger: "input" | "clear" | "initial";
                        }) => void;
                        onClear?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onCompositionend?: (value: string, context: {
                            e: CompositionEvent;
                        }) => void;
                        onCompositionstart?: (value: string, context: {
                            e: CompositionEvent;
                        }) => void;
                        onEnter?: (value: import("../..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onFocus?: (value: import("../..").InputValue, context: {
                            e: FocusEvent;
                        }) => void;
                        onKeydown?: (value: import("../..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onKeypress?: (value: import("../..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onKeyup?: (value: import("../..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onMouseenter?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onMouseleave?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onPaste?: (context: {
                            e: ClipboardEvent;
                            pasteValue: string;
                        }) => void;
                        onValidate?: (context: {
                            error?: "exceed-maximum" | "below-minimum";
                        }) => void;
                        onWheel?: (context: {
                            e: WheelEvent;
                        }) => void;
                    };
                    inputValue?: string;
                    defaultInputValue?: string;
                    label?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    max?: number;
                    minCollapsedNum?: number;
                    placeholder?: string;
                    prefixIcon?: (h: typeof h) => import("../..").SlotReturnValue;
                    readonly?: boolean;
                    size?: "small" | "medium" | "large";
                    status?: "error" | "default" | "success" | "warning";
                    suffix?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    suffixIcon?: (h: typeof h) => import("../..").SlotReturnValue;
                    tag?: string | ((h: typeof h, props: {
                        value: string | number;
                    }) => import("../..").SlotReturnValue);
                    tagProps?: {
                        closable?: boolean;
                        color?: string;
                        content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                        default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                        disabled?: boolean;
                        icon?: (h: typeof h) => import("../..").SlotReturnValue;
                        maxWidth?: string | number;
                        shape?: "square" | "round" | "mark";
                        size?: import("../..").SizeEnum;
                        theme?: "default" | "success" | "primary" | "warning" | "danger";
                        variant?: "outline" | "dark" | "light" | "light-outline";
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClose?: (context: {
                            e: MouseEvent;
                        }) => void;
                    };
                    tips?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    value?: (string | number)[];
                    defaultValue?: (string | number)[];
                    modelValue?: (string | number)[];
                    valueDisplay?: string | ((h: typeof h, props: {
                        value: import("../..").TagInputValue;
                        onClose: (index: number, item?: any) => void;
                    }) => import("../..").SlotReturnValue);
                    onBlur?: (value: import("../..").TagInputValue, context: {
                        inputValue: string;
                        e: FocusEvent;
                    }) => void;
                    onChange?: (value: import("../..").TagInputValue, context: import("../..").TagInputChangeContext) => void;
                    onClear?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onDragSort?: (context: import("../..").TagInputDragSortContext) => void;
                    onEnter?: (value: import("../..").TagInputValue, context: {
                        e: KeyboardEvent;
                        inputValue: string;
                    }) => void;
                    onFocus?: (value: import("../..").TagInputValue, context: {
                        inputValue: string;
                        e: FocusEvent;
                    }) => void;
                    onInputChange?: (value: string, context?: import("../..").InputValueChangeContext) => void;
                    onMouseenter?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onMouseleave?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onPaste?: (context: {
                        e: ClipboardEvent;
                        pasteValue: string;
                    }) => void;
                    onRemove?: (context: import("../..").TagInputRemoveContext) => void;
                };
                tagProps?: {
                    closable?: boolean;
                    color?: string;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    icon?: (h: typeof h) => import("../..").SlotReturnValue;
                    maxWidth?: string | number;
                    shape?: "square" | "round" | "mark";
                    size?: import("../..").SizeEnum;
                    theme?: "default" | "success" | "primary" | "warning" | "danger";
                    variant?: "outline" | "dark" | "light" | "light-outline";
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClose?: (context: {
                        e: MouseEvent;
                    }) => void;
                };
                tips?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                value?: string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                valueDisplay?: string | ((h: typeof h, props: {
                    value: import("../..").TagInputValue;
                    onClose: (index: number, item?: any) => void;
                }) => import("../..").SlotReturnValue);
                onBlur?: (value: import("../..").SelectInputValue, context: import("../..").SelectInputBlurContext) => void;
                onClear?: (context: {
                    e: MouseEvent;
                }) => void;
                onEnter?: (value: import("../..").SelectInputValue, context: {
                    e: KeyboardEvent;
                    inputValue: string;
                    tagInputValue?: import("../..").TagInputValue;
                }) => void;
                onFocus?: (value: import("../..").SelectInputValue, context: import("../..").SelectInputFocusContext) => void;
                onInputChange?: (value: string, context?: import("../..").SelectInputValueChangeContext) => void;
                onMouseenter?: (context: {
                    e: MouseEvent;
                }) => void;
                onMouseleave?: (context: {
                    e: MouseEvent;
                }) => void;
                onPaste?: (context: {
                    e: ClipboardEvent;
                    pasteValue: string;
                }) => void;
                onPopupVisibleChange?: (visible: boolean, context: import("../..").PopupVisibleChangeContext) => void;
                onTagChange?: (value: import("../..").TagInputValue, context: import("../..").TagInputChangeContext) => void;
            };
            showArrow?: boolean;
            size?: import("../..").SizeEnum;
            status?: "error" | "default" | "success" | "warning";
            suffix?: string | ((h: typeof h) => import("../..").SlotReturnValue);
            suffixIcon?: (h: typeof h) => import("../..").SlotReturnValue;
            tagInputProps?: {
                autoWidth?: boolean;
                clearable?: boolean;
                collapsedItems?: (h: typeof h, props: {
                    value: import("../..").TagInputValue;
                    collapsedSelectedItems: import("../..").TagInputValue;
                    count: number;
                    onClose: (context: {
                        index: number;
                        e?: MouseEvent;
                    }) => void;
                }) => import("../..").SlotReturnValue;
                disabled?: boolean;
                dragSort?: boolean;
                excessTagsDisplayType?: "scroll" | "break-line";
                inputProps?: {
                    align?: "center" | "left" | "right";
                    allowInputOverMax?: boolean;
                    autoWidth?: boolean;
                    autocomplete?: string;
                    autofocus?: boolean;
                    borderless?: boolean;
                    clearable?: boolean;
                    disabled?: boolean;
                    format?: import("../..").InputFormatType;
                    inputClass?: string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | any[] | {
                        [className: string]: any;
                    })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                    label?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    maxcharacter?: number;
                    maxlength?: string | number;
                    name?: string;
                    placeholder?: string;
                    prefixIcon?: (h: typeof h) => import("../..").SlotReturnValue;
                    readonly?: boolean;
                    showClearIconOnEmpty?: boolean;
                    showLimitNumber?: boolean;
                    size?: import("../..").SizeEnum;
                    status?: "error" | "default" | "success" | "warning";
                    suffix?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    suffixIcon?: (h: typeof h) => import("../..").SlotReturnValue;
                    tips?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    type?: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
                    value?: import("../..").InputValue;
                    defaultValue?: import("../..").InputValue;
                    modelValue?: import("../..").InputValue;
                    onBlur?: (value: import("../..").InputValue, context: {
                        e: FocusEvent;
                    }) => void;
                    onChange?: (value: import("../..").InputValue, context?: {
                        e?: MouseEvent | CompositionEvent | InputEvent;
                        trigger: "input" | "clear" | "initial";
                    }) => void;
                    onClear?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onCompositionend?: (value: string, context: {
                        e: CompositionEvent;
                    }) => void;
                    onCompositionstart?: (value: string, context: {
                        e: CompositionEvent;
                    }) => void;
                    onEnter?: (value: import("../..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onFocus?: (value: import("../..").InputValue, context: {
                        e: FocusEvent;
                    }) => void;
                    onKeydown?: (value: import("../..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onKeypress?: (value: import("../..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onKeyup?: (value: import("../..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onMouseenter?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onMouseleave?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onPaste?: (context: {
                        e: ClipboardEvent;
                        pasteValue: string;
                    }) => void;
                    onValidate?: (context: {
                        error?: "exceed-maximum" | "below-minimum";
                    }) => void;
                    onWheel?: (context: {
                        e: WheelEvent;
                    }) => void;
                };
                inputValue?: string;
                defaultInputValue?: string;
                label?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                max?: number;
                minCollapsedNum?: number;
                placeholder?: string;
                prefixIcon?: (h: typeof h) => import("../..").SlotReturnValue;
                readonly?: boolean;
                size?: "small" | "medium" | "large";
                status?: "error" | "default" | "success" | "warning";
                suffix?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                suffixIcon?: (h: typeof h) => import("../..").SlotReturnValue;
                tag?: string | ((h: typeof h, props: {
                    value: string | number;
                }) => import("../..").SlotReturnValue);
                tagProps?: {
                    closable?: boolean;
                    color?: string;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    icon?: (h: typeof h) => import("../..").SlotReturnValue;
                    maxWidth?: string | number;
                    shape?: "square" | "round" | "mark";
                    size?: import("../..").SizeEnum;
                    theme?: "default" | "success" | "primary" | "warning" | "danger";
                    variant?: "outline" | "dark" | "light" | "light-outline";
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClose?: (context: {
                        e: MouseEvent;
                    }) => void;
                };
                tips?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                value?: (string | number)[];
                defaultValue?: (string | number)[];
                modelValue?: (string | number)[];
                valueDisplay?: string | ((h: typeof h, props: {
                    value: import("../..").TagInputValue;
                    onClose: (index: number, item?: any) => void;
                }) => import("../..").SlotReturnValue);
                onBlur?: (value: import("../..").TagInputValue, context: {
                    inputValue: string;
                    e: FocusEvent;
                }) => void;
                onChange?: (value: import("../..").TagInputValue, context: import("../..").TagInputChangeContext) => void;
                onClear?: (context: {
                    e: MouseEvent;
                }) => void;
                onClick?: (context: {
                    e: MouseEvent;
                }) => void;
                onDragSort?: (context: import("../..").TagInputDragSortContext) => void;
                onEnter?: (value: import("../..").TagInputValue, context: {
                    e: KeyboardEvent;
                    inputValue: string;
                }) => void;
                onFocus?: (value: import("../..").TagInputValue, context: {
                    inputValue: string;
                    e: FocusEvent;
                }) => void;
                onInputChange?: (value: string, context?: import("../..").InputValueChangeContext) => void;
                onMouseenter?: (context: {
                    e: MouseEvent;
                }) => void;
                onMouseleave?: (context: {
                    e: MouseEvent;
                }) => void;
                onPaste?: (context: {
                    e: ClipboardEvent;
                    pasteValue: string;
                }) => void;
                onRemove?: (context: import("../..").TagInputRemoveContext) => void;
            };
            tagProps?: {
                closable?: boolean;
                color?: string;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                icon?: (h: typeof h) => import("../..").SlotReturnValue;
                maxWidth?: string | number;
                shape?: "square" | "round" | "mark";
                size?: import("../..").SizeEnum;
                theme?: "default" | "success" | "primary" | "warning" | "danger";
                variant?: "outline" | "dark" | "light" | "light-outline";
                onClick?: (context: {
                    e: MouseEvent;
                }) => void;
                onClose?: (context: {
                    e: MouseEvent;
                }) => void;
            };
            tips?: string | ((h: typeof h) => import("../..").SlotReturnValue);
            value?: string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | any[] | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
            defaultValue?: string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | any[] | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
            modelValue?: string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | any[] | import("../..").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    default?: string | ((h: typeof h) => import("../..").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
            valueDisplay?: string | ((h: typeof h, props: {
                value: import("../..").SelectValue<import("../..").SelectOption>;
                onClose: (index: number) => void;
                displayValue?: import("../..").SelectValue<import("../..").SelectOption>;
            }) => import("../..").SlotReturnValue);
            valueType?: "object" | "value";
            onBlur?: (context: {
                value: import("../..").SelectValue<import("../..").SelectOption>;
                e: FocusEvent | KeyboardEvent;
            }) => void;
            onChange?: (value: import("../..").SelectValue<import("../..").SelectOption>, context: {
                option?: import("../..").SelectOption;
                selectedOptions: import("../..").SelectOption[];
                trigger: import("../..").SelectValueChangeTrigger;
                e?: MouseEvent | KeyboardEvent;
            }) => void;
            onClear?: (context: {
                e: MouseEvent;
            }) => void;
            onCreate?: (value: string | number) => void;
            onEnter?: (context: {
                inputValue: string;
                e: KeyboardEvent;
                value: import("../..").SelectValue<import("../..").SelectOption>;
            }) => void;
            onFocus?: (context: {
                value: import("../..").SelectValue<import("../..").SelectOption>;
                e: FocusEvent | KeyboardEvent;
            }) => void;
            onInputChange?: (value: string, context?: import("../..").SelectInputValueChangeContext) => void;
            onPopupVisibleChange?: (visible: boolean, context: import("../..").PopupVisibleChangeContext) => void;
            onRemove?: (options: import("../..").SelectRemoveContext<import("../..").SelectOption>) => void;
            onSearch?: (filterWords: string, context: {
                e: KeyboardEvent;
            }) => void;
        };
        showFirstAndLastPageBtn?: boolean;
        showJumper?: boolean;
        showPageNumber?: boolean;
        showPageSize?: boolean;
        showPreviousAndNextBtn?: boolean;
        size?: "small" | "medium";
        theme?: "default" | "simple";
        total?: number;
        totalContent?: boolean | ((h: typeof h) => import("../..").SlotReturnValue);
        onChange?: (pageInfo: import("../..").PageInfo) => void;
        onCurrentChange?: (current: number, pageInfo: import("../..").PageInfo) => void;
        onPageSizeChange?: (pageSize: number, pageInfo: import("../..").PageInfo) => void;
    }>;
    isRowDraggable: ComputedRef<boolean>;
    isRowHandlerDraggable: ComputedRef<boolean>;
    isColDraggable: ComputedRef<boolean>;
    setDragSortPrimaryTableRef: (primaryTableElement: any) => void;
    setDragSortColumns: (val: BaseTableColumns) => void;
};
