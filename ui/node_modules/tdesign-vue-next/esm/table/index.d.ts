/// <reference types="sortablejs" />
import { InfinityScroll } from '../common';
import { BaseTableInstanceFunctions, EnhancedTableInstanceFunctions, PrimaryTableInstanceFunctions } from './type';
import './style';
export * from './type';
export * from './interface';
export declare type AllTableInstanceFunctions = EnhancedTableInstanceFunctions & PrimaryTableInstanceFunctions & BaseTableInstanceFunctions;
export declare type TableScroll = InfinityScroll;
export declare const BaseTable: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        renderExpandedRow: import("vue").PropType<(params: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
        onLeafColumnsChange: import("vue").PropType<(columns: import("./interface").BaseTableColumns) => void>;
        thDraggable: BooleanConstructor;
        activeRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        activeRowType: {
            type: import("vue").PropType<"multiple" | "single">;
            default: "multiple" | "single";
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("../common").AttachNode>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        };
        columns: {
            type: import("vue").PropType<import("./type").BaseTableCol<import("./type").TableRowData>[]>;
            default: () => import("./type").BaseTableCol<import("./type").TableRowData>[];
        };
        data: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        firstFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        fixedRows: {
            type: import("vue").PropType<number[]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        footerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        footerSummary: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        headerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        height: {
            type: import("vue").PropType<string | number>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        loadingProps: {
            type: import("vue").PropType<Partial<import("..").TdLoadingProps>>;
        };
        locale: {
            type: import("vue").PropType<import("..").TableConfig>;
        };
        maxHeight: {
            type: import("vue").PropType<string | number>;
        };
        pagination: {
            type: import("vue").PropType<import("..").TdPaginationProps>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
        };
        rowClassName: {
            type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        scroll: {
            type: import("vue").PropType<import("../common").TScroll>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            validator(val: import("../common").SizeEnum): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<"fixed" | "auto">;
            default: "fixed" | "auto";
            validator(val: "fixed" | "auto"): boolean;
        };
        topContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        verticalAlign: {
            type: import("vue").PropType<"top" | "bottom" | "middle">;
            default: "top" | "bottom" | "middle";
            validator(val: "top" | "bottom" | "middle"): boolean;
        };
        onActiveChange: import("vue").PropType<(activeRowKeys: (string | number)[], context: import("./type").ActiveChangeContext<import("./type").TableRowData>) => void>;
        onActiveRowAction: import("vue").PropType<(context: import("./type").ActiveRowActionContext<import("./type").TableRowData>) => void>;
        onCellClick: import("vue").PropType<(context: import("./type").BaseTableCellEventContext<import("./type").TableRowData>) => void>;
        onColumnResizeChange: import("vue").PropType<(context: {
            columnsWidth: {
                [colKey: string]: number;
            };
        }) => void>;
        onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
        onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onScroll: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollX: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollY: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
    }>> & {
        "onShow-element-change"?: (...args: any[]) => any;
    }, {
        thList: import("vue").ComputedRef<import("./interface").BaseTableColumns[]>;
        classPrefix: string;
        innerPagination: import("vue").Ref<{
            current?: number;
            defaultCurrent?: number;
            modelValue?: number;
            disabled?: boolean;
            foldedMaxPageBtn?: number;
            maxPageBtn?: number;
            pageEllipsisMode?: "mid" | "both-ends";
            pageSize?: number;
            defaultPageSize?: number;
            pageSizeOptions?: (number | {
                label: string;
                value: number;
            })[];
            selectProps?: {
                autoWidth?: boolean;
                autofocus?: boolean;
                borderless?: boolean;
                clearable?: boolean;
                collapsedItems?: (h: typeof import("vue").h, props: {
                    value: import("..").SelectOption[];
                    collapsedSelectedItems: import("..").SelectOption[];
                    count: number;
                    onClose: (context: {
                        index: number;
                        e?: MouseEvent;
                    }) => void;
                }) => import("../common").SlotReturnValue;
                creatable?: boolean;
                disabled?: boolean;
                empty?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                filter?: (filterWords: string, option: import("..").SelectOption) => boolean | Promise<boolean>;
                filterable?: boolean;
                inputProps?: {
                    align?: "center" | "left" | "right";
                    allowInputOverMax?: boolean;
                    autoWidth?: boolean;
                    autocomplete?: string;
                    autofocus?: boolean;
                    borderless?: boolean;
                    clearable?: boolean;
                    disabled?: boolean;
                    format?: import("..").InputFormatType;
                    inputClass?: string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | any[] | {
                        [className: string]: any;
                    })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                    label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    maxcharacter?: number;
                    maxlength?: string | number;
                    name?: string;
                    placeholder?: string;
                    prefixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                    readonly?: boolean;
                    showClearIconOnEmpty?: boolean;
                    showLimitNumber?: boolean;
                    size?: import("../common").SizeEnum;
                    status?: "error" | "default" | "success" | "warning";
                    suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                    tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    type?: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
                    value?: import("..").InputValue;
                    defaultValue?: import("..").InputValue;
                    modelValue?: import("..").InputValue;
                    onBlur?: (value: import("..").InputValue, context: {
                        e: FocusEvent;
                    }) => void;
                    onChange?: (value: import("..").InputValue, context?: {
                        e?: MouseEvent | CompositionEvent | InputEvent;
                        trigger: "input" | "clear" | "initial";
                    }) => void;
                    onClear?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onCompositionend?: (value: string, context: {
                        e: CompositionEvent;
                    }) => void;
                    onCompositionstart?: (value: string, context: {
                        e: CompositionEvent;
                    }) => void;
                    onEnter?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onFocus?: (value: import("..").InputValue, context: {
                        e: FocusEvent;
                    }) => void;
                    onKeydown?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onKeypress?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onKeyup?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onMouseenter?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onMouseleave?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onPaste?: (context: {
                        e: ClipboardEvent;
                        pasteValue: string;
                    }) => void;
                    onValidate?: (context: {
                        error?: "exceed-maximum" | "below-minimum";
                    }) => void;
                    onWheel?: (context: {
                        e: WheelEvent;
                    }) => void;
                };
                inputValue?: string;
                defaultInputValue?: string;
                keys?: {
                    value?: string;
                    label?: string;
                    disabled?: string;
                };
                label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                loading?: boolean;
                loadingText?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                max?: number;
                minCollapsedNum?: number;
                multiple?: boolean;
                options?: (import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                })[];
                panelBottomContent?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                panelTopContent?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                placeholder?: string;
                popupProps?: {
                    attach?: import("../common").AttachNode;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    delay?: number | number[];
                    destroyOnClose?: boolean;
                    disabled?: boolean;
                    hideEmptyPopup?: boolean;
                    overlayClassName?: string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | any[] | {
                        [className: string]: any;
                    })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                    overlayInnerClassName?: string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | any[] | {
                        [className: string]: any;
                    })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                    overlayInnerStyle?: import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles);
                    overlayStyle?: import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles);
                    placement?: import("..").PopupPlacement;
                    popperOptions?: object;
                    showArrow?: boolean;
                    trigger?: "click" | "focus" | "mousedown" | "context-menu" | "hover";
                    triggerElement?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    visible?: boolean;
                    defaultVisible?: boolean;
                    modelValue?: boolean;
                    zIndex?: number;
                    onOverlayClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onScroll?: (context: {
                        e: WheelEvent;
                    }) => void;
                    onScrollToBottom?: (context: {
                        e: WheelEvent;
                    }) => void;
                    onVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
                };
                popupVisible?: boolean;
                defaultPopupVisible?: boolean;
                prefixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                readonly?: boolean;
                reserveKeyword?: boolean;
                scroll?: {
                    bufferSize?: number;
                    isFixedRowHeight?: boolean;
                    rowHeight?: number;
                    threshold?: number;
                    type: "lazy" | "virtual";
                };
                selectInputProps?: {
                    allowInput?: boolean;
                    autoWidth?: boolean;
                    autofocus?: boolean;
                    borderless?: boolean;
                    clearable?: boolean;
                    collapsedItems?: (h: typeof import("vue").h, props: {
                        value: import("..").SelectInputValue;
                        collapsedSelectedItems: import("..").SelectInputValue;
                        count: number;
                        onClose: (context: {
                            index: number;
                            e?: MouseEvent;
                        }) => void;
                    }) => import("../common").SlotReturnValue;
                    disabled?: boolean;
                    inputProps?: {
                        align?: "center" | "left" | "right";
                        allowInputOverMax?: boolean;
                        autoWidth?: boolean;
                        autocomplete?: string;
                        autofocus?: boolean;
                        borderless?: boolean;
                        clearable?: boolean;
                        disabled?: boolean;
                        format?: import("..").InputFormatType;
                        inputClass?: string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | any[] | {
                            [className: string]: any;
                        })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                        label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        maxcharacter?: number;
                        maxlength?: string | number;
                        name?: string;
                        placeholder?: string;
                        prefixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                        readonly?: boolean;
                        showClearIconOnEmpty?: boolean;
                        showLimitNumber?: boolean;
                        size?: import("../common").SizeEnum;
                        status?: "error" | "default" | "success" | "warning";
                        suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                        tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        type?: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
                        value?: import("..").InputValue;
                        defaultValue?: import("..").InputValue;
                        modelValue?: import("..").InputValue;
                        onBlur?: (value: import("..").InputValue, context: {
                            e: FocusEvent;
                        }) => void;
                        onChange?: (value: import("..").InputValue, context?: {
                            e?: MouseEvent | CompositionEvent | InputEvent;
                            trigger: "input" | "clear" | "initial";
                        }) => void;
                        onClear?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onCompositionend?: (value: string, context: {
                            e: CompositionEvent;
                        }) => void;
                        onCompositionstart?: (value: string, context: {
                            e: CompositionEvent;
                        }) => void;
                        onEnter?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onFocus?: (value: import("..").InputValue, context: {
                            e: FocusEvent;
                        }) => void;
                        onKeydown?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onKeypress?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onKeyup?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onMouseenter?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onMouseleave?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onPaste?: (context: {
                            e: ClipboardEvent;
                            pasteValue: string;
                        }) => void;
                        onValidate?: (context: {
                            error?: "exceed-maximum" | "below-minimum";
                        }) => void;
                        onWheel?: (context: {
                            e: WheelEvent;
                        }) => void;
                    };
                    inputValue?: string;
                    defaultInputValue?: string;
                    keys?: {
                        label?: string;
                        value?: string;
                        children?: string;
                    };
                    label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    loading?: boolean;
                    minCollapsedNum?: number;
                    multiple?: boolean;
                    panel?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    placeholder?: string;
                    popupProps?: {
                        attach?: import("../common").AttachNode;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        delay?: number | number[];
                        destroyOnClose?: boolean;
                        disabled?: boolean;
                        hideEmptyPopup?: boolean;
                        overlayClassName?: string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | any[] | {
                            [className: string]: any;
                        })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                        overlayInnerClassName?: string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | any[] | {
                            [className: string]: any;
                        })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                        overlayInnerStyle?: import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles);
                        overlayStyle?: import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles);
                        placement?: import("..").PopupPlacement;
                        popperOptions?: object;
                        showArrow?: boolean;
                        trigger?: "click" | "focus" | "mousedown" | "context-menu" | "hover";
                        triggerElement?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        visible?: boolean;
                        defaultVisible?: boolean;
                        modelValue?: boolean;
                        zIndex?: number;
                        onOverlayClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onScroll?: (context: {
                            e: WheelEvent;
                        }) => void;
                        onScrollToBottom?: (context: {
                            e: WheelEvent;
                        }) => void;
                        onVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
                    };
                    popupVisible?: boolean;
                    defaultPopupVisible?: boolean;
                    readonly?: boolean;
                    reserveKeyword?: boolean;
                    status?: "error" | "default" | "success" | "warning";
                    suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                    tag?: string | ((h: typeof import("vue").h, props: {
                        value: string | number;
                    }) => import("../common").SlotReturnValue);
                    tagInputProps?: {
                        autoWidth?: boolean;
                        clearable?: boolean;
                        collapsedItems?: (h: typeof import("vue").h, props: {
                            value: import("..").TagInputValue;
                            collapsedSelectedItems: import("..").TagInputValue;
                            count: number;
                            onClose: (context: {
                                index: number;
                                e?: MouseEvent;
                            }) => void;
                        }) => import("../common").SlotReturnValue;
                        disabled?: boolean;
                        dragSort?: boolean;
                        excessTagsDisplayType?: "scroll" | "break-line";
                        inputProps?: {
                            align?: "center" | "left" | "right";
                            allowInputOverMax?: boolean;
                            autoWidth?: boolean;
                            autocomplete?: string;
                            autofocus?: boolean;
                            borderless?: boolean;
                            clearable?: boolean;
                            disabled?: boolean;
                            format?: import("..").InputFormatType;
                            inputClass?: string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | any[] | {
                                [className: string]: any;
                            })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                            label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                            maxcharacter?: number;
                            maxlength?: string | number;
                            name?: string;
                            placeholder?: string;
                            prefixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                            readonly?: boolean;
                            showClearIconOnEmpty?: boolean;
                            showLimitNumber?: boolean;
                            size?: import("../common").SizeEnum;
                            status?: "error" | "default" | "success" | "warning";
                            suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                            suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                            tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                            type?: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
                            value?: import("..").InputValue;
                            defaultValue?: import("..").InputValue;
                            modelValue?: import("..").InputValue;
                            onBlur?: (value: import("..").InputValue, context: {
                                e: FocusEvent;
                            }) => void;
                            onChange?: (value: import("..").InputValue, context?: {
                                e?: MouseEvent | CompositionEvent | InputEvent;
                                trigger: "input" | "clear" | "initial";
                            }) => void;
                            onClear?: (context: {
                                e: MouseEvent;
                            }) => void;
                            onClick?: (context: {
                                e: MouseEvent;
                            }) => void;
                            onCompositionend?: (value: string, context: {
                                e: CompositionEvent;
                            }) => void;
                            onCompositionstart?: (value: string, context: {
                                e: CompositionEvent;
                            }) => void;
                            onEnter?: (value: import("..").InputValue, context: {
                                e: KeyboardEvent;
                            }) => void;
                            onFocus?: (value: import("..").InputValue, context: {
                                e: FocusEvent;
                            }) => void;
                            onKeydown?: (value: import("..").InputValue, context: {
                                e: KeyboardEvent;
                            }) => void;
                            onKeypress?: (value: import("..").InputValue, context: {
                                e: KeyboardEvent;
                            }) => void;
                            onKeyup?: (value: import("..").InputValue, context: {
                                e: KeyboardEvent;
                            }) => void;
                            onMouseenter?: (context: {
                                e: MouseEvent;
                            }) => void;
                            onMouseleave?: (context: {
                                e: MouseEvent;
                            }) => void;
                            onPaste?: (context: {
                                e: ClipboardEvent;
                                pasteValue: string;
                            }) => void;
                            onValidate?: (context: {
                                error?: "exceed-maximum" | "below-minimum";
                            }) => void;
                            onWheel?: (context: {
                                e: WheelEvent;
                            }) => void;
                        };
                        inputValue?: string;
                        defaultInputValue?: string;
                        label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        max?: number;
                        minCollapsedNum?: number;
                        placeholder?: string;
                        prefixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                        readonly?: boolean;
                        size?: "small" | "medium" | "large";
                        status?: "error" | "default" | "success" | "warning";
                        suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                        tag?: string | ((h: typeof import("vue").h, props: {
                            value: string | number;
                        }) => import("../common").SlotReturnValue);
                        tagProps?: {
                            closable?: boolean;
                            color?: string;
                            content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                            default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                            disabled?: boolean;
                            icon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                            maxWidth?: string | number;
                            shape?: "square" | "round" | "mark";
                            size?: import("../common").SizeEnum;
                            theme?: "default" | "success" | "primary" | "warning" | "danger";
                            variant?: "outline" | "dark" | "light" | "light-outline";
                            onClick?: (context: {
                                e: MouseEvent;
                            }) => void;
                            onClose?: (context: {
                                e: MouseEvent;
                            }) => void;
                        };
                        tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        value?: (string | number)[];
                        defaultValue?: (string | number)[];
                        modelValue?: (string | number)[];
                        valueDisplay?: string | ((h: typeof import("vue").h, props: {
                            value: import("..").TagInputValue;
                            onClose: (index: number, item?: any) => void;
                        }) => import("../common").SlotReturnValue);
                        onBlur?: (value: import("..").TagInputValue, context: {
                            inputValue: string;
                            e: FocusEvent;
                        }) => void;
                        onChange?: (value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void;
                        onClear?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onDragSort?: (context: import("..").TagInputDragSortContext) => void;
                        onEnter?: (value: import("..").TagInputValue, context: {
                            e: KeyboardEvent;
                            inputValue: string;
                        }) => void;
                        onFocus?: (value: import("..").TagInputValue, context: {
                            inputValue: string;
                            e: FocusEvent;
                        }) => void;
                        onInputChange?: (value: string, context?: import("..").InputValueChangeContext) => void;
                        onMouseenter?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onMouseleave?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onPaste?: (context: {
                            e: ClipboardEvent;
                            pasteValue: string;
                        }) => void;
                        onRemove?: (context: import("..").TagInputRemoveContext) => void;
                    };
                    tagProps?: {
                        closable?: boolean;
                        color?: string;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        icon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                        maxWidth?: string | number;
                        shape?: "square" | "round" | "mark";
                        size?: import("../common").SizeEnum;
                        theme?: "default" | "success" | "primary" | "warning" | "danger";
                        variant?: "outline" | "dark" | "light" | "light-outline";
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClose?: (context: {
                            e: MouseEvent;
                        }) => void;
                    };
                    tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    value?: string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                    valueDisplay?: string | ((h: typeof import("vue").h, props: {
                        value: import("..").TagInputValue;
                        onClose: (index: number, item?: any) => void;
                    }) => import("../common").SlotReturnValue);
                    onBlur?: (value: import("..").SelectInputValue, context: import("..").SelectInputBlurContext) => void;
                    onClear?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onEnter?: (value: import("..").SelectInputValue, context: {
                        e: KeyboardEvent;
                        inputValue: string;
                        tagInputValue?: import("..").TagInputValue;
                    }) => void;
                    onFocus?: (value: import("..").SelectInputValue, context: import("..").SelectInputFocusContext) => void;
                    onInputChange?: (value: string, context?: import("..").SelectInputValueChangeContext) => void;
                    onMouseenter?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onMouseleave?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onPaste?: (context: {
                        e: ClipboardEvent;
                        pasteValue: string;
                    }) => void;
                    onPopupVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
                    onTagChange?: (value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void;
                };
                showArrow?: boolean;
                size?: import("../common").SizeEnum;
                status?: "error" | "default" | "success" | "warning";
                suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                tagInputProps?: {
                    autoWidth?: boolean;
                    clearable?: boolean;
                    collapsedItems?: (h: typeof import("vue").h, props: {
                        value: import("..").TagInputValue;
                        collapsedSelectedItems: import("..").TagInputValue;
                        count: number;
                        onClose: (context: {
                            index: number;
                            e?: MouseEvent;
                        }) => void;
                    }) => import("../common").SlotReturnValue;
                    disabled?: boolean;
                    dragSort?: boolean;
                    excessTagsDisplayType?: "scroll" | "break-line";
                    inputProps?: {
                        align?: "center" | "left" | "right";
                        allowInputOverMax?: boolean;
                        autoWidth?: boolean;
                        autocomplete?: string;
                        autofocus?: boolean;
                        borderless?: boolean;
                        clearable?: boolean;
                        disabled?: boolean;
                        format?: import("..").InputFormatType;
                        inputClass?: string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | any[] | {
                            [className: string]: any;
                        })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                        label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        maxcharacter?: number;
                        maxlength?: string | number;
                        name?: string;
                        placeholder?: string;
                        prefixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                        readonly?: boolean;
                        showClearIconOnEmpty?: boolean;
                        showLimitNumber?: boolean;
                        size?: import("../common").SizeEnum;
                        status?: "error" | "default" | "success" | "warning";
                        suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                        tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        type?: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
                        value?: import("..").InputValue;
                        defaultValue?: import("..").InputValue;
                        modelValue?: import("..").InputValue;
                        onBlur?: (value: import("..").InputValue, context: {
                            e: FocusEvent;
                        }) => void;
                        onChange?: (value: import("..").InputValue, context?: {
                            e?: MouseEvent | CompositionEvent | InputEvent;
                            trigger: "input" | "clear" | "initial";
                        }) => void;
                        onClear?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onCompositionend?: (value: string, context: {
                            e: CompositionEvent;
                        }) => void;
                        onCompositionstart?: (value: string, context: {
                            e: CompositionEvent;
                        }) => void;
                        onEnter?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onFocus?: (value: import("..").InputValue, context: {
                            e: FocusEvent;
                        }) => void;
                        onKeydown?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onKeypress?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onKeyup?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onMouseenter?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onMouseleave?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onPaste?: (context: {
                            e: ClipboardEvent;
                            pasteValue: string;
                        }) => void;
                        onValidate?: (context: {
                            error?: "exceed-maximum" | "below-minimum";
                        }) => void;
                        onWheel?: (context: {
                            e: WheelEvent;
                        }) => void;
                    };
                    inputValue?: string;
                    defaultInputValue?: string;
                    label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    max?: number;
                    minCollapsedNum?: number;
                    placeholder?: string;
                    prefixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                    readonly?: boolean;
                    size?: "small" | "medium" | "large";
                    status?: "error" | "default" | "success" | "warning";
                    suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                    tag?: string | ((h: typeof import("vue").h, props: {
                        value: string | number;
                    }) => import("../common").SlotReturnValue);
                    tagProps?: {
                        closable?: boolean;
                        color?: string;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        icon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                        maxWidth?: string | number;
                        shape?: "square" | "round" | "mark";
                        size?: import("../common").SizeEnum;
                        theme?: "default" | "success" | "primary" | "warning" | "danger";
                        variant?: "outline" | "dark" | "light" | "light-outline";
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClose?: (context: {
                            e: MouseEvent;
                        }) => void;
                    };
                    tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    value?: (string | number)[];
                    defaultValue?: (string | number)[];
                    modelValue?: (string | number)[];
                    valueDisplay?: string | ((h: typeof import("vue").h, props: {
                        value: import("..").TagInputValue;
                        onClose: (index: number, item?: any) => void;
                    }) => import("../common").SlotReturnValue);
                    onBlur?: (value: import("..").TagInputValue, context: {
                        inputValue: string;
                        e: FocusEvent;
                    }) => void;
                    onChange?: (value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void;
                    onClear?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onDragSort?: (context: import("..").TagInputDragSortContext) => void;
                    onEnter?: (value: import("..").TagInputValue, context: {
                        e: KeyboardEvent;
                        inputValue: string;
                    }) => void;
                    onFocus?: (value: import("..").TagInputValue, context: {
                        inputValue: string;
                        e: FocusEvent;
                    }) => void;
                    onInputChange?: (value: string, context?: import("..").InputValueChangeContext) => void;
                    onMouseenter?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onMouseleave?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onPaste?: (context: {
                        e: ClipboardEvent;
                        pasteValue: string;
                    }) => void;
                    onRemove?: (context: import("..").TagInputRemoveContext) => void;
                };
                tagProps?: {
                    closable?: boolean;
                    color?: string;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    icon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                    maxWidth?: string | number;
                    shape?: "square" | "round" | "mark";
                    size?: import("../common").SizeEnum;
                    theme?: "default" | "success" | "primary" | "warning" | "danger";
                    variant?: "outline" | "dark" | "light" | "light-outline";
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClose?: (context: {
                        e: MouseEvent;
                    }) => void;
                };
                tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                value?: string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | any[] | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                defaultValue?: string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | any[] | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                modelValue?: string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | any[] | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                valueDisplay?: string | ((h: typeof import("vue").h, props: {
                    value: import("..").SelectValue<import("..").SelectOption>;
                    onClose: (index: number) => void;
                    displayValue?: import("..").SelectValue<import("..").SelectOption>;
                }) => import("../common").SlotReturnValue);
                valueType?: "object" | "value";
                onBlur?: (context: {
                    value: import("..").SelectValue<import("..").SelectOption>;
                    e: FocusEvent | KeyboardEvent;
                }) => void;
                onChange?: (value: import("..").SelectValue<import("..").SelectOption>, context: {
                    option?: import("..").SelectOption;
                    selectedOptions: import("..").SelectOption[];
                    trigger: import("..").SelectValueChangeTrigger;
                    e?: MouseEvent | KeyboardEvent;
                }) => void;
                onClear?: (context: {
                    e: MouseEvent;
                }) => void;
                onCreate?: (value: string | number) => void;
                onEnter?: (context: {
                    inputValue: string;
                    e: KeyboardEvent;
                    value: import("..").SelectValue<import("..").SelectOption>;
                }) => void;
                onFocus?: (context: {
                    value: import("..").SelectValue<import("..").SelectOption>;
                    e: FocusEvent | KeyboardEvent;
                }) => void;
                onInputChange?: (value: string, context?: import("..").SelectInputValueChangeContext) => void;
                onPopupVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
                onRemove?: (options: import("..").SelectRemoveContext<import("..").SelectOption>) => void;
                onSearch?: (filterWords: string, context: {
                    e: KeyboardEvent;
                }) => void;
            };
            showFirstAndLastPageBtn?: boolean;
            showJumper?: boolean;
            showPageNumber?: boolean;
            showPageSize?: boolean;
            showPreviousAndNextBtn?: boolean;
            size?: "small" | "medium";
            theme?: "default" | "simple";
            total?: number;
            totalContent?: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            onChange?: (pageInfo: import("..").PageInfo) => void;
            onCurrentChange?: (current: number, pageInfo: import("..").PageInfo) => void;
            onPageSizeChange?: (pageSize: number, pageInfo: import("..").PageInfo) => void;
        }>;
        globalConfig: import("vue").ComputedRef<{} & import("..").TableConfig>;
        tableFootHeight: import("vue").Ref<number>;
        virtualScrollHeaderPos: import("vue").Ref<{
            left: number;
            top: number;
        }>;
        tableSize: import("vue").ComputedRef<import("../common").SizeEnum>;
        tableWidth: import("vue").Ref<number>;
        tableElmWidth: import("vue").Ref<number>;
        tableRef: import("vue").Ref<HTMLDivElement>;
        tableElmRef: import("vue").Ref<HTMLTableElement>;
        sizeClassNames: {
            small: string;
            medium: string;
            large: string;
            default: string;
            xs: string;
            xl: string;
            block: string;
        };
        tableBaseClass: {
            table: string;
            columnResizableTable: string;
            overflowVisible: string;
            body: string;
            content: string;
            topContent: string;
            bottomContent: string;
            paginationWrap: string;
            tdLastRow: string;
            tdFirstCol: string;
            thCellInner: string;
            tableRowEdit: string;
            cellEditable: string;
            cellEditWrap: string;
            bordered: string;
            striped: string;
            hover: string;
            loading: string;
            rowspanAndColspan: string;
            empty: string;
            emptyRow: string;
            headerFixed: string;
            columnFixed: string;
            widthOverflow: string;
            multipleHeader: string;
            footerAffixed: string;
            horizontalBarAffixed: string;
            affixedHeader: string;
            affixedHeaderElm: string;
            affixedFooterElm: string;
            affixedFooterWrap: string;
            scrollbarDivider: string;
            fullHeight: string;
            resizeLine: string;
            obviousScrollbar: string;
            affixedHeaderWrap: string;
        };
        spansAndLeafNodes: import("vue").ComputedRef<{
            rowspanAndColspanMap: import("./interface").ThRowspanAndColspan;
            leafColumns: import("./interface").BaseTableColumns;
        }>;
        dynamicBaseTableClasses: import("vue").ComputedRef<((string | {
            [x: string]: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | Partial<import("..").TdAffixProps> | import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>;
        })[] | {
            [x: string]: boolean | "multiple" | "single";
        })[]>;
        tableContentStyles: import("vue").ComputedRef<{
            height: string | number;
            maxHeight: string | number;
        }>;
        tableElementStyles: import("vue").ComputedRef<{
            width: string | number;
        }>;
        dividerBottom: import("vue").ComputedRef<number>;
        virtualScrollClasses: {
            cursor: string;
            header: string;
        };
        tableLayoutClasses: {
            auto: string;
            fixed: string;
        };
        tableElmClasses: import("vue").ComputedRef<string[][]>;
        tableContentRef: import("vue").Ref<HTMLDivElement>;
        isFixedHeader: import("vue").Ref<boolean>;
        isWidthOverflow: import("vue").Ref<boolean>;
        isFixedColumn: import("vue").Ref<boolean>;
        rowAndColFixedPosition: import("vue").Ref<import("./interface").RowAndColFixedPosition>;
        showColumnShadow: {
            left: boolean;
            right: boolean;
        };
        thWidthList: import("vue").Ref<{
            [colKey: string]: number;
        }>;
        isPaginateData: import("vue").Ref<boolean>;
        dataSource: import("vue").Ref<{
            [x: string]: any;
            children?: any[];
        }[]>;
        affixHeaderRef: import("vue").Ref<HTMLDivElement>;
        affixFooterRef: import("vue").Ref<HTMLDivElement>;
        bottomContentRef: import("vue").Ref<HTMLDivElement>;
        paginationRef: import("vue").Ref<HTMLDivElement>;
        showAffixHeader: import("vue").Ref<boolean>;
        showAffixFooter: import("vue").Ref<boolean>;
        scrollbarWidth: import("vue").Ref<number>;
        isMultipleHeader: import("vue").ComputedRef<boolean>;
        showRightDivider: import("vue").ComputedRef<boolean>;
        resizeLineRef: import("vue").Ref<HTMLDivElement>;
        resizeLineStyle: {
            display: string;
            height: string;
            left: string;
            bottom: string;
        };
        columnResizeParams: {
            resizeLineRef: import("vue").Ref<HTMLDivElement>;
            resizeLineStyle: {
                display: string;
                height: string;
                left: string;
                bottom: string;
            };
            onColumnMouseover: (e: MouseEvent, col: import("./type").BaseTableCol<import("./type").TableRowData>) => void;
            onColumnMousedown: (e: MouseEvent, col: import("./type").BaseTableCol<import("./type").TableRowData>, index: number) => void;
            setEffectColMap: (nodes: import("./type").BaseTableCol<import("./type").TableRowData>[], parent: import("./type").BaseTableCol<import("./type").TableRowData>) => void;
        };
        horizontalScrollbarRef: import("vue").Ref<HTMLDivElement>;
        tableBodyRef: import("vue").Ref<HTMLTableElement>;
        virtualConfig: {
            visibleData: import("vue").Ref<any[]>;
            translateY: import("vue").Ref<number>;
            scrollHeight: import("vue").Ref<number>;
            isVirtualScroll: import("vue").ComputedRef<boolean>;
            handleScroll: () => void;
            handleRowMounted: (rowData: any) => void;
            scrollToElement: (p: import("../hooks/useVirtualScrollNew").ScrollToElementParams) => void;
        };
        showAffixPagination: import("vue").Ref<boolean>;
        tActiveRow: import("vue").Ref<(string | number)[]>;
        hoverRow: import("vue").Ref<string | number>;
        showElement: import("vue").Ref<boolean>;
        scrollToElement: (params: import("../common").ComponentScrollToElementParams) => void;
        renderPagination: () => JSX.Element;
        renderTNode: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
        onFixedChange: () => void;
        onHorizontalScroll: (scrollElement?: HTMLElement) => void;
        updateAffixHeaderOrFooter: () => void;
        onInnerVirtualScroll: (e: WheelEvent) => void;
        refreshTable: () => void;
        scrollColumnIntoView: (colKey: string) => void;
        onTableFocus: () => void;
        onTableBlur: () => void;
        onInnerRowClick: (context: import("./type").RowEventContext<import("./type").TableRowData>) => void;
        paginationAffixRef: import("vue").Ref<any>;
        horizontalScrollAffixRef: import("vue").Ref<any>;
        headerTopAffixRef: import("vue").Ref<any>;
        footerBottomAffixRef: import("vue").Ref<any>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "show-element-change"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        renderExpandedRow: import("vue").PropType<(params: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
        onLeafColumnsChange: import("vue").PropType<(columns: import("./interface").BaseTableColumns) => void>;
        thDraggable: BooleanConstructor;
        activeRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        activeRowType: {
            type: import("vue").PropType<"multiple" | "single">;
            default: "multiple" | "single";
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("../common").AttachNode>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        };
        columns: {
            type: import("vue").PropType<import("./type").BaseTableCol<import("./type").TableRowData>[]>;
            default: () => import("./type").BaseTableCol<import("./type").TableRowData>[];
        };
        data: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        firstFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        fixedRows: {
            type: import("vue").PropType<number[]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        footerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        footerSummary: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        headerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        height: {
            type: import("vue").PropType<string | number>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        loadingProps: {
            type: import("vue").PropType<Partial<import("..").TdLoadingProps>>;
        };
        locale: {
            type: import("vue").PropType<import("..").TableConfig>;
        };
        maxHeight: {
            type: import("vue").PropType<string | number>;
        };
        pagination: {
            type: import("vue").PropType<import("..").TdPaginationProps>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
        };
        rowClassName: {
            type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        scroll: {
            type: import("vue").PropType<import("../common").TScroll>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            validator(val: import("../common").SizeEnum): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<"fixed" | "auto">;
            default: "fixed" | "auto";
            validator(val: "fixed" | "auto"): boolean;
        };
        topContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        verticalAlign: {
            type: import("vue").PropType<"top" | "bottom" | "middle">;
            default: "top" | "bottom" | "middle";
            validator(val: "top" | "bottom" | "middle"): boolean;
        };
        onActiveChange: import("vue").PropType<(activeRowKeys: (string | number)[], context: import("./type").ActiveChangeContext<import("./type").TableRowData>) => void>;
        onActiveRowAction: import("vue").PropType<(context: import("./type").ActiveRowActionContext<import("./type").TableRowData>) => void>;
        onCellClick: import("vue").PropType<(context: import("./type").BaseTableCellEventContext<import("./type").TableRowData>) => void>;
        onColumnResizeChange: import("vue").PropType<(context: {
            columnsWidth: {
                [colKey: string]: number;
            };
        }) => void>;
        onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
        onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onScroll: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollX: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollY: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
    }>> & {
        "onShow-element-change"?: (...args: any[]) => any;
    }, {
        data: import("./type").TableRowData[];
        columns: import("./type").BaseTableCol<import("./type").TableRowData>[];
        tableLayout: "fixed" | "auto";
        verticalAlign: "top" | "bottom" | "middle";
        loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        hover: boolean;
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "multiple" | "single";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        thDraggable: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        renderExpandedRow: import("vue").PropType<(params: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
        onLeafColumnsChange: import("vue").PropType<(columns: import("./interface").BaseTableColumns) => void>;
        thDraggable: BooleanConstructor;
        activeRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        activeRowType: {
            type: import("vue").PropType<"multiple" | "single">;
            default: "multiple" | "single";
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("../common").AttachNode>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        };
        columns: {
            type: import("vue").PropType<import("./type").BaseTableCol<import("./type").TableRowData>[]>;
            default: () => import("./type").BaseTableCol<import("./type").TableRowData>[];
        };
        data: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        firstFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        fixedRows: {
            type: import("vue").PropType<number[]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        footerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        footerSummary: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        headerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        height: {
            type: import("vue").PropType<string | number>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        loadingProps: {
            type: import("vue").PropType<Partial<import("..").TdLoadingProps>>;
        };
        locale: {
            type: import("vue").PropType<import("..").TableConfig>;
        };
        maxHeight: {
            type: import("vue").PropType<string | number>;
        };
        pagination: {
            type: import("vue").PropType<import("..").TdPaginationProps>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
        };
        rowClassName: {
            type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        scroll: {
            type: import("vue").PropType<import("../common").TScroll>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            validator(val: import("../common").SizeEnum): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<"fixed" | "auto">;
            default: "fixed" | "auto";
            validator(val: "fixed" | "auto"): boolean;
        };
        topContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        verticalAlign: {
            type: import("vue").PropType<"top" | "bottom" | "middle">;
            default: "top" | "bottom" | "middle";
            validator(val: "top" | "bottom" | "middle"): boolean;
        };
        onActiveChange: import("vue").PropType<(activeRowKeys: (string | number)[], context: import("./type").ActiveChangeContext<import("./type").TableRowData>) => void>;
        onActiveRowAction: import("vue").PropType<(context: import("./type").ActiveRowActionContext<import("./type").TableRowData>) => void>;
        onCellClick: import("vue").PropType<(context: import("./type").BaseTableCellEventContext<import("./type").TableRowData>) => void>;
        onColumnResizeChange: import("vue").PropType<(context: {
            columnsWidth: {
                [colKey: string]: number;
            };
        }) => void>;
        onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
        onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onScroll: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollX: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollY: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
    }>> & {
        "onShow-element-change"?: (...args: any[]) => any;
    }, {
        thList: import("vue").ComputedRef<import("./interface").BaseTableColumns[]>;
        classPrefix: string;
        innerPagination: import("vue").Ref<{
            current?: number;
            defaultCurrent?: number;
            modelValue?: number;
            disabled?: boolean;
            foldedMaxPageBtn?: number;
            maxPageBtn?: number;
            pageEllipsisMode?: "mid" | "both-ends";
            pageSize?: number;
            defaultPageSize?: number;
            pageSizeOptions?: (number | {
                label: string;
                value: number;
            })[];
            selectProps?: {
                autoWidth?: boolean;
                autofocus?: boolean;
                borderless?: boolean;
                clearable?: boolean;
                collapsedItems?: (h: typeof import("vue").h, props: {
                    value: import("..").SelectOption[];
                    collapsedSelectedItems: import("..").SelectOption[];
                    count: number;
                    onClose: (context: {
                        index: number;
                        e?: MouseEvent;
                    }) => void;
                }) => import("../common").SlotReturnValue;
                creatable?: boolean;
                disabled?: boolean;
                empty?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                filter?: (filterWords: string, option: import("..").SelectOption) => boolean | Promise<boolean>;
                filterable?: boolean;
                inputProps?: {
                    align?: "center" | "left" | "right";
                    allowInputOverMax?: boolean;
                    autoWidth?: boolean;
                    autocomplete?: string;
                    autofocus?: boolean;
                    borderless?: boolean;
                    clearable?: boolean;
                    disabled?: boolean;
                    format?: import("..").InputFormatType;
                    inputClass?: string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | any[] | {
                        [className: string]: any;
                    })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                    label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    maxcharacter?: number;
                    maxlength?: string | number;
                    name?: string;
                    placeholder?: string;
                    prefixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                    readonly?: boolean;
                    showClearIconOnEmpty?: boolean;
                    showLimitNumber?: boolean;
                    size?: import("../common").SizeEnum;
                    status?: "error" | "default" | "success" | "warning";
                    suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                    tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    type?: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
                    value?: import("..").InputValue;
                    defaultValue?: import("..").InputValue;
                    modelValue?: import("..").InputValue;
                    onBlur?: (value: import("..").InputValue, context: {
                        e: FocusEvent;
                    }) => void;
                    onChange?: (value: import("..").InputValue, context?: {
                        e?: MouseEvent | CompositionEvent | InputEvent;
                        trigger: "input" | "clear" | "initial";
                    }) => void;
                    onClear?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onCompositionend?: (value: string, context: {
                        e: CompositionEvent;
                    }) => void;
                    onCompositionstart?: (value: string, context: {
                        e: CompositionEvent;
                    }) => void;
                    onEnter?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onFocus?: (value: import("..").InputValue, context: {
                        e: FocusEvent;
                    }) => void;
                    onKeydown?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onKeypress?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onKeyup?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onMouseenter?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onMouseleave?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onPaste?: (context: {
                        e: ClipboardEvent;
                        pasteValue: string;
                    }) => void;
                    onValidate?: (context: {
                        error?: "exceed-maximum" | "below-minimum";
                    }) => void;
                    onWheel?: (context: {
                        e: WheelEvent;
                    }) => void;
                };
                inputValue?: string;
                defaultInputValue?: string;
                keys?: {
                    value?: string;
                    label?: string;
                    disabled?: string;
                };
                label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                loading?: boolean;
                loadingText?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                max?: number;
                minCollapsedNum?: number;
                multiple?: boolean;
                options?: (import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                })[];
                panelBottomContent?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                panelTopContent?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                placeholder?: string;
                popupProps?: {
                    attach?: import("../common").AttachNode;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    delay?: number | number[];
                    destroyOnClose?: boolean;
                    disabled?: boolean;
                    hideEmptyPopup?: boolean;
                    overlayClassName?: string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | any[] | {
                        [className: string]: any;
                    })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                    overlayInnerClassName?: string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | any[] | {
                        [className: string]: any;
                    })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                    overlayInnerStyle?: import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles);
                    overlayStyle?: import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles);
                    placement?: import("..").PopupPlacement;
                    popperOptions?: object;
                    showArrow?: boolean;
                    trigger?: "click" | "focus" | "mousedown" | "context-menu" | "hover";
                    triggerElement?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    visible?: boolean;
                    defaultVisible?: boolean;
                    modelValue?: boolean;
                    zIndex?: number;
                    onOverlayClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onScroll?: (context: {
                        e: WheelEvent;
                    }) => void;
                    onScrollToBottom?: (context: {
                        e: WheelEvent;
                    }) => void;
                    onVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
                };
                popupVisible?: boolean;
                defaultPopupVisible?: boolean;
                prefixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                readonly?: boolean;
                reserveKeyword?: boolean;
                scroll?: {
                    bufferSize?: number;
                    isFixedRowHeight?: boolean;
                    rowHeight?: number;
                    threshold?: number;
                    type: "lazy" | "virtual";
                };
                selectInputProps?: {
                    allowInput?: boolean;
                    autoWidth?: boolean;
                    autofocus?: boolean;
                    borderless?: boolean;
                    clearable?: boolean;
                    collapsedItems?: (h: typeof import("vue").h, props: {
                        value: import("..").SelectInputValue;
                        collapsedSelectedItems: import("..").SelectInputValue;
                        count: number;
                        onClose: (context: {
                            index: number;
                            e?: MouseEvent;
                        }) => void;
                    }) => import("../common").SlotReturnValue;
                    disabled?: boolean;
                    inputProps?: {
                        align?: "center" | "left" | "right";
                        allowInputOverMax?: boolean;
                        autoWidth?: boolean;
                        autocomplete?: string;
                        autofocus?: boolean;
                        borderless?: boolean;
                        clearable?: boolean;
                        disabled?: boolean;
                        format?: import("..").InputFormatType;
                        inputClass?: string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | any[] | {
                            [className: string]: any;
                        })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                        label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        maxcharacter?: number;
                        maxlength?: string | number;
                        name?: string;
                        placeholder?: string;
                        prefixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                        readonly?: boolean;
                        showClearIconOnEmpty?: boolean;
                        showLimitNumber?: boolean;
                        size?: import("../common").SizeEnum;
                        status?: "error" | "default" | "success" | "warning";
                        suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                        tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        type?: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
                        value?: import("..").InputValue;
                        defaultValue?: import("..").InputValue;
                        modelValue?: import("..").InputValue;
                        onBlur?: (value: import("..").InputValue, context: {
                            e: FocusEvent;
                        }) => void;
                        onChange?: (value: import("..").InputValue, context?: {
                            e?: MouseEvent | CompositionEvent | InputEvent;
                            trigger: "input" | "clear" | "initial";
                        }) => void;
                        onClear?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onCompositionend?: (value: string, context: {
                            e: CompositionEvent;
                        }) => void;
                        onCompositionstart?: (value: string, context: {
                            e: CompositionEvent;
                        }) => void;
                        onEnter?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onFocus?: (value: import("..").InputValue, context: {
                            e: FocusEvent;
                        }) => void;
                        onKeydown?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onKeypress?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onKeyup?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onMouseenter?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onMouseleave?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onPaste?: (context: {
                            e: ClipboardEvent;
                            pasteValue: string;
                        }) => void;
                        onValidate?: (context: {
                            error?: "exceed-maximum" | "below-minimum";
                        }) => void;
                        onWheel?: (context: {
                            e: WheelEvent;
                        }) => void;
                    };
                    inputValue?: string;
                    defaultInputValue?: string;
                    keys?: {
                        label?: string;
                        value?: string;
                        children?: string;
                    };
                    label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    loading?: boolean;
                    minCollapsedNum?: number;
                    multiple?: boolean;
                    panel?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    placeholder?: string;
                    popupProps?: {
                        attach?: import("../common").AttachNode;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        delay?: number | number[];
                        destroyOnClose?: boolean;
                        disabled?: boolean;
                        hideEmptyPopup?: boolean;
                        overlayClassName?: string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | any[] | {
                            [className: string]: any;
                        })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                        overlayInnerClassName?: string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | any[] | {
                            [className: string]: any;
                        })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                        overlayInnerStyle?: import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles);
                        overlayStyle?: import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles);
                        placement?: import("..").PopupPlacement;
                        popperOptions?: object;
                        showArrow?: boolean;
                        trigger?: "click" | "focus" | "mousedown" | "context-menu" | "hover";
                        triggerElement?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        visible?: boolean;
                        defaultVisible?: boolean;
                        modelValue?: boolean;
                        zIndex?: number;
                        onOverlayClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onScroll?: (context: {
                            e: WheelEvent;
                        }) => void;
                        onScrollToBottom?: (context: {
                            e: WheelEvent;
                        }) => void;
                        onVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
                    };
                    popupVisible?: boolean;
                    defaultPopupVisible?: boolean;
                    readonly?: boolean;
                    reserveKeyword?: boolean;
                    status?: "error" | "default" | "success" | "warning";
                    suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                    tag?: string | ((h: typeof import("vue").h, props: {
                        value: string | number;
                    }) => import("../common").SlotReturnValue);
                    tagInputProps?: {
                        autoWidth?: boolean;
                        clearable?: boolean;
                        collapsedItems?: (h: typeof import("vue").h, props: {
                            value: import("..").TagInputValue;
                            collapsedSelectedItems: import("..").TagInputValue;
                            count: number;
                            onClose: (context: {
                                index: number;
                                e?: MouseEvent;
                            }) => void;
                        }) => import("../common").SlotReturnValue;
                        disabled?: boolean;
                        dragSort?: boolean;
                        excessTagsDisplayType?: "scroll" | "break-line";
                        inputProps?: {
                            align?: "center" | "left" | "right";
                            allowInputOverMax?: boolean;
                            autoWidth?: boolean;
                            autocomplete?: string;
                            autofocus?: boolean;
                            borderless?: boolean;
                            clearable?: boolean;
                            disabled?: boolean;
                            format?: import("..").InputFormatType;
                            inputClass?: string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | {
                                [className: string]: any;
                            } | (string | any[] | {
                                [className: string]: any;
                            })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                            label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                            maxcharacter?: number;
                            maxlength?: string | number;
                            name?: string;
                            placeholder?: string;
                            prefixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                            readonly?: boolean;
                            showClearIconOnEmpty?: boolean;
                            showLimitNumber?: boolean;
                            size?: import("../common").SizeEnum;
                            status?: "error" | "default" | "success" | "warning";
                            suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                            suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                            tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                            type?: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
                            value?: import("..").InputValue;
                            defaultValue?: import("..").InputValue;
                            modelValue?: import("..").InputValue;
                            onBlur?: (value: import("..").InputValue, context: {
                                e: FocusEvent;
                            }) => void;
                            onChange?: (value: import("..").InputValue, context?: {
                                e?: MouseEvent | CompositionEvent | InputEvent;
                                trigger: "input" | "clear" | "initial";
                            }) => void;
                            onClear?: (context: {
                                e: MouseEvent;
                            }) => void;
                            onClick?: (context: {
                                e: MouseEvent;
                            }) => void;
                            onCompositionend?: (value: string, context: {
                                e: CompositionEvent;
                            }) => void;
                            onCompositionstart?: (value: string, context: {
                                e: CompositionEvent;
                            }) => void;
                            onEnter?: (value: import("..").InputValue, context: {
                                e: KeyboardEvent;
                            }) => void;
                            onFocus?: (value: import("..").InputValue, context: {
                                e: FocusEvent;
                            }) => void;
                            onKeydown?: (value: import("..").InputValue, context: {
                                e: KeyboardEvent;
                            }) => void;
                            onKeypress?: (value: import("..").InputValue, context: {
                                e: KeyboardEvent;
                            }) => void;
                            onKeyup?: (value: import("..").InputValue, context: {
                                e: KeyboardEvent;
                            }) => void;
                            onMouseenter?: (context: {
                                e: MouseEvent;
                            }) => void;
                            onMouseleave?: (context: {
                                e: MouseEvent;
                            }) => void;
                            onPaste?: (context: {
                                e: ClipboardEvent;
                                pasteValue: string;
                            }) => void;
                            onValidate?: (context: {
                                error?: "exceed-maximum" | "below-minimum";
                            }) => void;
                            onWheel?: (context: {
                                e: WheelEvent;
                            }) => void;
                        };
                        inputValue?: string;
                        defaultInputValue?: string;
                        label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        max?: number;
                        minCollapsedNum?: number;
                        placeholder?: string;
                        prefixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                        readonly?: boolean;
                        size?: "small" | "medium" | "large";
                        status?: "error" | "default" | "success" | "warning";
                        suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                        tag?: string | ((h: typeof import("vue").h, props: {
                            value: string | number;
                        }) => import("../common").SlotReturnValue);
                        tagProps?: {
                            closable?: boolean;
                            color?: string;
                            content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                            default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                            disabled?: boolean;
                            icon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                            maxWidth?: string | number;
                            shape?: "square" | "round" | "mark";
                            size?: import("../common").SizeEnum;
                            theme?: "default" | "success" | "primary" | "warning" | "danger";
                            variant?: "outline" | "dark" | "light" | "light-outline";
                            onClick?: (context: {
                                e: MouseEvent;
                            }) => void;
                            onClose?: (context: {
                                e: MouseEvent;
                            }) => void;
                        };
                        tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        value?: (string | number)[];
                        defaultValue?: (string | number)[];
                        modelValue?: (string | number)[];
                        valueDisplay?: string | ((h: typeof import("vue").h, props: {
                            value: import("..").TagInputValue;
                            onClose: (index: number, item?: any) => void;
                        }) => import("../common").SlotReturnValue);
                        onBlur?: (value: import("..").TagInputValue, context: {
                            inputValue: string;
                            e: FocusEvent;
                        }) => void;
                        onChange?: (value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void;
                        onClear?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onDragSort?: (context: import("..").TagInputDragSortContext) => void;
                        onEnter?: (value: import("..").TagInputValue, context: {
                            e: KeyboardEvent;
                            inputValue: string;
                        }) => void;
                        onFocus?: (value: import("..").TagInputValue, context: {
                            inputValue: string;
                            e: FocusEvent;
                        }) => void;
                        onInputChange?: (value: string, context?: import("..").InputValueChangeContext) => void;
                        onMouseenter?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onMouseleave?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onPaste?: (context: {
                            e: ClipboardEvent;
                            pasteValue: string;
                        }) => void;
                        onRemove?: (context: import("..").TagInputRemoveContext) => void;
                    };
                    tagProps?: {
                        closable?: boolean;
                        color?: string;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        icon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                        maxWidth?: string | number;
                        shape?: "square" | "round" | "mark";
                        size?: import("../common").SizeEnum;
                        theme?: "default" | "success" | "primary" | "warning" | "danger";
                        variant?: "outline" | "dark" | "light" | "light-outline";
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClose?: (context: {
                            e: MouseEvent;
                        }) => void;
                    };
                    tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    value?: string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    } | (string | number | boolean | Object | any[] | {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleDateString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        toLocaleTimeString: {
                            (): string;
                            (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                            (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                        };
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number) => number;
                        setUTCSeconds: (sec: number, ms?: number) => number;
                        setMinutes: (min: number, sec?: number, ms?: number) => number;
                        setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                        setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number) => number;
                        setUTCMonth: (month: number, date?: number) => number;
                        setFullYear: (year: number, month?: number, date?: number) => number;
                        setUTCFullYear: (year: number, month?: number, date?: number) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => VarDate;
                        [Symbol.toPrimitive]: {
                            (hint: "default"): string;
                            (hint: "string"): string;
                            (hint: "number"): number;
                            (hint: string): string | number;
                        };
                    })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                    valueDisplay?: string | ((h: typeof import("vue").h, props: {
                        value: import("..").TagInputValue;
                        onClose: (index: number, item?: any) => void;
                    }) => import("../common").SlotReturnValue);
                    onBlur?: (value: import("..").SelectInputValue, context: import("..").SelectInputBlurContext) => void;
                    onClear?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onEnter?: (value: import("..").SelectInputValue, context: {
                        e: KeyboardEvent;
                        inputValue: string;
                        tagInputValue?: import("..").TagInputValue;
                    }) => void;
                    onFocus?: (value: import("..").SelectInputValue, context: import("..").SelectInputFocusContext) => void;
                    onInputChange?: (value: string, context?: import("..").SelectInputValueChangeContext) => void;
                    onMouseenter?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onMouseleave?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onPaste?: (context: {
                        e: ClipboardEvent;
                        pasteValue: string;
                    }) => void;
                    onPopupVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
                    onTagChange?: (value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void;
                };
                showArrow?: boolean;
                size?: import("../common").SizeEnum;
                status?: "error" | "default" | "success" | "warning";
                suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                tagInputProps?: {
                    autoWidth?: boolean;
                    clearable?: boolean;
                    collapsedItems?: (h: typeof import("vue").h, props: {
                        value: import("..").TagInputValue;
                        collapsedSelectedItems: import("..").TagInputValue;
                        count: number;
                        onClose: (context: {
                            index: number;
                            e?: MouseEvent;
                        }) => void;
                    }) => import("../common").SlotReturnValue;
                    disabled?: boolean;
                    dragSort?: boolean;
                    excessTagsDisplayType?: "scroll" | "break-line";
                    inputProps?: {
                        align?: "center" | "left" | "right";
                        allowInputOverMax?: boolean;
                        autoWidth?: boolean;
                        autocomplete?: string;
                        autofocus?: boolean;
                        borderless?: boolean;
                        clearable?: boolean;
                        disabled?: boolean;
                        format?: import("..").InputFormatType;
                        inputClass?: string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | any[] | {
                            [className: string]: any;
                        })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                        label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        maxcharacter?: number;
                        maxlength?: string | number;
                        name?: string;
                        placeholder?: string;
                        prefixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                        readonly?: boolean;
                        showClearIconOnEmpty?: boolean;
                        showLimitNumber?: boolean;
                        size?: import("../common").SizeEnum;
                        status?: "error" | "default" | "success" | "warning";
                        suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                        tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        type?: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
                        value?: import("..").InputValue;
                        defaultValue?: import("..").InputValue;
                        modelValue?: import("..").InputValue;
                        onBlur?: (value: import("..").InputValue, context: {
                            e: FocusEvent;
                        }) => void;
                        onChange?: (value: import("..").InputValue, context?: {
                            e?: MouseEvent | CompositionEvent | InputEvent;
                            trigger: "input" | "clear" | "initial";
                        }) => void;
                        onClear?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onCompositionend?: (value: string, context: {
                            e: CompositionEvent;
                        }) => void;
                        onCompositionstart?: (value: string, context: {
                            e: CompositionEvent;
                        }) => void;
                        onEnter?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onFocus?: (value: import("..").InputValue, context: {
                            e: FocusEvent;
                        }) => void;
                        onKeydown?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onKeypress?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onKeyup?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onMouseenter?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onMouseleave?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onPaste?: (context: {
                            e: ClipboardEvent;
                            pasteValue: string;
                        }) => void;
                        onValidate?: (context: {
                            error?: "exceed-maximum" | "below-minimum";
                        }) => void;
                        onWheel?: (context: {
                            e: WheelEvent;
                        }) => void;
                    };
                    inputValue?: string;
                    defaultInputValue?: string;
                    label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    max?: number;
                    minCollapsedNum?: number;
                    placeholder?: string;
                    prefixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                    readonly?: boolean;
                    size?: "small" | "medium" | "large";
                    status?: "error" | "default" | "success" | "warning";
                    suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                    tag?: string | ((h: typeof import("vue").h, props: {
                        value: string | number;
                    }) => import("../common").SlotReturnValue);
                    tagProps?: {
                        closable?: boolean;
                        color?: string;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        icon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                        maxWidth?: string | number;
                        shape?: "square" | "round" | "mark";
                        size?: import("../common").SizeEnum;
                        theme?: "default" | "success" | "primary" | "warning" | "danger";
                        variant?: "outline" | "dark" | "light" | "light-outline";
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClose?: (context: {
                            e: MouseEvent;
                        }) => void;
                    };
                    tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    value?: (string | number)[];
                    defaultValue?: (string | number)[];
                    modelValue?: (string | number)[];
                    valueDisplay?: string | ((h: typeof import("vue").h, props: {
                        value: import("..").TagInputValue;
                        onClose: (index: number, item?: any) => void;
                    }) => import("../common").SlotReturnValue);
                    onBlur?: (value: import("..").TagInputValue, context: {
                        inputValue: string;
                        e: FocusEvent;
                    }) => void;
                    onChange?: (value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void;
                    onClear?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onDragSort?: (context: import("..").TagInputDragSortContext) => void;
                    onEnter?: (value: import("..").TagInputValue, context: {
                        e: KeyboardEvent;
                        inputValue: string;
                    }) => void;
                    onFocus?: (value: import("..").TagInputValue, context: {
                        inputValue: string;
                        e: FocusEvent;
                    }) => void;
                    onInputChange?: (value: string, context?: import("..").InputValueChangeContext) => void;
                    onMouseenter?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onMouseleave?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onPaste?: (context: {
                        e: ClipboardEvent;
                        pasteValue: string;
                    }) => void;
                    onRemove?: (context: import("..").TagInputRemoveContext) => void;
                };
                tagProps?: {
                    closable?: boolean;
                    color?: string;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    icon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                    maxWidth?: string | number;
                    shape?: "square" | "round" | "mark";
                    size?: import("../common").SizeEnum;
                    theme?: "default" | "success" | "primary" | "warning" | "danger";
                    variant?: "outline" | "dark" | "light" | "light-outline";
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClose?: (context: {
                        e: MouseEvent;
                    }) => void;
                };
                tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                value?: string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | any[] | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                defaultValue?: string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | any[] | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                modelValue?: string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                } | (string | number | boolean | any[] | import("../common").PlainObject | {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                } | {
                    group: string;
                    children: {
                        checkAll?: boolean;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        label?: string;
                        title?: string;
                        value?: string | number;
                    }[];
                    divider?: boolean;
                    label?: string;
                })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                valueDisplay?: string | ((h: typeof import("vue").h, props: {
                    value: import("..").SelectValue<import("..").SelectOption>;
                    onClose: (index: number) => void;
                    displayValue?: import("..").SelectValue<import("..").SelectOption>;
                }) => import("../common").SlotReturnValue);
                valueType?: "object" | "value";
                onBlur?: (context: {
                    value: import("..").SelectValue<import("..").SelectOption>;
                    e: FocusEvent | KeyboardEvent;
                }) => void;
                onChange?: (value: import("..").SelectValue<import("..").SelectOption>, context: {
                    option?: import("..").SelectOption;
                    selectedOptions: import("..").SelectOption[];
                    trigger: import("..").SelectValueChangeTrigger;
                    e?: MouseEvent | KeyboardEvent;
                }) => void;
                onClear?: (context: {
                    e: MouseEvent;
                }) => void;
                onCreate?: (value: string | number) => void;
                onEnter?: (context: {
                    inputValue: string;
                    e: KeyboardEvent;
                    value: import("..").SelectValue<import("..").SelectOption>;
                }) => void;
                onFocus?: (context: {
                    value: import("..").SelectValue<import("..").SelectOption>;
                    e: FocusEvent | KeyboardEvent;
                }) => void;
                onInputChange?: (value: string, context?: import("..").SelectInputValueChangeContext) => void;
                onPopupVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
                onRemove?: (options: import("..").SelectRemoveContext<import("..").SelectOption>) => void;
                onSearch?: (filterWords: string, context: {
                    e: KeyboardEvent;
                }) => void;
            };
            showFirstAndLastPageBtn?: boolean;
            showJumper?: boolean;
            showPageNumber?: boolean;
            showPageSize?: boolean;
            showPreviousAndNextBtn?: boolean;
            size?: "small" | "medium";
            theme?: "default" | "simple";
            total?: number;
            totalContent?: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            onChange?: (pageInfo: import("..").PageInfo) => void;
            onCurrentChange?: (current: number, pageInfo: import("..").PageInfo) => void;
            onPageSizeChange?: (pageSize: number, pageInfo: import("..").PageInfo) => void;
        }>;
        globalConfig: import("vue").ComputedRef<{} & import("..").TableConfig>;
        tableFootHeight: import("vue").Ref<number>;
        virtualScrollHeaderPos: import("vue").Ref<{
            left: number;
            top: number;
        }>;
        tableSize: import("vue").ComputedRef<import("../common").SizeEnum>;
        tableWidth: import("vue").Ref<number>;
        tableElmWidth: import("vue").Ref<number>;
        tableRef: import("vue").Ref<HTMLDivElement>;
        tableElmRef: import("vue").Ref<HTMLTableElement>;
        sizeClassNames: {
            small: string;
            medium: string;
            large: string;
            default: string;
            xs: string;
            xl: string;
            block: string;
        };
        tableBaseClass: {
            table: string;
            columnResizableTable: string;
            overflowVisible: string;
            body: string;
            content: string;
            topContent: string;
            bottomContent: string;
            paginationWrap: string;
            tdLastRow: string;
            tdFirstCol: string;
            thCellInner: string;
            tableRowEdit: string;
            cellEditable: string;
            cellEditWrap: string;
            bordered: string;
            striped: string;
            hover: string;
            loading: string;
            rowspanAndColspan: string;
            empty: string;
            emptyRow: string;
            headerFixed: string;
            columnFixed: string;
            widthOverflow: string;
            multipleHeader: string;
            footerAffixed: string;
            horizontalBarAffixed: string;
            affixedHeader: string;
            affixedHeaderElm: string;
            affixedFooterElm: string;
            affixedFooterWrap: string;
            scrollbarDivider: string;
            fullHeight: string;
            resizeLine: string;
            obviousScrollbar: string;
            affixedHeaderWrap: string;
        };
        spansAndLeafNodes: import("vue").ComputedRef<{
            rowspanAndColspanMap: import("./interface").ThRowspanAndColspan;
            leafColumns: import("./interface").BaseTableColumns;
        }>;
        dynamicBaseTableClasses: import("vue").ComputedRef<((string | {
            [x: string]: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | Partial<import("..").TdAffixProps> | import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>;
        })[] | {
            [x: string]: boolean | "multiple" | "single";
        })[]>;
        tableContentStyles: import("vue").ComputedRef<{
            height: string | number;
            maxHeight: string | number;
        }>;
        tableElementStyles: import("vue").ComputedRef<{
            width: string | number;
        }>;
        dividerBottom: import("vue").ComputedRef<number>;
        virtualScrollClasses: {
            cursor: string;
            header: string;
        };
        tableLayoutClasses: {
            auto: string;
            fixed: string;
        };
        tableElmClasses: import("vue").ComputedRef<string[][]>;
        tableContentRef: import("vue").Ref<HTMLDivElement>;
        isFixedHeader: import("vue").Ref<boolean>;
        isWidthOverflow: import("vue").Ref<boolean>;
        isFixedColumn: import("vue").Ref<boolean>;
        rowAndColFixedPosition: import("vue").Ref<import("./interface").RowAndColFixedPosition>;
        showColumnShadow: {
            left: boolean;
            right: boolean;
        };
        thWidthList: import("vue").Ref<{
            [colKey: string]: number;
        }>;
        isPaginateData: import("vue").Ref<boolean>;
        dataSource: import("vue").Ref<{
            [x: string]: any;
            children?: any[];
        }[]>;
        affixHeaderRef: import("vue").Ref<HTMLDivElement>;
        affixFooterRef: import("vue").Ref<HTMLDivElement>;
        bottomContentRef: import("vue").Ref<HTMLDivElement>;
        paginationRef: import("vue").Ref<HTMLDivElement>;
        showAffixHeader: import("vue").Ref<boolean>;
        showAffixFooter: import("vue").Ref<boolean>;
        scrollbarWidth: import("vue").Ref<number>;
        isMultipleHeader: import("vue").ComputedRef<boolean>;
        showRightDivider: import("vue").ComputedRef<boolean>;
        resizeLineRef: import("vue").Ref<HTMLDivElement>;
        resizeLineStyle: {
            display: string;
            height: string;
            left: string;
            bottom: string;
        };
        columnResizeParams: {
            resizeLineRef: import("vue").Ref<HTMLDivElement>;
            resizeLineStyle: {
                display: string;
                height: string;
                left: string;
                bottom: string;
            };
            onColumnMouseover: (e: MouseEvent, col: import("./type").BaseTableCol<import("./type").TableRowData>) => void;
            onColumnMousedown: (e: MouseEvent, col: import("./type").BaseTableCol<import("./type").TableRowData>, index: number) => void;
            setEffectColMap: (nodes: import("./type").BaseTableCol<import("./type").TableRowData>[], parent: import("./type").BaseTableCol<import("./type").TableRowData>) => void;
        };
        horizontalScrollbarRef: import("vue").Ref<HTMLDivElement>;
        tableBodyRef: import("vue").Ref<HTMLTableElement>;
        virtualConfig: {
            visibleData: import("vue").Ref<any[]>;
            translateY: import("vue").Ref<number>;
            scrollHeight: import("vue").Ref<number>;
            isVirtualScroll: import("vue").ComputedRef<boolean>;
            handleScroll: () => void;
            handleRowMounted: (rowData: any) => void;
            scrollToElement: (p: import("../hooks/useVirtualScrollNew").ScrollToElementParams) => void;
        };
        showAffixPagination: import("vue").Ref<boolean>;
        tActiveRow: import("vue").Ref<(string | number)[]>;
        hoverRow: import("vue").Ref<string | number>;
        showElement: import("vue").Ref<boolean>;
        scrollToElement: (params: import("../common").ComponentScrollToElementParams) => void;
        renderPagination: () => JSX.Element;
        renderTNode: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
        onFixedChange: () => void;
        onHorizontalScroll: (scrollElement?: HTMLElement) => void;
        updateAffixHeaderOrFooter: () => void;
        onInnerVirtualScroll: (e: WheelEvent) => void;
        refreshTable: () => void;
        scrollColumnIntoView: (colKey: string) => void;
        onTableFocus: () => void;
        onTableBlur: () => void;
        onInnerRowClick: (context: import("./type").RowEventContext<import("./type").TableRowData>) => void;
        paginationAffixRef: import("vue").Ref<any>;
        horizontalScrollAffixRef: import("vue").Ref<any>;
        headerTopAffixRef: import("vue").Ref<any>;
        footerBottomAffixRef: import("vue").Ref<any>;
    }, {}, {}, {}, {
        data: import("./type").TableRowData[];
        columns: import("./type").BaseTableCol<import("./type").TableRowData>[];
        tableLayout: "fixed" | "auto";
        verticalAlign: "top" | "bottom" | "middle";
        loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        hover: boolean;
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "multiple" | "single";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        thDraggable: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    renderExpandedRow: import("vue").PropType<(params: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
    onLeafColumnsChange: import("vue").PropType<(columns: import("./interface").BaseTableColumns) => void>;
    thDraggable: BooleanConstructor;
    activeRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: (string | number)[];
    };
    defaultActiveRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    activeRowType: {
        type: import("vue").PropType<"multiple" | "single">;
        default: "multiple" | "single";
    };
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    attach: {
        type: import("vue").PropType<import("../common").AttachNode>;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    cellEmptyContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
    };
    columns: {
        type: import("vue").PropType<import("./type").BaseTableCol<import("./type").TableRowData>[]>;
        default: () => import("./type").BaseTableCol<import("./type").TableRowData>[];
    };
    data: {
        type: import("vue").PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    disableDataPage: BooleanConstructor;
    disableSpaceInactiveRow: {
        type: BooleanConstructor;
        default: any;
    };
    empty: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    };
    firstFullRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    fixedRows: {
        type: import("vue").PropType<number[]>;
    };
    footData: {
        type: import("vue").PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    footerAffixProps: {
        type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
    };
    footerAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        default: boolean | Partial<import("..").TdAffixProps>;
    };
    footerSummary: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    headerAffixProps: {
        type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
    };
    headerAffixedTop: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        default: boolean | Partial<import("..").TdAffixProps>;
    };
    height: {
        type: import("vue").PropType<string | number>;
    };
    horizontalScrollAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
    };
    hover: BooleanConstructor;
    keyboardRowHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    lastFullRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    lazyLoad: BooleanConstructor;
    loading: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    };
    loadingProps: {
        type: import("vue").PropType<Partial<import("..").TdLoadingProps>>;
    };
    locale: {
        type: import("vue").PropType<import("..").TableConfig>;
    };
    maxHeight: {
        type: import("vue").PropType<string | number>;
    };
    pagination: {
        type: import("vue").PropType<import("..").TdPaginationProps>;
    };
    paginationAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
    };
    rowClassName: {
        type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    rowspanAndColspanInFooter: {
        type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    scroll: {
        type: import("vue").PropType<import("../common").TScroll>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        validator(val: import("../common").SizeEnum): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<"fixed" | "auto">;
        default: "fixed" | "auto";
        validator(val: "fixed" | "auto"): boolean;
    };
    topContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    verticalAlign: {
        type: import("vue").PropType<"top" | "bottom" | "middle">;
        default: "top" | "bottom" | "middle";
        validator(val: "top" | "bottom" | "middle"): boolean;
    };
    onActiveChange: import("vue").PropType<(activeRowKeys: (string | number)[], context: import("./type").ActiveChangeContext<import("./type").TableRowData>) => void>;
    onActiveRowAction: import("vue").PropType<(context: import("./type").ActiveRowActionContext<import("./type").TableRowData>) => void>;
    onCellClick: import("vue").PropType<(context: import("./type").BaseTableCellEventContext<import("./type").TableRowData>) => void>;
    onColumnResizeChange: import("vue").PropType<(context: {
        columnsWidth: {
            [colKey: string]: number;
        };
    }) => void>;
    onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
    onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onScroll: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollX: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollY: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
}>> & {
    "onShow-element-change"?: (...args: any[]) => any;
}, {
    thList: import("vue").ComputedRef<import("./interface").BaseTableColumns[]>;
    classPrefix: string;
    innerPagination: import("vue").Ref<{
        current?: number;
        defaultCurrent?: number;
        modelValue?: number;
        disabled?: boolean;
        foldedMaxPageBtn?: number;
        maxPageBtn?: number;
        pageEllipsisMode?: "mid" | "both-ends";
        pageSize?: number;
        defaultPageSize?: number;
        pageSizeOptions?: (number | {
            label: string;
            value: number;
        })[];
        selectProps?: {
            autoWidth?: boolean;
            autofocus?: boolean;
            borderless?: boolean;
            clearable?: boolean;
            collapsedItems?: (h: typeof import("vue").h, props: {
                value: import("..").SelectOption[];
                collapsedSelectedItems: import("..").SelectOption[];
                count: number;
                onClose: (context: {
                    index: number;
                    e?: MouseEvent;
                }) => void;
            }) => import("../common").SlotReturnValue;
            creatable?: boolean;
            disabled?: boolean;
            empty?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            filter?: (filterWords: string, option: import("..").SelectOption) => boolean | Promise<boolean>;
            filterable?: boolean;
            inputProps?: {
                align?: "center" | "left" | "right";
                allowInputOverMax?: boolean;
                autoWidth?: boolean;
                autocomplete?: string;
                autofocus?: boolean;
                borderless?: boolean;
                clearable?: boolean;
                disabled?: boolean;
                format?: import("..").InputFormatType;
                inputClass?: string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | any[] | {
                    [className: string]: any;
                })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                maxcharacter?: number;
                maxlength?: string | number;
                name?: string;
                placeholder?: string;
                prefixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                readonly?: boolean;
                showClearIconOnEmpty?: boolean;
                showLimitNumber?: boolean;
                size?: import("../common").SizeEnum;
                status?: "error" | "default" | "success" | "warning";
                suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                type?: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
                value?: import("..").InputValue;
                defaultValue?: import("..").InputValue;
                modelValue?: import("..").InputValue;
                onBlur?: (value: import("..").InputValue, context: {
                    e: FocusEvent;
                }) => void;
                onChange?: (value: import("..").InputValue, context?: {
                    e?: MouseEvent | CompositionEvent | InputEvent;
                    trigger: "input" | "clear" | "initial";
                }) => void;
                onClear?: (context: {
                    e: MouseEvent;
                }) => void;
                onClick?: (context: {
                    e: MouseEvent;
                }) => void;
                onCompositionend?: (value: string, context: {
                    e: CompositionEvent;
                }) => void;
                onCompositionstart?: (value: string, context: {
                    e: CompositionEvent;
                }) => void;
                onEnter?: (value: import("..").InputValue, context: {
                    e: KeyboardEvent;
                }) => void;
                onFocus?: (value: import("..").InputValue, context: {
                    e: FocusEvent;
                }) => void;
                onKeydown?: (value: import("..").InputValue, context: {
                    e: KeyboardEvent;
                }) => void;
                onKeypress?: (value: import("..").InputValue, context: {
                    e: KeyboardEvent;
                }) => void;
                onKeyup?: (value: import("..").InputValue, context: {
                    e: KeyboardEvent;
                }) => void;
                onMouseenter?: (context: {
                    e: MouseEvent;
                }) => void;
                onMouseleave?: (context: {
                    e: MouseEvent;
                }) => void;
                onPaste?: (context: {
                    e: ClipboardEvent;
                    pasteValue: string;
                }) => void;
                onValidate?: (context: {
                    error?: "exceed-maximum" | "below-minimum";
                }) => void;
                onWheel?: (context: {
                    e: WheelEvent;
                }) => void;
            };
            inputValue?: string;
            defaultInputValue?: string;
            keys?: {
                value?: string;
                label?: string;
                disabled?: string;
            };
            label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            loading?: boolean;
            loadingText?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            max?: number;
            minCollapsedNum?: number;
            multiple?: boolean;
            options?: (import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            })[];
            panelBottomContent?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            panelTopContent?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            placeholder?: string;
            popupProps?: {
                attach?: import("../common").AttachNode;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                delay?: number | number[];
                destroyOnClose?: boolean;
                disabled?: boolean;
                hideEmptyPopup?: boolean;
                overlayClassName?: string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | any[] | {
                    [className: string]: any;
                })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                overlayInnerClassName?: string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | {
                    [className: string]: any;
                } | (string | any[] | {
                    [className: string]: any;
                })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                overlayInnerStyle?: import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles);
                overlayStyle?: import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles);
                placement?: import("..").PopupPlacement;
                popperOptions?: object;
                showArrow?: boolean;
                trigger?: "click" | "focus" | "mousedown" | "context-menu" | "hover";
                triggerElement?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                visible?: boolean;
                defaultVisible?: boolean;
                modelValue?: boolean;
                zIndex?: number;
                onOverlayClick?: (context: {
                    e: MouseEvent;
                }) => void;
                onScroll?: (context: {
                    e: WheelEvent;
                }) => void;
                onScrollToBottom?: (context: {
                    e: WheelEvent;
                }) => void;
                onVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
            };
            popupVisible?: boolean;
            defaultPopupVisible?: boolean;
            prefixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
            readonly?: boolean;
            reserveKeyword?: boolean;
            scroll?: {
                bufferSize?: number;
                isFixedRowHeight?: boolean;
                rowHeight?: number;
                threshold?: number;
                type: "lazy" | "virtual";
            };
            selectInputProps?: {
                allowInput?: boolean;
                autoWidth?: boolean;
                autofocus?: boolean;
                borderless?: boolean;
                clearable?: boolean;
                collapsedItems?: (h: typeof import("vue").h, props: {
                    value: import("..").SelectInputValue;
                    collapsedSelectedItems: import("..").SelectInputValue;
                    count: number;
                    onClose: (context: {
                        index: number;
                        e?: MouseEvent;
                    }) => void;
                }) => import("../common").SlotReturnValue;
                disabled?: boolean;
                inputProps?: {
                    align?: "center" | "left" | "right";
                    allowInputOverMax?: boolean;
                    autoWidth?: boolean;
                    autocomplete?: string;
                    autofocus?: boolean;
                    borderless?: boolean;
                    clearable?: boolean;
                    disabled?: boolean;
                    format?: import("..").InputFormatType;
                    inputClass?: string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | any[] | {
                        [className: string]: any;
                    })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                    label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    maxcharacter?: number;
                    maxlength?: string | number;
                    name?: string;
                    placeholder?: string;
                    prefixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                    readonly?: boolean;
                    showClearIconOnEmpty?: boolean;
                    showLimitNumber?: boolean;
                    size?: import("../common").SizeEnum;
                    status?: "error" | "default" | "success" | "warning";
                    suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                    tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    type?: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
                    value?: import("..").InputValue;
                    defaultValue?: import("..").InputValue;
                    modelValue?: import("..").InputValue;
                    onBlur?: (value: import("..").InputValue, context: {
                        e: FocusEvent;
                    }) => void;
                    onChange?: (value: import("..").InputValue, context?: {
                        e?: MouseEvent | CompositionEvent | InputEvent;
                        trigger: "input" | "clear" | "initial";
                    }) => void;
                    onClear?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onCompositionend?: (value: string, context: {
                        e: CompositionEvent;
                    }) => void;
                    onCompositionstart?: (value: string, context: {
                        e: CompositionEvent;
                    }) => void;
                    onEnter?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onFocus?: (value: import("..").InputValue, context: {
                        e: FocusEvent;
                    }) => void;
                    onKeydown?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onKeypress?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onKeyup?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onMouseenter?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onMouseleave?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onPaste?: (context: {
                        e: ClipboardEvent;
                        pasteValue: string;
                    }) => void;
                    onValidate?: (context: {
                        error?: "exceed-maximum" | "below-minimum";
                    }) => void;
                    onWheel?: (context: {
                        e: WheelEvent;
                    }) => void;
                };
                inputValue?: string;
                defaultInputValue?: string;
                keys?: {
                    label?: string;
                    value?: string;
                    children?: string;
                };
                label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                loading?: boolean;
                minCollapsedNum?: number;
                multiple?: boolean;
                panel?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                placeholder?: string;
                popupProps?: {
                    attach?: import("../common").AttachNode;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    delay?: number | number[];
                    destroyOnClose?: boolean;
                    disabled?: boolean;
                    hideEmptyPopup?: boolean;
                    overlayClassName?: string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | any[] | {
                        [className: string]: any;
                    })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                    overlayInnerClassName?: string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | any[] | {
                        [className: string]: any;
                    })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                    overlayInnerStyle?: import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles);
                    overlayStyle?: import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles);
                    placement?: import("..").PopupPlacement;
                    popperOptions?: object;
                    showArrow?: boolean;
                    trigger?: "click" | "focus" | "mousedown" | "context-menu" | "hover";
                    triggerElement?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    visible?: boolean;
                    defaultVisible?: boolean;
                    modelValue?: boolean;
                    zIndex?: number;
                    onOverlayClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onScroll?: (context: {
                        e: WheelEvent;
                    }) => void;
                    onScrollToBottom?: (context: {
                        e: WheelEvent;
                    }) => void;
                    onVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
                };
                popupVisible?: boolean;
                defaultPopupVisible?: boolean;
                readonly?: boolean;
                reserveKeyword?: boolean;
                status?: "error" | "default" | "success" | "warning";
                suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                tag?: string | ((h: typeof import("vue").h, props: {
                    value: string | number;
                }) => import("../common").SlotReturnValue);
                tagInputProps?: {
                    autoWidth?: boolean;
                    clearable?: boolean;
                    collapsedItems?: (h: typeof import("vue").h, props: {
                        value: import("..").TagInputValue;
                        collapsedSelectedItems: import("..").TagInputValue;
                        count: number;
                        onClose: (context: {
                            index: number;
                            e?: MouseEvent;
                        }) => void;
                    }) => import("../common").SlotReturnValue;
                    disabled?: boolean;
                    dragSort?: boolean;
                    excessTagsDisplayType?: "scroll" | "break-line";
                    inputProps?: {
                        align?: "center" | "left" | "right";
                        allowInputOverMax?: boolean;
                        autoWidth?: boolean;
                        autocomplete?: string;
                        autofocus?: boolean;
                        borderless?: boolean;
                        clearable?: boolean;
                        disabled?: boolean;
                        format?: import("..").InputFormatType;
                        inputClass?: string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | {
                            [className: string]: any;
                        } | (string | any[] | {
                            [className: string]: any;
                        })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                        label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        maxcharacter?: number;
                        maxlength?: string | number;
                        name?: string;
                        placeholder?: string;
                        prefixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                        readonly?: boolean;
                        showClearIconOnEmpty?: boolean;
                        showLimitNumber?: boolean;
                        size?: import("../common").SizeEnum;
                        status?: "error" | "default" | "success" | "warning";
                        suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                        tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        type?: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
                        value?: import("..").InputValue;
                        defaultValue?: import("..").InputValue;
                        modelValue?: import("..").InputValue;
                        onBlur?: (value: import("..").InputValue, context: {
                            e: FocusEvent;
                        }) => void;
                        onChange?: (value: import("..").InputValue, context?: {
                            e?: MouseEvent | CompositionEvent | InputEvent;
                            trigger: "input" | "clear" | "initial";
                        }) => void;
                        onClear?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onCompositionend?: (value: string, context: {
                            e: CompositionEvent;
                        }) => void;
                        onCompositionstart?: (value: string, context: {
                            e: CompositionEvent;
                        }) => void;
                        onEnter?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onFocus?: (value: import("..").InputValue, context: {
                            e: FocusEvent;
                        }) => void;
                        onKeydown?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onKeypress?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onKeyup?: (value: import("..").InputValue, context: {
                            e: KeyboardEvent;
                        }) => void;
                        onMouseenter?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onMouseleave?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onPaste?: (context: {
                            e: ClipboardEvent;
                            pasteValue: string;
                        }) => void;
                        onValidate?: (context: {
                            error?: "exceed-maximum" | "below-minimum";
                        }) => void;
                        onWheel?: (context: {
                            e: WheelEvent;
                        }) => void;
                    };
                    inputValue?: string;
                    defaultInputValue?: string;
                    label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    max?: number;
                    minCollapsedNum?: number;
                    placeholder?: string;
                    prefixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                    readonly?: boolean;
                    size?: "small" | "medium" | "large";
                    status?: "error" | "default" | "success" | "warning";
                    suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                    tag?: string | ((h: typeof import("vue").h, props: {
                        value: string | number;
                    }) => import("../common").SlotReturnValue);
                    tagProps?: {
                        closable?: boolean;
                        color?: string;
                        content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                        disabled?: boolean;
                        icon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                        maxWidth?: string | number;
                        shape?: "square" | "round" | "mark";
                        size?: import("../common").SizeEnum;
                        theme?: "default" | "success" | "primary" | "warning" | "danger";
                        variant?: "outline" | "dark" | "light" | "light-outline";
                        onClick?: (context: {
                            e: MouseEvent;
                        }) => void;
                        onClose?: (context: {
                            e: MouseEvent;
                        }) => void;
                    };
                    tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    value?: (string | number)[];
                    defaultValue?: (string | number)[];
                    modelValue?: (string | number)[];
                    valueDisplay?: string | ((h: typeof import("vue").h, props: {
                        value: import("..").TagInputValue;
                        onClose: (index: number, item?: any) => void;
                    }) => import("../common").SlotReturnValue);
                    onBlur?: (value: import("..").TagInputValue, context: {
                        inputValue: string;
                        e: FocusEvent;
                    }) => void;
                    onChange?: (value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void;
                    onClear?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onDragSort?: (context: import("..").TagInputDragSortContext) => void;
                    onEnter?: (value: import("..").TagInputValue, context: {
                        e: KeyboardEvent;
                        inputValue: string;
                    }) => void;
                    onFocus?: (value: import("..").TagInputValue, context: {
                        inputValue: string;
                        e: FocusEvent;
                    }) => void;
                    onInputChange?: (value: string, context?: import("..").InputValueChangeContext) => void;
                    onMouseenter?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onMouseleave?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onPaste?: (context: {
                        e: ClipboardEvent;
                        pasteValue: string;
                    }) => void;
                    onRemove?: (context: import("..").TagInputRemoveContext) => void;
                };
                tagProps?: {
                    closable?: boolean;
                    color?: string;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    icon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                    maxWidth?: string | number;
                    shape?: "square" | "round" | "mark";
                    size?: import("../common").SizeEnum;
                    theme?: "default" | "success" | "primary" | "warning" | "danger";
                    variant?: "outline" | "dark" | "light" | "light-outline";
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClose?: (context: {
                        e: MouseEvent;
                    }) => void;
                };
                tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                value?: string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | boolean | Object | any[] | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
                        (locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number) => number;
                    setUTCSeconds: (sec: number, ms?: number) => number;
                    setMinutes: (min: number, sec?: number, ms?: number) => number;
                    setUTCMinutes: (min: number, sec?: number, ms?: number) => number;
                    setHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setUTCHours: (hours: number, min?: number, sec?: number, ms?: number) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number) => number;
                    setUTCMonth: (month: number, date?: number) => number;
                    setFullYear: (year: number, month?: number, date?: number) => number;
                    setUTCFullYear: (year: number, month?: number, date?: number) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                valueDisplay?: string | ((h: typeof import("vue").h, props: {
                    value: import("..").TagInputValue;
                    onClose: (index: number, item?: any) => void;
                }) => import("../common").SlotReturnValue);
                onBlur?: (value: import("..").SelectInputValue, context: import("..").SelectInputBlurContext) => void;
                onClear?: (context: {
                    e: MouseEvent;
                }) => void;
                onEnter?: (value: import("..").SelectInputValue, context: {
                    e: KeyboardEvent;
                    inputValue: string;
                    tagInputValue?: import("..").TagInputValue;
                }) => void;
                onFocus?: (value: import("..").SelectInputValue, context: import("..").SelectInputFocusContext) => void;
                onInputChange?: (value: string, context?: import("..").SelectInputValueChangeContext) => void;
                onMouseenter?: (context: {
                    e: MouseEvent;
                }) => void;
                onMouseleave?: (context: {
                    e: MouseEvent;
                }) => void;
                onPaste?: (context: {
                    e: ClipboardEvent;
                    pasteValue: string;
                }) => void;
                onPopupVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
                onTagChange?: (value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void;
            };
            showArrow?: boolean;
            size?: import("../common").SizeEnum;
            status?: "error" | "default" | "success" | "warning";
            suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
            tagInputProps?: {
                autoWidth?: boolean;
                clearable?: boolean;
                collapsedItems?: (h: typeof import("vue").h, props: {
                    value: import("..").TagInputValue;
                    collapsedSelectedItems: import("..").TagInputValue;
                    count: number;
                    onClose: (context: {
                        index: number;
                        e?: MouseEvent;
                    }) => void;
                }) => import("../common").SlotReturnValue;
                disabled?: boolean;
                dragSort?: boolean;
                excessTagsDisplayType?: "scroll" | "break-line";
                inputProps?: {
                    align?: "center" | "left" | "right";
                    allowInputOverMax?: boolean;
                    autoWidth?: boolean;
                    autocomplete?: string;
                    autofocus?: boolean;
                    borderless?: boolean;
                    clearable?: boolean;
                    disabled?: boolean;
                    format?: import("..").InputFormatType;
                    inputClass?: string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | {
                        [className: string]: any;
                    } | (string | any[] | {
                        [className: string]: any;
                    })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
                    label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    maxcharacter?: number;
                    maxlength?: string | number;
                    name?: string;
                    placeholder?: string;
                    prefixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                    readonly?: boolean;
                    showClearIconOnEmpty?: boolean;
                    showLimitNumber?: boolean;
                    size?: import("../common").SizeEnum;
                    status?: "error" | "default" | "success" | "warning";
                    suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                    tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    type?: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
                    value?: import("..").InputValue;
                    defaultValue?: import("..").InputValue;
                    modelValue?: import("..").InputValue;
                    onBlur?: (value: import("..").InputValue, context: {
                        e: FocusEvent;
                    }) => void;
                    onChange?: (value: import("..").InputValue, context?: {
                        e?: MouseEvent | CompositionEvent | InputEvent;
                        trigger: "input" | "clear" | "initial";
                    }) => void;
                    onClear?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onCompositionend?: (value: string, context: {
                        e: CompositionEvent;
                    }) => void;
                    onCompositionstart?: (value: string, context: {
                        e: CompositionEvent;
                    }) => void;
                    onEnter?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onFocus?: (value: import("..").InputValue, context: {
                        e: FocusEvent;
                    }) => void;
                    onKeydown?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onKeypress?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onKeyup?: (value: import("..").InputValue, context: {
                        e: KeyboardEvent;
                    }) => void;
                    onMouseenter?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onMouseleave?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onPaste?: (context: {
                        e: ClipboardEvent;
                        pasteValue: string;
                    }) => void;
                    onValidate?: (context: {
                        error?: "exceed-maximum" | "below-minimum";
                    }) => void;
                    onWheel?: (context: {
                        e: WheelEvent;
                    }) => void;
                };
                inputValue?: string;
                defaultInputValue?: string;
                label?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                max?: number;
                minCollapsedNum?: number;
                placeholder?: string;
                prefixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                readonly?: boolean;
                size?: "small" | "medium" | "large";
                status?: "error" | "default" | "success" | "warning";
                suffix?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                suffixIcon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                tag?: string | ((h: typeof import("vue").h, props: {
                    value: string | number;
                }) => import("../common").SlotReturnValue);
                tagProps?: {
                    closable?: boolean;
                    color?: string;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    icon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                    maxWidth?: string | number;
                    shape?: "square" | "round" | "mark";
                    size?: import("../common").SizeEnum;
                    theme?: "default" | "success" | "primary" | "warning" | "danger";
                    variant?: "outline" | "dark" | "light" | "light-outline";
                    onClick?: (context: {
                        e: MouseEvent;
                    }) => void;
                    onClose?: (context: {
                        e: MouseEvent;
                    }) => void;
                };
                tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                value?: (string | number)[];
                defaultValue?: (string | number)[];
                modelValue?: (string | number)[];
                valueDisplay?: string | ((h: typeof import("vue").h, props: {
                    value: import("..").TagInputValue;
                    onClose: (index: number, item?: any) => void;
                }) => import("../common").SlotReturnValue);
                onBlur?: (value: import("..").TagInputValue, context: {
                    inputValue: string;
                    e: FocusEvent;
                }) => void;
                onChange?: (value: import("..").TagInputValue, context: import("..").TagInputChangeContext) => void;
                onClear?: (context: {
                    e: MouseEvent;
                }) => void;
                onClick?: (context: {
                    e: MouseEvent;
                }) => void;
                onDragSort?: (context: import("..").TagInputDragSortContext) => void;
                onEnter?: (value: import("..").TagInputValue, context: {
                    e: KeyboardEvent;
                    inputValue: string;
                }) => void;
                onFocus?: (value: import("..").TagInputValue, context: {
                    inputValue: string;
                    e: FocusEvent;
                }) => void;
                onInputChange?: (value: string, context?: import("..").InputValueChangeContext) => void;
                onMouseenter?: (context: {
                    e: MouseEvent;
                }) => void;
                onMouseleave?: (context: {
                    e: MouseEvent;
                }) => void;
                onPaste?: (context: {
                    e: ClipboardEvent;
                    pasteValue: string;
                }) => void;
                onRemove?: (context: import("..").TagInputRemoveContext) => void;
            };
            tagProps?: {
                closable?: boolean;
                color?: string;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                icon?: (h: typeof import("vue").h) => import("../common").SlotReturnValue;
                maxWidth?: string | number;
                shape?: "square" | "round" | "mark";
                size?: import("../common").SizeEnum;
                theme?: "default" | "success" | "primary" | "warning" | "danger";
                variant?: "outline" | "dark" | "light" | "light-outline";
                onClick?: (context: {
                    e: MouseEvent;
                }) => void;
                onClose?: (context: {
                    e: MouseEvent;
                }) => void;
            };
            tips?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
            value?: string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | any[] | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
            defaultValue?: string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | any[] | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
            modelValue?: string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            } | (string | number | boolean | any[] | import("../common").PlainObject | {
                checkAll?: boolean;
                content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                disabled?: boolean;
                label?: string;
                title?: string;
                value?: string | number;
            } | {
                group: string;
                children: {
                    checkAll?: boolean;
                    content?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    default?: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
                    disabled?: boolean;
                    label?: string;
                    title?: string;
                    value?: string | number;
                }[];
                divider?: boolean;
                label?: string;
            })[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[])[];
            valueDisplay?: string | ((h: typeof import("vue").h, props: {
                value: import("..").SelectValue<import("..").SelectOption>;
                onClose: (index: number) => void;
                displayValue?: import("..").SelectValue<import("..").SelectOption>;
            }) => import("../common").SlotReturnValue);
            valueType?: "object" | "value";
            onBlur?: (context: {
                value: import("..").SelectValue<import("..").SelectOption>;
                e: FocusEvent | KeyboardEvent;
            }) => void;
            onChange?: (value: import("..").SelectValue<import("..").SelectOption>, context: {
                option?: import("..").SelectOption;
                selectedOptions: import("..").SelectOption[];
                trigger: import("..").SelectValueChangeTrigger;
                e?: MouseEvent | KeyboardEvent;
            }) => void;
            onClear?: (context: {
                e: MouseEvent;
            }) => void;
            onCreate?: (value: string | number) => void;
            onEnter?: (context: {
                inputValue: string;
                e: KeyboardEvent;
                value: import("..").SelectValue<import("..").SelectOption>;
            }) => void;
            onFocus?: (context: {
                value: import("..").SelectValue<import("..").SelectOption>;
                e: FocusEvent | KeyboardEvent;
            }) => void;
            onInputChange?: (value: string, context?: import("..").SelectInputValueChangeContext) => void;
            onPopupVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
            onRemove?: (options: import("..").SelectRemoveContext<import("..").SelectOption>) => void;
            onSearch?: (filterWords: string, context: {
                e: KeyboardEvent;
            }) => void;
        };
        showFirstAndLastPageBtn?: boolean;
        showJumper?: boolean;
        showPageNumber?: boolean;
        showPageSize?: boolean;
        showPreviousAndNextBtn?: boolean;
        size?: "small" | "medium";
        theme?: "default" | "simple";
        total?: number;
        totalContent?: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        onChange?: (pageInfo: import("..").PageInfo) => void;
        onCurrentChange?: (current: number, pageInfo: import("..").PageInfo) => void;
        onPageSizeChange?: (pageSize: number, pageInfo: import("..").PageInfo) => void;
    }>;
    globalConfig: import("vue").ComputedRef<{} & import("..").TableConfig>;
    tableFootHeight: import("vue").Ref<number>;
    virtualScrollHeaderPos: import("vue").Ref<{
        left: number;
        top: number;
    }>;
    tableSize: import("vue").ComputedRef<import("../common").SizeEnum>;
    tableWidth: import("vue").Ref<number>;
    tableElmWidth: import("vue").Ref<number>;
    tableRef: import("vue").Ref<HTMLDivElement>;
    tableElmRef: import("vue").Ref<HTMLTableElement>;
    sizeClassNames: {
        small: string;
        medium: string;
        large: string;
        default: string;
        xs: string;
        xl: string;
        block: string;
    };
    tableBaseClass: {
        table: string;
        columnResizableTable: string;
        overflowVisible: string;
        body: string;
        content: string;
        topContent: string;
        bottomContent: string;
        paginationWrap: string;
        tdLastRow: string;
        tdFirstCol: string;
        thCellInner: string;
        tableRowEdit: string;
        cellEditable: string;
        cellEditWrap: string;
        bordered: string;
        striped: string;
        hover: string;
        loading: string;
        rowspanAndColspan: string;
        empty: string;
        emptyRow: string;
        headerFixed: string;
        columnFixed: string;
        widthOverflow: string;
        multipleHeader: string;
        footerAffixed: string;
        horizontalBarAffixed: string;
        affixedHeader: string;
        affixedHeaderElm: string;
        affixedFooterElm: string;
        affixedFooterWrap: string;
        scrollbarDivider: string;
        fullHeight: string;
        resizeLine: string;
        obviousScrollbar: string;
        affixedHeaderWrap: string;
    };
    spansAndLeafNodes: import("vue").ComputedRef<{
        rowspanAndColspanMap: import("./interface").ThRowspanAndColspan;
        leafColumns: import("./interface").BaseTableColumns;
    }>;
    dynamicBaseTableClasses: import("vue").ComputedRef<((string | {
        [x: string]: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | Partial<import("..").TdAffixProps> | import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>;
    })[] | {
        [x: string]: boolean | "multiple" | "single";
    })[]>;
    tableContentStyles: import("vue").ComputedRef<{
        height: string | number;
        maxHeight: string | number;
    }>;
    tableElementStyles: import("vue").ComputedRef<{
        width: string | number;
    }>;
    dividerBottom: import("vue").ComputedRef<number>;
    virtualScrollClasses: {
        cursor: string;
        header: string;
    };
    tableLayoutClasses: {
        auto: string;
        fixed: string;
    };
    tableElmClasses: import("vue").ComputedRef<string[][]>;
    tableContentRef: import("vue").Ref<HTMLDivElement>;
    isFixedHeader: import("vue").Ref<boolean>;
    isWidthOverflow: import("vue").Ref<boolean>;
    isFixedColumn: import("vue").Ref<boolean>;
    rowAndColFixedPosition: import("vue").Ref<import("./interface").RowAndColFixedPosition>;
    showColumnShadow: {
        left: boolean;
        right: boolean;
    };
    thWidthList: import("vue").Ref<{
        [colKey: string]: number;
    }>;
    isPaginateData: import("vue").Ref<boolean>;
    dataSource: import("vue").Ref<{
        [x: string]: any;
        children?: any[];
    }[]>;
    affixHeaderRef: import("vue").Ref<HTMLDivElement>;
    affixFooterRef: import("vue").Ref<HTMLDivElement>;
    bottomContentRef: import("vue").Ref<HTMLDivElement>;
    paginationRef: import("vue").Ref<HTMLDivElement>;
    showAffixHeader: import("vue").Ref<boolean>;
    showAffixFooter: import("vue").Ref<boolean>;
    scrollbarWidth: import("vue").Ref<number>;
    isMultipleHeader: import("vue").ComputedRef<boolean>;
    showRightDivider: import("vue").ComputedRef<boolean>;
    resizeLineRef: import("vue").Ref<HTMLDivElement>;
    resizeLineStyle: {
        display: string;
        height: string;
        left: string;
        bottom: string;
    };
    columnResizeParams: {
        resizeLineRef: import("vue").Ref<HTMLDivElement>;
        resizeLineStyle: {
            display: string;
            height: string;
            left: string;
            bottom: string;
        };
        onColumnMouseover: (e: MouseEvent, col: import("./type").BaseTableCol<import("./type").TableRowData>) => void;
        onColumnMousedown: (e: MouseEvent, col: import("./type").BaseTableCol<import("./type").TableRowData>, index: number) => void;
        setEffectColMap: (nodes: import("./type").BaseTableCol<import("./type").TableRowData>[], parent: import("./type").BaseTableCol<import("./type").TableRowData>) => void;
    };
    horizontalScrollbarRef: import("vue").Ref<HTMLDivElement>;
    tableBodyRef: import("vue").Ref<HTMLTableElement>;
    virtualConfig: {
        visibleData: import("vue").Ref<any[]>;
        translateY: import("vue").Ref<number>;
        scrollHeight: import("vue").Ref<number>;
        isVirtualScroll: import("vue").ComputedRef<boolean>;
        handleScroll: () => void;
        handleRowMounted: (rowData: any) => void;
        scrollToElement: (p: import("../hooks/useVirtualScrollNew").ScrollToElementParams) => void;
    };
    showAffixPagination: import("vue").Ref<boolean>;
    tActiveRow: import("vue").Ref<(string | number)[]>;
    hoverRow: import("vue").Ref<string | number>;
    showElement: import("vue").Ref<boolean>;
    scrollToElement: (params: import("../common").ComponentScrollToElementParams) => void;
    renderPagination: () => JSX.Element;
    renderTNode: (name: string, options?: import("../utils/render-tnode").OptionsType) => any;
    onFixedChange: () => void;
    onHorizontalScroll: (scrollElement?: HTMLElement) => void;
    updateAffixHeaderOrFooter: () => void;
    onInnerVirtualScroll: (e: WheelEvent) => void;
    refreshTable: () => void;
    scrollColumnIntoView: (colKey: string) => void;
    onTableFocus: () => void;
    onTableBlur: () => void;
    onInnerRowClick: (context: import("./type").RowEventContext<import("./type").TableRowData>) => void;
    paginationAffixRef: import("vue").Ref<any>;
    horizontalScrollAffixRef: import("vue").Ref<any>;
    headerTopAffixRef: import("vue").Ref<any>;
    footerBottomAffixRef: import("vue").Ref<any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "show-element-change"[], "show-element-change", {
    data: import("./type").TableRowData[];
    columns: import("./type").BaseTableCol<import("./type").TableRowData>[];
    tableLayout: "fixed" | "auto";
    verticalAlign: "top" | "bottom" | "middle";
    loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    hover: boolean;
    lazyLoad: boolean;
    bordered: boolean;
    stripe: boolean;
    activeRowKeys: (string | number)[];
    defaultActiveRowKeys: (string | number)[];
    activeRowType: "multiple" | "single";
    allowResizeColumnWidth: boolean;
    disableDataPage: boolean;
    disableSpaceInactiveRow: boolean;
    footData: import("./type").TableRowData[];
    footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
    headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
    keyboardRowHover: boolean;
    resizable: boolean;
    rowKey: string;
    showHeader: boolean;
    tableContentWidth: string;
    thDraggable: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const PrimaryTable: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TableColumnController>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
            default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        };
        displayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
            default: import("..").CheckboxGroupValue;
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
        };
        dragSort: {
            type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
            validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("sortablejs").SortableOptions>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
        };
        editableRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        expandIcon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        filterIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                col: import("./type").PrimaryTableCol<import("./type").TableRowData>;
                colIndex: number;
            }) => import("../common").SlotReturnValue>;
        };
        filterRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
            default: import("./type").FilterValue;
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<"multiple" | "single">;
            validator(val: "multiple" | "single"): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TableSort>;
            default: import("./type").TableSort;
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TableSort>;
        };
        sortIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<(context: {
            status: "loading" | "load-more";
        }) => void>;
        onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
        onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
        onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
        onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
            trigger: "cancel" | "confirm";
        }) => void>;
        onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
        onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
        onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
        onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
        onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: import("./type").TableFilterChangeContext<import("./type").TableRowData>) => void>;
        onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
        onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
        onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
        onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
        onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
        activeRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        activeRowType: {
            type: import("vue").PropType<"multiple" | "single">;
            default: "multiple" | "single";
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("../common").AttachNode>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        };
        data: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        firstFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        fixedRows: {
            type: import("vue").PropType<number[]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        footerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        footerSummary: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        headerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        height: {
            type: import("vue").PropType<string | number>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        loadingProps: {
            type: import("vue").PropType<Partial<import("..").TdLoadingProps>>;
        };
        locale: {
            type: import("vue").PropType<import("..").TableConfig>;
        };
        maxHeight: {
            type: import("vue").PropType<string | number>;
        };
        pagination: {
            type: import("vue").PropType<import("..").TdPaginationProps>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
        };
        rowClassName: {
            type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        scroll: {
            type: import("vue").PropType<import("../common").TScroll>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            validator(val: import("../common").SizeEnum): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<"fixed" | "auto">;
            default: "fixed" | "auto";
            validator(val: "fixed" | "auto"): boolean;
        };
        topContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        verticalAlign: {
            type: import("vue").PropType<"top" | "bottom" | "middle">;
            default: "top" | "bottom" | "middle";
            validator(val: "top" | "bottom" | "middle"): boolean;
        };
        onActiveChange: import("vue").PropType<(activeRowKeys: (string | number)[], context: import("./type").ActiveChangeContext<import("./type").TableRowData>) => void>;
        onActiveRowAction: import("vue").PropType<(context: import("./type").ActiveRowActionContext<import("./type").TableRowData>) => void>;
        onColumnResizeChange: import("vue").PropType<(context: {
            columnsWidth: {
                [colKey: string]: number;
            };
        }) => void>;
        onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
        onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onScroll: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollX: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollY: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TableColumnController>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
            default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        };
        displayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
            default: import("..").CheckboxGroupValue;
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
        };
        dragSort: {
            type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
            validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("sortablejs").SortableOptions>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
        };
        editableRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        expandIcon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        filterIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                col: import("./type").PrimaryTableCol<import("./type").TableRowData>;
                colIndex: number;
            }) => import("../common").SlotReturnValue>;
        };
        filterRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
            default: import("./type").FilterValue;
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<"multiple" | "single">;
            validator(val: "multiple" | "single"): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TableSort>;
            default: import("./type").TableSort;
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TableSort>;
        };
        sortIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<(context: {
            status: "loading" | "load-more";
        }) => void>;
        onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
        onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
        onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
        onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
            trigger: "cancel" | "confirm";
        }) => void>;
        onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
        onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
        onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
        onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
        onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: import("./type").TableFilterChangeContext<import("./type").TableRowData>) => void>;
        onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
        onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
        onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
        onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
        onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
        activeRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        activeRowType: {
            type: import("vue").PropType<"multiple" | "single">;
            default: "multiple" | "single";
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("../common").AttachNode>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        };
        data: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        firstFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        fixedRows: {
            type: import("vue").PropType<number[]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        footerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        footerSummary: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        headerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        height: {
            type: import("vue").PropType<string | number>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        loadingProps: {
            type: import("vue").PropType<Partial<import("..").TdLoadingProps>>;
        };
        locale: {
            type: import("vue").PropType<import("..").TableConfig>;
        };
        maxHeight: {
            type: import("vue").PropType<string | number>;
        };
        pagination: {
            type: import("vue").PropType<import("..").TdPaginationProps>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
        };
        rowClassName: {
            type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        scroll: {
            type: import("vue").PropType<import("../common").TScroll>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            validator(val: import("../common").SizeEnum): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<"fixed" | "auto">;
            default: "fixed" | "auto";
            validator(val: "fixed" | "auto"): boolean;
        };
        topContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        verticalAlign: {
            type: import("vue").PropType<"top" | "bottom" | "middle">;
            default: "top" | "bottom" | "middle";
            validator(val: "top" | "bottom" | "middle"): boolean;
        };
        onActiveChange: import("vue").PropType<(activeRowKeys: (string | number)[], context: import("./type").ActiveChangeContext<import("./type").TableRowData>) => void>;
        onActiveRowAction: import("vue").PropType<(context: import("./type").ActiveRowActionContext<import("./type").TableRowData>) => void>;
        onColumnResizeChange: import("vue").PropType<(context: {
            columnsWidth: {
                [colKey: string]: number;
            };
        }) => void>;
        onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
        onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onScroll: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollX: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollY: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
    }>>, {
        sort: import("./type").TableSort;
        data: import("./type").TableRowData[];
        columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        tableLayout: "fixed" | "auto";
        verticalAlign: "top" | "bottom" | "middle";
        loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        hover: boolean;
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "multiple" | "single";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        columnControllerVisible: boolean;
        defaultColumnControllerVisible: boolean;
        displayColumns: import("..").CheckboxGroupValue;
        expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
        expandOnRowClick: boolean;
        expandedRowKeys: (string | number)[];
        defaultExpandedRowKeys: (string | number)[];
        filterValue: import("./type").FilterValue;
        hideSortTips: boolean;
        multipleSort: boolean;
        reserveSelectedRowOnPaginate: boolean;
        rowSelectionAllowUncheck: boolean;
        selectOnRowClick: boolean;
        selectedRowKeys: (string | number)[];
        defaultSelectedRowKeys: (string | number)[];
        showSortColumnBgColor: boolean;
        sortOnRowDraggable: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TableColumnController>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
            default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        };
        displayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
            default: import("..").CheckboxGroupValue;
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
        };
        dragSort: {
            type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
            validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("sortablejs").SortableOptions>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
        };
        editableRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        expandIcon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        filterIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                col: import("./type").PrimaryTableCol<import("./type").TableRowData>;
                colIndex: number;
            }) => import("../common").SlotReturnValue>;
        };
        filterRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
            default: import("./type").FilterValue;
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<"multiple" | "single">;
            validator(val: "multiple" | "single"): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TableSort>;
            default: import("./type").TableSort;
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TableSort>;
        };
        sortIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<(context: {
            status: "loading" | "load-more";
        }) => void>;
        onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
        onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
        onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
        onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
            trigger: "cancel" | "confirm";
        }) => void>;
        onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
        onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
        onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
        onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
        onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: import("./type").TableFilterChangeContext<import("./type").TableRowData>) => void>;
        onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
        onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
        onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
        onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
        onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
        activeRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        activeRowType: {
            type: import("vue").PropType<"multiple" | "single">;
            default: "multiple" | "single";
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("../common").AttachNode>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        };
        data: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        firstFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        fixedRows: {
            type: import("vue").PropType<number[]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        footerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        footerSummary: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        headerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        height: {
            type: import("vue").PropType<string | number>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        loadingProps: {
            type: import("vue").PropType<Partial<import("..").TdLoadingProps>>;
        };
        locale: {
            type: import("vue").PropType<import("..").TableConfig>;
        };
        maxHeight: {
            type: import("vue").PropType<string | number>;
        };
        pagination: {
            type: import("vue").PropType<import("..").TdPaginationProps>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
        };
        rowClassName: {
            type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        scroll: {
            type: import("vue").PropType<import("../common").TScroll>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            validator(val: import("../common").SizeEnum): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<"fixed" | "auto">;
            default: "fixed" | "auto";
            validator(val: "fixed" | "auto"): boolean;
        };
        topContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        verticalAlign: {
            type: import("vue").PropType<"top" | "bottom" | "middle">;
            default: "top" | "bottom" | "middle";
            validator(val: "top" | "bottom" | "middle"): boolean;
        };
        onActiveChange: import("vue").PropType<(activeRowKeys: (string | number)[], context: import("./type").ActiveChangeContext<import("./type").TableRowData>) => void>;
        onActiveRowAction: import("vue").PropType<(context: import("./type").ActiveRowActionContext<import("./type").TableRowData>) => void>;
        onColumnResizeChange: import("vue").PropType<(context: {
            columnsWidth: {
                [colKey: string]: number;
            };
        }) => void>;
        onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
        onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onScroll: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollX: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollY: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        sort: import("./type").TableSort;
        data: import("./type").TableRowData[];
        columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        tableLayout: "fixed" | "auto";
        verticalAlign: "top" | "bottom" | "middle";
        loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        hover: boolean;
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "multiple" | "single";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        columnControllerVisible: boolean;
        defaultColumnControllerVisible: boolean;
        displayColumns: import("..").CheckboxGroupValue;
        expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
        expandOnRowClick: boolean;
        expandedRowKeys: (string | number)[];
        defaultExpandedRowKeys: (string | number)[];
        filterValue: import("./type").FilterValue;
        hideSortTips: boolean;
        multipleSort: boolean;
        reserveSelectedRowOnPaginate: boolean;
        rowSelectionAllowUncheck: boolean;
        selectOnRowClick: boolean;
        selectedRowKeys: (string | number)[];
        defaultSelectedRowKeys: (string | number)[];
        showSortColumnBgColor: boolean;
        sortOnRowDraggable: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    asyncLoading: {
        type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
    };
    columnController: {
        type: import("vue").PropType<import("./type").TableColumnController>;
    };
    columnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultColumnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    columns: {
        type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
        default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
    };
    displayColumns: {
        type: import("vue").PropType<import("..").CheckboxGroupValue>;
        default: import("..").CheckboxGroupValue;
    };
    defaultDisplayColumns: {
        type: import("vue").PropType<import("..").CheckboxGroupValue>;
    };
    dragSort: {
        type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
        validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
    };
    dragSortOptions: {
        type: import("vue").PropType<import("sortablejs").SortableOptions>;
    };
    editableCellState: {
        type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
    };
    editableRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    expandIcon: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        default: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
    };
    expandOnRowClick: BooleanConstructor;
    expandedRow: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
    };
    expandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: (string | number)[];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    filterIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            col: import("./type").PrimaryTableCol<import("./type").TableRowData>;
            colIndex: number;
        }) => import("../common").SlotReturnValue>;
    };
    filterRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    filterValue: {
        type: import("vue").PropType<import("./type").FilterValue>;
        default: import("./type").FilterValue;
    };
    defaultFilterValue: {
        type: import("vue").PropType<import("./type").FilterValue>;
    };
    hideSortTips: BooleanConstructor;
    indeterminateSelectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    multipleSort: BooleanConstructor;
    reserveSelectedRowOnPaginate: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowSelectionAllowUncheck: BooleanConstructor;
    rowSelectionType: {
        type: import("vue").PropType<"multiple" | "single">;
        validator(val: "multiple" | "single"): boolean;
    };
    selectOnRowClick: BooleanConstructor;
    selectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: (string | number)[];
    };
    defaultSelectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    showSortColumnBgColor: BooleanConstructor;
    sort: {
        type: import("vue").PropType<import("./type").TableSort>;
        default: import("./type").TableSort;
    };
    defaultSort: {
        type: import("vue").PropType<import("./type").TableSort>;
    };
    sortIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    sortOnRowDraggable: BooleanConstructor;
    onAsyncLoadingClick: import("vue").PropType<(context: {
        status: "loading" | "load-more";
    }) => void>;
    onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
    onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
    onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
    onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
        trigger: "cancel" | "confirm";
    }) => void>;
    onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
    onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
    onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
    onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
    onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: import("./type").TableFilterChangeContext<import("./type").TableRowData>) => void>;
    onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
    onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
    onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
    onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
    onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
    activeRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: (string | number)[];
    };
    defaultActiveRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    activeRowType: {
        type: import("vue").PropType<"multiple" | "single">;
        default: "multiple" | "single";
    };
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    attach: {
        type: import("vue").PropType<import("../common").AttachNode>;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    cellEmptyContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
    };
    data: {
        type: import("vue").PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    disableDataPage: BooleanConstructor;
    disableSpaceInactiveRow: {
        type: BooleanConstructor;
        default: any;
    };
    empty: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    };
    firstFullRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    fixedRows: {
        type: import("vue").PropType<number[]>;
    };
    footData: {
        type: import("vue").PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    footerAffixProps: {
        type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
    };
    footerAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        default: boolean | Partial<import("..").TdAffixProps>;
    };
    footerSummary: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    headerAffixProps: {
        type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
    };
    headerAffixedTop: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        default: boolean | Partial<import("..").TdAffixProps>;
    };
    height: {
        type: import("vue").PropType<string | number>;
    };
    horizontalScrollAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
    };
    hover: BooleanConstructor;
    keyboardRowHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    lastFullRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    lazyLoad: BooleanConstructor;
    loading: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    };
    loadingProps: {
        type: import("vue").PropType<Partial<import("..").TdLoadingProps>>;
    };
    locale: {
        type: import("vue").PropType<import("..").TableConfig>;
    };
    maxHeight: {
        type: import("vue").PropType<string | number>;
    };
    pagination: {
        type: import("vue").PropType<import("..").TdPaginationProps>;
    };
    paginationAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
    };
    rowClassName: {
        type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    rowspanAndColspanInFooter: {
        type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    scroll: {
        type: import("vue").PropType<import("../common").TScroll>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        validator(val: import("../common").SizeEnum): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<"fixed" | "auto">;
        default: "fixed" | "auto";
        validator(val: "fixed" | "auto"): boolean;
    };
    topContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    verticalAlign: {
        type: import("vue").PropType<"top" | "bottom" | "middle">;
        default: "top" | "bottom" | "middle";
        validator(val: "top" | "bottom" | "middle"): boolean;
    };
    onActiveChange: import("vue").PropType<(activeRowKeys: (string | number)[], context: import("./type").ActiveChangeContext<import("./type").TableRowData>) => void>;
    onActiveRowAction: import("vue").PropType<(context: import("./type").ActiveRowActionContext<import("./type").TableRowData>) => void>;
    onColumnResizeChange: import("vue").PropType<(context: {
        columnsWidth: {
            [colKey: string]: number;
        };
    }) => void>;
    onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
    onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onScroll: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollX: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollY: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    sort: import("./type").TableSort;
    data: import("./type").TableRowData[];
    columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
    tableLayout: "fixed" | "auto";
    verticalAlign: "top" | "bottom" | "middle";
    loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    hover: boolean;
    lazyLoad: boolean;
    bordered: boolean;
    stripe: boolean;
    activeRowKeys: (string | number)[];
    defaultActiveRowKeys: (string | number)[];
    activeRowType: "multiple" | "single";
    allowResizeColumnWidth: boolean;
    disableDataPage: boolean;
    disableSpaceInactiveRow: boolean;
    footData: import("./type").TableRowData[];
    footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
    headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
    keyboardRowHover: boolean;
    resizable: boolean;
    rowKey: string;
    showHeader: boolean;
    tableContentWidth: string;
    columnControllerVisible: boolean;
    defaultColumnControllerVisible: boolean;
    displayColumns: import("..").CheckboxGroupValue;
    expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
    expandOnRowClick: boolean;
    expandedRowKeys: (string | number)[];
    defaultExpandedRowKeys: (string | number)[];
    filterValue: import("./type").FilterValue;
    hideSortTips: boolean;
    multipleSort: boolean;
    reserveSelectedRowOnPaginate: boolean;
    rowSelectionAllowUncheck: boolean;
    selectOnRowClick: boolean;
    selectedRowKeys: (string | number)[];
    defaultSelectedRowKeys: (string | number)[];
    showSortColumnBgColor: boolean;
    sortOnRowDraggable: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const EnhancedTable: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        beforeDragSort: {
            type: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => boolean>;
        };
        expandedTreeNodes: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultExpandedTreeNodes: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        tree: {
            type: import("vue").PropType<import("./type").TableTreeConfig>;
        };
        treeExpandAndFoldIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                type: "expand" | "fold";
                row: import("./type").TableRowData;
            }) => import("../common").SlotReturnValue>;
        };
        onAbnormalDragSort: import("vue").PropType<(context: import("./type").TableAbnormalDragSortContext<import("./type").TableRowData>) => void>;
        onExpandedTreeNodesChange: import("vue").PropType<(expandedTreeNodes: (string | number)[], options: import("./type").TableTreeNodeExpandOptions<import("./type").TableRowData>) => void>;
        onTreeExpandChange: import("vue").PropType<(context: import("./type").TableTreeExpandChangeContext<import("./type").TableRowData>) => void>;
        asyncLoading: {
            type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TableColumnController>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
            default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        };
        displayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
            default: import("..").CheckboxGroupValue;
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
        };
        dragSort: {
            type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
            validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("sortablejs").SortableOptions>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
        };
        editableRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        expandIcon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        filterIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                col: import("./type").PrimaryTableCol<import("./type").TableRowData>;
                colIndex: number;
            }) => import("../common").SlotReturnValue>;
        };
        filterRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
            default: import("./type").FilterValue;
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<"multiple" | "single">;
            validator(val: "multiple" | "single"): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TableSort>;
            default: import("./type").TableSort;
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TableSort>;
        };
        sortIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<(context: {
            status: "loading" | "load-more";
        }) => void>;
        onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
        onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
        onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
        onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
            trigger: "cancel" | "confirm";
        }) => void>;
        onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
        onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
        onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
        onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
        onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: import("./type").TableFilterChangeContext<import("./type").TableRowData>) => void>;
        onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
        onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
        onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
        onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
        onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
        activeRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        activeRowType: {
            type: import("vue").PropType<"multiple" | "single">;
            default: "multiple" | "single";
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("../common").AttachNode>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        };
        data: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        firstFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        fixedRows: {
            type: import("vue").PropType<number[]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        footerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        footerSummary: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        headerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        height: {
            type: import("vue").PropType<string | number>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        loadingProps: {
            type: import("vue").PropType<Partial<import("..").TdLoadingProps>>;
        };
        locale: {
            type: import("vue").PropType<import("..").TableConfig>;
        };
        maxHeight: {
            type: import("vue").PropType<string | number>;
        };
        pagination: {
            type: import("vue").PropType<import("..").TdPaginationProps>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
        };
        rowClassName: {
            type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        scroll: {
            type: import("vue").PropType<import("../common").TScroll>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            validator(val: import("../common").SizeEnum): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<"fixed" | "auto">;
            default: "fixed" | "auto";
            validator(val: "fixed" | "auto"): boolean;
        };
        topContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        verticalAlign: {
            type: import("vue").PropType<"top" | "bottom" | "middle">;
            default: "top" | "bottom" | "middle";
            validator(val: "top" | "bottom" | "middle"): boolean;
        };
        onActiveChange: import("vue").PropType<(activeRowKeys: (string | number)[], context: import("./type").ActiveChangeContext<import("./type").TableRowData>) => void>;
        onActiveRowAction: import("vue").PropType<(context: import("./type").ActiveRowActionContext<import("./type").TableRowData>) => void>;
        onColumnResizeChange: import("vue").PropType<(context: {
            columnsWidth: {
                [colKey: string]: number;
            };
        }) => void>;
        onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
        onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onScroll: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollX: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollY: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        beforeDragSort: {
            type: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => boolean>;
        };
        expandedTreeNodes: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultExpandedTreeNodes: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        tree: {
            type: import("vue").PropType<import("./type").TableTreeConfig>;
        };
        treeExpandAndFoldIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                type: "expand" | "fold";
                row: import("./type").TableRowData;
            }) => import("../common").SlotReturnValue>;
        };
        onAbnormalDragSort: import("vue").PropType<(context: import("./type").TableAbnormalDragSortContext<import("./type").TableRowData>) => void>;
        onExpandedTreeNodesChange: import("vue").PropType<(expandedTreeNodes: (string | number)[], options: import("./type").TableTreeNodeExpandOptions<import("./type").TableRowData>) => void>;
        onTreeExpandChange: import("vue").PropType<(context: import("./type").TableTreeExpandChangeContext<import("./type").TableRowData>) => void>;
        asyncLoading: {
            type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TableColumnController>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
            default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        };
        displayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
            default: import("..").CheckboxGroupValue;
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
        };
        dragSort: {
            type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
            validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("sortablejs").SortableOptions>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
        };
        editableRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        expandIcon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        filterIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                col: import("./type").PrimaryTableCol<import("./type").TableRowData>;
                colIndex: number;
            }) => import("../common").SlotReturnValue>;
        };
        filterRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
            default: import("./type").FilterValue;
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<"multiple" | "single">;
            validator(val: "multiple" | "single"): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TableSort>;
            default: import("./type").TableSort;
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TableSort>;
        };
        sortIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<(context: {
            status: "loading" | "load-more";
        }) => void>;
        onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
        onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
        onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
        onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
            trigger: "cancel" | "confirm";
        }) => void>;
        onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
        onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
        onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
        onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
        onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: import("./type").TableFilterChangeContext<import("./type").TableRowData>) => void>;
        onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
        onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
        onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
        onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
        onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
        activeRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        activeRowType: {
            type: import("vue").PropType<"multiple" | "single">;
            default: "multiple" | "single";
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("../common").AttachNode>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        };
        data: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        firstFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        fixedRows: {
            type: import("vue").PropType<number[]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        footerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        footerSummary: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        headerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        height: {
            type: import("vue").PropType<string | number>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        loadingProps: {
            type: import("vue").PropType<Partial<import("..").TdLoadingProps>>;
        };
        locale: {
            type: import("vue").PropType<import("..").TableConfig>;
        };
        maxHeight: {
            type: import("vue").PropType<string | number>;
        };
        pagination: {
            type: import("vue").PropType<import("..").TdPaginationProps>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
        };
        rowClassName: {
            type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        scroll: {
            type: import("vue").PropType<import("../common").TScroll>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            validator(val: import("../common").SizeEnum): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<"fixed" | "auto">;
            default: "fixed" | "auto";
            validator(val: "fixed" | "auto"): boolean;
        };
        topContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        verticalAlign: {
            type: import("vue").PropType<"top" | "bottom" | "middle">;
            default: "top" | "bottom" | "middle";
            validator(val: "top" | "bottom" | "middle"): boolean;
        };
        onActiveChange: import("vue").PropType<(activeRowKeys: (string | number)[], context: import("./type").ActiveChangeContext<import("./type").TableRowData>) => void>;
        onActiveRowAction: import("vue").PropType<(context: import("./type").ActiveRowActionContext<import("./type").TableRowData>) => void>;
        onColumnResizeChange: import("vue").PropType<(context: {
            columnsWidth: {
                [colKey: string]: number;
            };
        }) => void>;
        onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
        onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onScroll: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollX: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollY: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
    }>>, {
        sort: import("./type").TableSort;
        data: import("./type").TableRowData[];
        columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        tableLayout: "fixed" | "auto";
        verticalAlign: "top" | "bottom" | "middle";
        loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        hover: boolean;
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "multiple" | "single";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        columnControllerVisible: boolean;
        defaultColumnControllerVisible: boolean;
        displayColumns: import("..").CheckboxGroupValue;
        expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
        expandOnRowClick: boolean;
        expandedRowKeys: (string | number)[];
        defaultExpandedRowKeys: (string | number)[];
        filterValue: import("./type").FilterValue;
        hideSortTips: boolean;
        multipleSort: boolean;
        reserveSelectedRowOnPaginate: boolean;
        rowSelectionAllowUncheck: boolean;
        selectOnRowClick: boolean;
        selectedRowKeys: (string | number)[];
        defaultSelectedRowKeys: (string | number)[];
        showSortColumnBgColor: boolean;
        sortOnRowDraggable: boolean;
        expandedTreeNodes: (string | number)[];
        defaultExpandedTreeNodes: (string | number)[];
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        beforeDragSort: {
            type: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => boolean>;
        };
        expandedTreeNodes: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultExpandedTreeNodes: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        tree: {
            type: import("vue").PropType<import("./type").TableTreeConfig>;
        };
        treeExpandAndFoldIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                type: "expand" | "fold";
                row: import("./type").TableRowData;
            }) => import("../common").SlotReturnValue>;
        };
        onAbnormalDragSort: import("vue").PropType<(context: import("./type").TableAbnormalDragSortContext<import("./type").TableRowData>) => void>;
        onExpandedTreeNodesChange: import("vue").PropType<(expandedTreeNodes: (string | number)[], options: import("./type").TableTreeNodeExpandOptions<import("./type").TableRowData>) => void>;
        onTreeExpandChange: import("vue").PropType<(context: import("./type").TableTreeExpandChangeContext<import("./type").TableRowData>) => void>;
        asyncLoading: {
            type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TableColumnController>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
            default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        };
        displayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
            default: import("..").CheckboxGroupValue;
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
        };
        dragSort: {
            type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
            validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("sortablejs").SortableOptions>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
        };
        editableRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        expandIcon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        filterIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                col: import("./type").PrimaryTableCol<import("./type").TableRowData>;
                colIndex: number;
            }) => import("../common").SlotReturnValue>;
        };
        filterRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
            default: import("./type").FilterValue;
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<"multiple" | "single">;
            validator(val: "multiple" | "single"): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TableSort>;
            default: import("./type").TableSort;
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TableSort>;
        };
        sortIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<(context: {
            status: "loading" | "load-more";
        }) => void>;
        onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
        onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
        onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
        onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
            trigger: "cancel" | "confirm";
        }) => void>;
        onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
        onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
        onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
        onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
        onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: import("./type").TableFilterChangeContext<import("./type").TableRowData>) => void>;
        onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
        onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
        onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
        onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
        onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
        activeRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        activeRowType: {
            type: import("vue").PropType<"multiple" | "single">;
            default: "multiple" | "single";
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("../common").AttachNode>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        };
        data: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        firstFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        fixedRows: {
            type: import("vue").PropType<number[]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        footerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        footerSummary: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        headerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        height: {
            type: import("vue").PropType<string | number>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        loadingProps: {
            type: import("vue").PropType<Partial<import("..").TdLoadingProps>>;
        };
        locale: {
            type: import("vue").PropType<import("..").TableConfig>;
        };
        maxHeight: {
            type: import("vue").PropType<string | number>;
        };
        pagination: {
            type: import("vue").PropType<import("..").TdPaginationProps>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
        };
        rowClassName: {
            type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        scroll: {
            type: import("vue").PropType<import("../common").TScroll>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            validator(val: import("../common").SizeEnum): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<"fixed" | "auto">;
            default: "fixed" | "auto";
            validator(val: "fixed" | "auto"): boolean;
        };
        topContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        verticalAlign: {
            type: import("vue").PropType<"top" | "bottom" | "middle">;
            default: "top" | "bottom" | "middle";
            validator(val: "top" | "bottom" | "middle"): boolean;
        };
        onActiveChange: import("vue").PropType<(activeRowKeys: (string | number)[], context: import("./type").ActiveChangeContext<import("./type").TableRowData>) => void>;
        onActiveRowAction: import("vue").PropType<(context: import("./type").ActiveRowActionContext<import("./type").TableRowData>) => void>;
        onColumnResizeChange: import("vue").PropType<(context: {
            columnsWidth: {
                [colKey: string]: number;
            };
        }) => void>;
        onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
        onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onScroll: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollX: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollY: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        sort: import("./type").TableSort;
        data: import("./type").TableRowData[];
        columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        tableLayout: "fixed" | "auto";
        verticalAlign: "top" | "bottom" | "middle";
        loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        hover: boolean;
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "multiple" | "single";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        columnControllerVisible: boolean;
        defaultColumnControllerVisible: boolean;
        displayColumns: import("..").CheckboxGroupValue;
        expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
        expandOnRowClick: boolean;
        expandedRowKeys: (string | number)[];
        defaultExpandedRowKeys: (string | number)[];
        filterValue: import("./type").FilterValue;
        hideSortTips: boolean;
        multipleSort: boolean;
        reserveSelectedRowOnPaginate: boolean;
        rowSelectionAllowUncheck: boolean;
        selectOnRowClick: boolean;
        selectedRowKeys: (string | number)[];
        defaultSelectedRowKeys: (string | number)[];
        showSortColumnBgColor: boolean;
        sortOnRowDraggable: boolean;
        expandedTreeNodes: (string | number)[];
        defaultExpandedTreeNodes: (string | number)[];
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    beforeDragSort: {
        type: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => boolean>;
    };
    expandedTreeNodes: {
        type: import("vue").PropType<(string | number)[]>;
        default: (string | number)[];
    };
    defaultExpandedTreeNodes: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    tree: {
        type: import("vue").PropType<import("./type").TableTreeConfig>;
    };
    treeExpandAndFoldIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            type: "expand" | "fold";
            row: import("./type").TableRowData;
        }) => import("../common").SlotReturnValue>;
    };
    onAbnormalDragSort: import("vue").PropType<(context: import("./type").TableAbnormalDragSortContext<import("./type").TableRowData>) => void>;
    onExpandedTreeNodesChange: import("vue").PropType<(expandedTreeNodes: (string | number)[], options: import("./type").TableTreeNodeExpandOptions<import("./type").TableRowData>) => void>;
    onTreeExpandChange: import("vue").PropType<(context: import("./type").TableTreeExpandChangeContext<import("./type").TableRowData>) => void>;
    asyncLoading: {
        type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
    };
    columnController: {
        type: import("vue").PropType<import("./type").TableColumnController>;
    };
    columnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultColumnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    columns: {
        type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
        default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
    };
    displayColumns: {
        type: import("vue").PropType<import("..").CheckboxGroupValue>;
        default: import("..").CheckboxGroupValue;
    };
    defaultDisplayColumns: {
        type: import("vue").PropType<import("..").CheckboxGroupValue>;
    };
    dragSort: {
        type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
        validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
    };
    dragSortOptions: {
        type: import("vue").PropType<import("sortablejs").SortableOptions>;
    };
    editableCellState: {
        type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
    };
    editableRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    expandIcon: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        default: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
    };
    expandOnRowClick: BooleanConstructor;
    expandedRow: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
    };
    expandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: (string | number)[];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    filterIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            col: import("./type").PrimaryTableCol<import("./type").TableRowData>;
            colIndex: number;
        }) => import("../common").SlotReturnValue>;
    };
    filterRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    filterValue: {
        type: import("vue").PropType<import("./type").FilterValue>;
        default: import("./type").FilterValue;
    };
    defaultFilterValue: {
        type: import("vue").PropType<import("./type").FilterValue>;
    };
    hideSortTips: BooleanConstructor;
    indeterminateSelectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    multipleSort: BooleanConstructor;
    reserveSelectedRowOnPaginate: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowSelectionAllowUncheck: BooleanConstructor;
    rowSelectionType: {
        type: import("vue").PropType<"multiple" | "single">;
        validator(val: "multiple" | "single"): boolean;
    };
    selectOnRowClick: BooleanConstructor;
    selectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: (string | number)[];
    };
    defaultSelectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    showSortColumnBgColor: BooleanConstructor;
    sort: {
        type: import("vue").PropType<import("./type").TableSort>;
        default: import("./type").TableSort;
    };
    defaultSort: {
        type: import("vue").PropType<import("./type").TableSort>;
    };
    sortIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    sortOnRowDraggable: BooleanConstructor;
    onAsyncLoadingClick: import("vue").PropType<(context: {
        status: "loading" | "load-more";
    }) => void>;
    onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
    onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
    onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
    onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
        trigger: "cancel" | "confirm";
    }) => void>;
    onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
    onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
    onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
    onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
    onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: import("./type").TableFilterChangeContext<import("./type").TableRowData>) => void>;
    onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
    onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
    onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
    onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
    onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
    activeRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: (string | number)[];
    };
    defaultActiveRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    activeRowType: {
        type: import("vue").PropType<"multiple" | "single">;
        default: "multiple" | "single";
    };
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    attach: {
        type: import("vue").PropType<import("../common").AttachNode>;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    cellEmptyContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
    };
    data: {
        type: import("vue").PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    disableDataPage: BooleanConstructor;
    disableSpaceInactiveRow: {
        type: BooleanConstructor;
        default: any;
    };
    empty: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    };
    firstFullRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    fixedRows: {
        type: import("vue").PropType<number[]>;
    };
    footData: {
        type: import("vue").PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    footerAffixProps: {
        type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
    };
    footerAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        default: boolean | Partial<import("..").TdAffixProps>;
    };
    footerSummary: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    headerAffixProps: {
        type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
    };
    headerAffixedTop: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        default: boolean | Partial<import("..").TdAffixProps>;
    };
    height: {
        type: import("vue").PropType<string | number>;
    };
    horizontalScrollAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
    };
    hover: BooleanConstructor;
    keyboardRowHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    lastFullRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    lazyLoad: BooleanConstructor;
    loading: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    };
    loadingProps: {
        type: import("vue").PropType<Partial<import("..").TdLoadingProps>>;
    };
    locale: {
        type: import("vue").PropType<import("..").TableConfig>;
    };
    maxHeight: {
        type: import("vue").PropType<string | number>;
    };
    pagination: {
        type: import("vue").PropType<import("..").TdPaginationProps>;
    };
    paginationAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
    };
    rowClassName: {
        type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    rowspanAndColspanInFooter: {
        type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    scroll: {
        type: import("vue").PropType<import("../common").TScroll>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        validator(val: import("../common").SizeEnum): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<"fixed" | "auto">;
        default: "fixed" | "auto";
        validator(val: "fixed" | "auto"): boolean;
    };
    topContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    verticalAlign: {
        type: import("vue").PropType<"top" | "bottom" | "middle">;
        default: "top" | "bottom" | "middle";
        validator(val: "top" | "bottom" | "middle"): boolean;
    };
    onActiveChange: import("vue").PropType<(activeRowKeys: (string | number)[], context: import("./type").ActiveChangeContext<import("./type").TableRowData>) => void>;
    onActiveRowAction: import("vue").PropType<(context: import("./type").ActiveRowActionContext<import("./type").TableRowData>) => void>;
    onColumnResizeChange: import("vue").PropType<(context: {
        columnsWidth: {
            [colKey: string]: number;
        };
    }) => void>;
    onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
    onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onScroll: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollX: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollY: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    sort: import("./type").TableSort;
    data: import("./type").TableRowData[];
    columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
    tableLayout: "fixed" | "auto";
    verticalAlign: "top" | "bottom" | "middle";
    loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    hover: boolean;
    lazyLoad: boolean;
    bordered: boolean;
    stripe: boolean;
    activeRowKeys: (string | number)[];
    defaultActiveRowKeys: (string | number)[];
    activeRowType: "multiple" | "single";
    allowResizeColumnWidth: boolean;
    disableDataPage: boolean;
    disableSpaceInactiveRow: boolean;
    footData: import("./type").TableRowData[];
    footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
    headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
    keyboardRowHover: boolean;
    resizable: boolean;
    rowKey: string;
    showHeader: boolean;
    tableContentWidth: string;
    columnControllerVisible: boolean;
    defaultColumnControllerVisible: boolean;
    displayColumns: import("..").CheckboxGroupValue;
    expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
    expandOnRowClick: boolean;
    expandedRowKeys: (string | number)[];
    defaultExpandedRowKeys: (string | number)[];
    filterValue: import("./type").FilterValue;
    hideSortTips: boolean;
    multipleSort: boolean;
    reserveSelectedRowOnPaginate: boolean;
    rowSelectionAllowUncheck: boolean;
    selectOnRowClick: boolean;
    selectedRowKeys: (string | number)[];
    defaultSelectedRowKeys: (string | number)[];
    showSortColumnBgColor: boolean;
    sortOnRowDraggable: boolean;
    expandedTreeNodes: (string | number)[];
    defaultExpandedTreeNodes: (string | number)[];
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const Table: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TableColumnController>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
            default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        };
        displayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
            default: import("..").CheckboxGroupValue;
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
        };
        dragSort: {
            type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
            validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("sortablejs").SortableOptions>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
        };
        editableRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        expandIcon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        filterIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                col: import("./type").PrimaryTableCol<import("./type").TableRowData>;
                colIndex: number;
            }) => import("../common").SlotReturnValue>;
        };
        filterRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
            default: import("./type").FilterValue;
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<"multiple" | "single">;
            validator(val: "multiple" | "single"): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TableSort>;
            default: import("./type").TableSort;
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TableSort>;
        };
        sortIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<(context: {
            status: "loading" | "load-more";
        }) => void>;
        onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
        onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
        onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
        onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
            trigger: "cancel" | "confirm";
        }) => void>;
        onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
        onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
        onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
        onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
        onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: import("./type").TableFilterChangeContext<import("./type").TableRowData>) => void>;
        onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
        onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
        onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
        onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
        onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
        activeRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        activeRowType: {
            type: import("vue").PropType<"multiple" | "single">;
            default: "multiple" | "single";
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("../common").AttachNode>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        };
        data: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        firstFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        fixedRows: {
            type: import("vue").PropType<number[]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        footerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        footerSummary: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        headerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        height: {
            type: import("vue").PropType<string | number>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        loadingProps: {
            type: import("vue").PropType<Partial<import("..").TdLoadingProps>>;
        };
        locale: {
            type: import("vue").PropType<import("..").TableConfig>;
        };
        maxHeight: {
            type: import("vue").PropType<string | number>;
        };
        pagination: {
            type: import("vue").PropType<import("..").TdPaginationProps>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
        };
        rowClassName: {
            type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        scroll: {
            type: import("vue").PropType<import("../common").TScroll>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            validator(val: import("../common").SizeEnum): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<"fixed" | "auto">;
            default: "fixed" | "auto";
            validator(val: "fixed" | "auto"): boolean;
        };
        topContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        verticalAlign: {
            type: import("vue").PropType<"top" | "bottom" | "middle">;
            default: "top" | "bottom" | "middle";
            validator(val: "top" | "bottom" | "middle"): boolean;
        };
        onActiveChange: import("vue").PropType<(activeRowKeys: (string | number)[], context: import("./type").ActiveChangeContext<import("./type").TableRowData>) => void>;
        onActiveRowAction: import("vue").PropType<(context: import("./type").ActiveRowActionContext<import("./type").TableRowData>) => void>;
        onColumnResizeChange: import("vue").PropType<(context: {
            columnsWidth: {
                [colKey: string]: number;
            };
        }) => void>;
        onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
        onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onScroll: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollX: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollY: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TableColumnController>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
            default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        };
        displayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
            default: import("..").CheckboxGroupValue;
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
        };
        dragSort: {
            type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
            validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("sortablejs").SortableOptions>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
        };
        editableRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        expandIcon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        filterIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                col: import("./type").PrimaryTableCol<import("./type").TableRowData>;
                colIndex: number;
            }) => import("../common").SlotReturnValue>;
        };
        filterRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
            default: import("./type").FilterValue;
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<"multiple" | "single">;
            validator(val: "multiple" | "single"): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TableSort>;
            default: import("./type").TableSort;
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TableSort>;
        };
        sortIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<(context: {
            status: "loading" | "load-more";
        }) => void>;
        onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
        onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
        onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
        onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
            trigger: "cancel" | "confirm";
        }) => void>;
        onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
        onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
        onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
        onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
        onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: import("./type").TableFilterChangeContext<import("./type").TableRowData>) => void>;
        onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
        onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
        onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
        onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
        onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
        activeRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        activeRowType: {
            type: import("vue").PropType<"multiple" | "single">;
            default: "multiple" | "single";
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("../common").AttachNode>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        };
        data: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        firstFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        fixedRows: {
            type: import("vue").PropType<number[]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        footerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        footerSummary: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        headerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        height: {
            type: import("vue").PropType<string | number>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        loadingProps: {
            type: import("vue").PropType<Partial<import("..").TdLoadingProps>>;
        };
        locale: {
            type: import("vue").PropType<import("..").TableConfig>;
        };
        maxHeight: {
            type: import("vue").PropType<string | number>;
        };
        pagination: {
            type: import("vue").PropType<import("..").TdPaginationProps>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
        };
        rowClassName: {
            type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        scroll: {
            type: import("vue").PropType<import("../common").TScroll>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            validator(val: import("../common").SizeEnum): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<"fixed" | "auto">;
            default: "fixed" | "auto";
            validator(val: "fixed" | "auto"): boolean;
        };
        topContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        verticalAlign: {
            type: import("vue").PropType<"top" | "bottom" | "middle">;
            default: "top" | "bottom" | "middle";
            validator(val: "top" | "bottom" | "middle"): boolean;
        };
        onActiveChange: import("vue").PropType<(activeRowKeys: (string | number)[], context: import("./type").ActiveChangeContext<import("./type").TableRowData>) => void>;
        onActiveRowAction: import("vue").PropType<(context: import("./type").ActiveRowActionContext<import("./type").TableRowData>) => void>;
        onColumnResizeChange: import("vue").PropType<(context: {
            columnsWidth: {
                [colKey: string]: number;
            };
        }) => void>;
        onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
        onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onScroll: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollX: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollY: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
    }>>, {
        sort: import("./type").TableSort;
        data: import("./type").TableRowData[];
        columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        tableLayout: "fixed" | "auto";
        verticalAlign: "top" | "bottom" | "middle";
        loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        hover: boolean;
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "multiple" | "single";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        columnControllerVisible: boolean;
        defaultColumnControllerVisible: boolean;
        displayColumns: import("..").CheckboxGroupValue;
        expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
        expandOnRowClick: boolean;
        expandedRowKeys: (string | number)[];
        defaultExpandedRowKeys: (string | number)[];
        filterValue: import("./type").FilterValue;
        hideSortTips: boolean;
        multipleSort: boolean;
        reserveSelectedRowOnPaginate: boolean;
        rowSelectionAllowUncheck: boolean;
        selectOnRowClick: boolean;
        selectedRowKeys: (string | number)[];
        defaultSelectedRowKeys: (string | number)[];
        showSortColumnBgColor: boolean;
        sortOnRowDraggable: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        asyncLoading: {
            type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
        };
        columnController: {
            type: import("vue").PropType<import("./type").TableColumnController>;
        };
        columnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        defaultColumnControllerVisible: {
            type: BooleanConstructor;
            default: any;
        };
        columns: {
            type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
            default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        };
        displayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
            default: import("..").CheckboxGroupValue;
        };
        defaultDisplayColumns: {
            type: import("vue").PropType<import("..").CheckboxGroupValue>;
        };
        dragSort: {
            type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
            validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
        };
        dragSortOptions: {
            type: import("vue").PropType<import("sortablejs").SortableOptions>;
        };
        editableCellState: {
            type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
        };
        editableRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        expandIcon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
        };
        expandOnRowClick: BooleanConstructor;
        expandedRow: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
        };
        expandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        filterIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: {
                col: import("./type").PrimaryTableCol<import("./type").TableRowData>;
                colIndex: number;
            }) => import("../common").SlotReturnValue>;
        };
        filterRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        filterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
            default: import("./type").FilterValue;
        };
        defaultFilterValue: {
            type: import("vue").PropType<import("./type").FilterValue>;
        };
        hideSortTips: BooleanConstructor;
        indeterminateSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
        };
        multipleSort: BooleanConstructor;
        reserveSelectedRowOnPaginate: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowSelectionAllowUncheck: BooleanConstructor;
        rowSelectionType: {
            type: import("vue").PropType<"multiple" | "single">;
            validator(val: "multiple" | "single"): boolean;
        };
        selectOnRowClick: BooleanConstructor;
        selectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultSelectedRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        showSortColumnBgColor: BooleanConstructor;
        sort: {
            type: import("vue").PropType<import("./type").TableSort>;
            default: import("./type").TableSort;
        };
        defaultSort: {
            type: import("vue").PropType<import("./type").TableSort>;
        };
        sortIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
        };
        sortOnRowDraggable: BooleanConstructor;
        onAsyncLoadingClick: import("vue").PropType<(context: {
            status: "loading" | "load-more";
        }) => void>;
        onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
        onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
        onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
        onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
            trigger: "cancel" | "confirm";
        }) => void>;
        onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
        onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
        onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
        onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
        onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: import("./type").TableFilterChangeContext<import("./type").TableRowData>) => void>;
        onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
        onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
        onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
        onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
        onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
        activeRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: (string | number)[];
        };
        defaultActiveRowKeys: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        activeRowType: {
            type: import("vue").PropType<"multiple" | "single">;
            default: "multiple" | "single";
        };
        allowResizeColumnWidth: {
            type: BooleanConstructor;
            default: any;
        };
        attach: {
            type: import("vue").PropType<import("../common").AttachNode>;
        };
        bordered: BooleanConstructor;
        bottomContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        cellEmptyContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        };
        data: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        disableDataPage: BooleanConstructor;
        disableSpaceInactiveRow: {
            type: BooleanConstructor;
            default: any;
        };
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        firstFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        fixedRows: {
            type: import("vue").PropType<number[]>;
        };
        footData: {
            type: import("vue").PropType<import("./type").TableRowData[]>;
            default: () => import("./type").TableRowData[];
        };
        footerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        footerAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        footerSummary: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        headerAffixProps: {
            type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
        };
        headerAffixedTop: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
            default: boolean | Partial<import("..").TdAffixProps>;
        };
        height: {
            type: import("vue").PropType<string | number>;
        };
        horizontalScrollAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        hover: BooleanConstructor;
        keyboardRowHover: {
            type: BooleanConstructor;
            default: boolean;
        };
        lastFullRow: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        lazyLoad: BooleanConstructor;
        loading: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        };
        loadingProps: {
            type: import("vue").PropType<Partial<import("..").TdLoadingProps>>;
        };
        locale: {
            type: import("vue").PropType<import("..").TableConfig>;
        };
        maxHeight: {
            type: import("vue").PropType<string | number>;
        };
        pagination: {
            type: import("vue").PropType<import("..").TdPaginationProps>;
        };
        paginationAffixedBottom: {
            type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        };
        resizable: BooleanConstructor;
        rowAttributes: {
            type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
        };
        rowClassName: {
            type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
        };
        rowKey: {
            type: StringConstructor;
            default: string;
            required: boolean;
        };
        rowspanAndColspan: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        rowspanAndColspanInFooter: {
            type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
        };
        scroll: {
            type: import("vue").PropType<import("../common").TScroll>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../common").SizeEnum>;
            validator(val: import("../common").SizeEnum): boolean;
        };
        stripe: BooleanConstructor;
        tableContentWidth: {
            type: StringConstructor;
            default: string;
        };
        tableLayout: {
            type: import("vue").PropType<"fixed" | "auto">;
            default: "fixed" | "auto";
            validator(val: "fixed" | "auto"): boolean;
        };
        topContent: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        };
        verticalAlign: {
            type: import("vue").PropType<"top" | "bottom" | "middle">;
            default: "top" | "bottom" | "middle";
            validator(val: "top" | "bottom" | "middle"): boolean;
        };
        onActiveChange: import("vue").PropType<(activeRowKeys: (string | number)[], context: import("./type").ActiveChangeContext<import("./type").TableRowData>) => void>;
        onActiveRowAction: import("vue").PropType<(context: import("./type").ActiveRowActionContext<import("./type").TableRowData>) => void>;
        onColumnResizeChange: import("vue").PropType<(context: {
            columnsWidth: {
                [colKey: string]: number;
            };
        }) => void>;
        onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
        onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
        onScroll: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollX: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
        onScrollY: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        sort: import("./type").TableSort;
        data: import("./type").TableRowData[];
        columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
        tableLayout: "fixed" | "auto";
        verticalAlign: "top" | "bottom" | "middle";
        loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
        hover: boolean;
        lazyLoad: boolean;
        bordered: boolean;
        stripe: boolean;
        activeRowKeys: (string | number)[];
        defaultActiveRowKeys: (string | number)[];
        activeRowType: "multiple" | "single";
        allowResizeColumnWidth: boolean;
        disableDataPage: boolean;
        disableSpaceInactiveRow: boolean;
        footData: import("./type").TableRowData[];
        footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
        headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
        keyboardRowHover: boolean;
        resizable: boolean;
        rowKey: string;
        showHeader: boolean;
        tableContentWidth: string;
        columnControllerVisible: boolean;
        defaultColumnControllerVisible: boolean;
        displayColumns: import("..").CheckboxGroupValue;
        expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
        expandOnRowClick: boolean;
        expandedRowKeys: (string | number)[];
        defaultExpandedRowKeys: (string | number)[];
        filterValue: import("./type").FilterValue;
        hideSortTips: boolean;
        multipleSort: boolean;
        reserveSelectedRowOnPaginate: boolean;
        rowSelectionAllowUncheck: boolean;
        selectOnRowClick: boolean;
        selectedRowKeys: (string | number)[];
        defaultSelectedRowKeys: (string | number)[];
        showSortColumnBgColor: boolean;
        sortOnRowDraggable: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    asyncLoading: {
        type: import("vue").PropType<"loading" | ((h: typeof import("vue").h) => import("../common").SlotReturnValue) | "load-more">;
    };
    columnController: {
        type: import("vue").PropType<import("./type").TableColumnController>;
    };
    columnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    defaultColumnControllerVisible: {
        type: BooleanConstructor;
        default: any;
    };
    columns: {
        type: import("vue").PropType<import("./type").PrimaryTableCol<import("./type").TableRowData>[]>;
        default: () => import("./type").PrimaryTableCol<import("./type").TableRowData>[];
    };
    displayColumns: {
        type: import("vue").PropType<import("..").CheckboxGroupValue>;
        default: import("..").CheckboxGroupValue;
    };
    defaultDisplayColumns: {
        type: import("vue").PropType<import("..").CheckboxGroupValue>;
    };
    dragSort: {
        type: import("vue").PropType<"col" | "row" | "row-handler" | "row-handler-col" | "drag-col">;
        validator(val: "col" | "row" | "row-handler" | "row-handler-col" | "drag-col"): boolean;
    };
    dragSortOptions: {
        type: import("vue").PropType<import("sortablejs").SortableOptions>;
    };
    editableCellState: {
        type: import("vue").PropType<import("./type").EditableCellType<import("./type").TableRowData>>;
    };
    editableRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    expandIcon: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
        default: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
    };
    expandOnRowClick: BooleanConstructor;
    expandedRow: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TableExpandedRowParams<import("./type").TableRowData>) => import("../common").SlotReturnValue>;
    };
    expandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: (string | number)[];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    filterIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: {
            col: import("./type").PrimaryTableCol<import("./type").TableRowData>;
            colIndex: number;
        }) => import("../common").SlotReturnValue>;
    };
    filterRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    filterValue: {
        type: import("vue").PropType<import("./type").FilterValue>;
        default: import("./type").FilterValue;
    };
    defaultFilterValue: {
        type: import("vue").PropType<import("./type").FilterValue>;
    };
    hideSortTips: BooleanConstructor;
    indeterminateSelectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
    };
    multipleSort: BooleanConstructor;
    reserveSelectedRowOnPaginate: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowSelectionAllowUncheck: BooleanConstructor;
    rowSelectionType: {
        type: import("vue").PropType<"multiple" | "single">;
        validator(val: "multiple" | "single"): boolean;
    };
    selectOnRowClick: BooleanConstructor;
    selectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: (string | number)[];
    };
    defaultSelectedRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    showSortColumnBgColor: BooleanConstructor;
    sort: {
        type: import("vue").PropType<import("./type").TableSort>;
        default: import("./type").TableSort;
    };
    defaultSort: {
        type: import("vue").PropType<import("./type").TableSort>;
    };
    sortIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    sortOnRowDraggable: BooleanConstructor;
    onAsyncLoadingClick: import("vue").PropType<(context: {
        status: "loading" | "load-more";
    }) => void>;
    onCellClick: import("vue").PropType<(context: import("./type").PrimaryTableCellEventContext<import("./type").TableRowData>) => void>;
    onChange: import("vue").PropType<(data: import("./type").TableChangeData, context: import("./type").TableChangeContext<import("./type").TableRowData>) => void>;
    onColumnChange: import("vue").PropType<(context: import("./type").PrimaryTableColumnChange<import("./type").TableRowData>) => void>;
    onColumnControllerVisibleChange: import("vue").PropType<(visible: boolean, context: {
        trigger: "cancel" | "confirm";
    }) => void>;
    onDataChange: import("vue").PropType<(data: import("./type").TableRowData[], context: import("./type").TableDataChangeContext) => void>;
    onDisplayColumnsChange: import("vue").PropType<(value: import("..").CheckboxGroupValue) => void>;
    onDragSort: import("vue").PropType<(context: import("./type").DragSortContext<import("./type").TableRowData>) => void>;
    onExpandChange: import("vue").PropType<(expandedRowKeys: (string | number)[], options: import("./type").ExpandOptions<import("./type").TableRowData>) => void>;
    onFilterChange: import("vue").PropType<(filterValue: import("./type").FilterValue, context: import("./type").TableFilterChangeContext<import("./type").TableRowData>) => void>;
    onRowEdit: import("vue").PropType<(context: import("./type").PrimaryTableRowEditContext<import("./type").TableRowData>) => void>;
    onRowValidate: import("vue").PropType<(context: import("./type").PrimaryTableRowValidateContext<import("./type").TableRowData>) => void>;
    onSelectChange: import("vue").PropType<(selectedRowKeys: (string | number)[], options: import("./type").SelectOptions<import("./type").TableRowData>) => void>;
    onSortChange: import("vue").PropType<(sort: import("./type").TableSort, options: import("./type").SortOptions<import("./type").TableRowData>) => void>;
    onValidate: import("vue").PropType<(context: import("./type").PrimaryTableValidateContext) => void>;
    activeRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: (string | number)[];
    };
    defaultActiveRowKeys: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    activeRowType: {
        type: import("vue").PropType<"multiple" | "single">;
        default: "multiple" | "single";
    };
    allowResizeColumnWidth: {
        type: BooleanConstructor;
        default: any;
    };
    attach: {
        type: import("vue").PropType<import("../common").AttachNode>;
    };
    bordered: BooleanConstructor;
    bottomContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    cellEmptyContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h, props: import("./type").BaseTableCellParams<import("./type").TableRowData>) => import("../common").SlotReturnValue)>;
    };
    data: {
        type: import("vue").PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    disableDataPage: BooleanConstructor;
    disableSpaceInactiveRow: {
        type: BooleanConstructor;
        default: any;
    };
    empty: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    };
    firstFullRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    fixedRows: {
        type: import("vue").PropType<number[]>;
    };
    footData: {
        type: import("vue").PropType<import("./type").TableRowData[]>;
        default: () => import("./type").TableRowData[];
    };
    footerAffixProps: {
        type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
    };
    footerAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        default: boolean | Partial<import("..").TdAffixProps>;
    };
    footerSummary: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    headerAffixProps: {
        type: import("vue").PropType<Partial<import("..").TdAffixProps>>;
    };
    headerAffixedTop: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
        default: boolean | Partial<import("..").TdAffixProps>;
    };
    height: {
        type: import("vue").PropType<string | number>;
    };
    horizontalScrollAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
    };
    hover: BooleanConstructor;
    keyboardRowHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    lastFullRow: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    lazyLoad: BooleanConstructor;
    loading: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    };
    loadingProps: {
        type: import("vue").PropType<Partial<import("..").TdLoadingProps>>;
    };
    locale: {
        type: import("vue").PropType<import("..").TableConfig>;
    };
    maxHeight: {
        type: import("vue").PropType<string | number>;
    };
    pagination: {
        type: import("vue").PropType<import("..").TdPaginationProps>;
    };
    paginationAffixedBottom: {
        type: import("vue").PropType<boolean | Partial<import("..").TdAffixProps>>;
    };
    resizable: BooleanConstructor;
    rowAttributes: {
        type: import("vue").PropType<import("./type").TableRowAttributes<import("./type").TableRowData>>;
    };
    rowClassName: {
        type: import("vue").PropType<import("../common").ClassName | ((params: import("./type").RowClassNameParams<import("./type").TableRowData>) => import("../common").ClassName)>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    rowspanAndColspanInFooter: {
        type: import("vue").PropType<import("./type").TableRowspanAndColspanFunc<import("./type").TableRowData>>;
    };
    scroll: {
        type: import("vue").PropType<import("../common").TScroll>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        validator(val: import("../common").SizeEnum): boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<"fixed" | "auto">;
        default: "fixed" | "auto";
        validator(val: "fixed" | "auto"): boolean;
    };
    topContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    verticalAlign: {
        type: import("vue").PropType<"top" | "bottom" | "middle">;
        default: "top" | "bottom" | "middle";
        validator(val: "top" | "bottom" | "middle"): boolean;
    };
    onActiveChange: import("vue").PropType<(activeRowKeys: (string | number)[], context: import("./type").ActiveChangeContext<import("./type").TableRowData>) => void>;
    onActiveRowAction: import("vue").PropType<(context: import("./type").ActiveRowActionContext<import("./type").TableRowData>) => void>;
    onColumnResizeChange: import("vue").PropType<(context: {
        columnsWidth: {
            [colKey: string]: number;
        };
    }) => void>;
    onPageChange: import("vue").PropType<(pageInfo: import("..").PageInfo, newDataSource: import("./type").TableRowData[]) => void>;
    onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowDblclick: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMousedown: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseenter: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseleave: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseover: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onRowMouseup: import("vue").PropType<(context: import("./type").RowEventContext<import("./type").TableRowData>) => void>;
    onScroll: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollX: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollY: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    sort: import("./type").TableSort;
    data: import("./type").TableRowData[];
    columns: import("./type").PrimaryTableCol<import("./type").TableRowData>[];
    tableLayout: "fixed" | "auto";
    verticalAlign: "top" | "bottom" | "middle";
    loading: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    empty: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    hover: boolean;
    lazyLoad: boolean;
    bordered: boolean;
    stripe: boolean;
    activeRowKeys: (string | number)[];
    defaultActiveRowKeys: (string | number)[];
    activeRowType: "multiple" | "single";
    allowResizeColumnWidth: boolean;
    disableDataPage: boolean;
    disableSpaceInactiveRow: boolean;
    footData: import("./type").TableRowData[];
    footerAffixedBottom: boolean | Partial<import("..").TdAffixProps>;
    headerAffixedTop: boolean | Partial<import("..").TdAffixProps>;
    keyboardRowHover: boolean;
    resizable: boolean;
    rowKey: string;
    showHeader: boolean;
    tableContentWidth: string;
    columnControllerVisible: boolean;
    defaultColumnControllerVisible: boolean;
    displayColumns: import("..").CheckboxGroupValue;
    expandIcon: boolean | ((h: typeof import("vue").h, props: import("./type").ExpandArrowRenderParams<import("./type").TableRowData>) => import("../common").SlotReturnValue);
    expandOnRowClick: boolean;
    expandedRowKeys: (string | number)[];
    defaultExpandedRowKeys: (string | number)[];
    filterValue: import("./type").FilterValue;
    hideSortTips: boolean;
    multipleSort: boolean;
    reserveSelectedRowOnPaginate: boolean;
    rowSelectionAllowUncheck: boolean;
    selectOnRowClick: boolean;
    selectedRowKeys: (string | number)[];
    defaultSelectedRowKeys: (string | number)[];
    showSortColumnBgColor: boolean;
    sortOnRowDraggable: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Table;
