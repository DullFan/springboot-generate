import { TdStatisticProps } from './type';
import './style';
export * from './type';
export declare type StatisticProps = TdStatisticProps;
export declare const Statistic: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        animation: {
            type: import("vue").PropType<import("./type").animation>;
        };
        animationStart: BooleanConstructor;
        color: {
            type: import("vue").PropType<"black" | "blue" | "green" | "orange" | "red">;
            validator(val: "black" | "blue" | "green" | "orange" | "red"): boolean;
        };
        decimalPlaces: {
            type: NumberConstructor;
        };
        extra: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        format: {
            type: import("vue").PropType<(value: number) => number>;
        };
        loading: BooleanConstructor;
        prefix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        separator: {
            type: StringConstructor;
            default: string;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        trend: {
            type: import("vue").PropType<"increase" | "decrease">;
            validator(val: "increase" | "decrease"): boolean;
        };
        trendPlacement: {
            type: import("vue").PropType<"left" | "right">;
            default: "left" | "right";
            validator(val: "left" | "right"): boolean;
        };
        unit: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: NumberConstructor;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        animation: {
            type: import("vue").PropType<import("./type").animation>;
        };
        animationStart: BooleanConstructor;
        color: {
            type: import("vue").PropType<"black" | "blue" | "green" | "orange" | "red">;
            validator(val: "black" | "blue" | "green" | "orange" | "red"): boolean;
        };
        decimalPlaces: {
            type: NumberConstructor;
        };
        extra: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        format: {
            type: import("vue").PropType<(value: number) => number>;
        };
        loading: BooleanConstructor;
        prefix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        separator: {
            type: StringConstructor;
            default: string;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        trend: {
            type: import("vue").PropType<"increase" | "decrease">;
            validator(val: "increase" | "decrease"): boolean;
        };
        trendPlacement: {
            type: import("vue").PropType<"left" | "right">;
            default: "left" | "right";
            validator(val: "left" | "right"): boolean;
        };
        unit: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: NumberConstructor;
        };
    }>>, {
        loading: boolean;
        separator: string;
        trendPlacement: "left" | "right";
        animationStart: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        animation: {
            type: import("vue").PropType<import("./type").animation>;
        };
        animationStart: BooleanConstructor;
        color: {
            type: import("vue").PropType<"black" | "blue" | "green" | "orange" | "red">;
            validator(val: "black" | "blue" | "green" | "orange" | "red"): boolean;
        };
        decimalPlaces: {
            type: NumberConstructor;
        };
        extra: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        format: {
            type: import("vue").PropType<(value: number) => number>;
        };
        loading: BooleanConstructor;
        prefix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        separator: {
            type: StringConstructor;
            default: string;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        title: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        trend: {
            type: import("vue").PropType<"increase" | "decrease">;
            validator(val: "increase" | "decrease"): boolean;
        };
        trendPlacement: {
            type: import("vue").PropType<"left" | "right">;
            default: "left" | "right";
            validator(val: "left" | "right"): boolean;
        };
        unit: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: NumberConstructor;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        loading: boolean;
        separator: string;
        trendPlacement: "left" | "right";
        animationStart: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    animation: {
        type: import("vue").PropType<import("./type").animation>;
    };
    animationStart: BooleanConstructor;
    color: {
        type: import("vue").PropType<"black" | "blue" | "green" | "orange" | "red">;
        validator(val: "black" | "blue" | "green" | "orange" | "red"): boolean;
    };
    decimalPlaces: {
        type: NumberConstructor;
    };
    extra: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    format: {
        type: import("vue").PropType<(value: number) => number>;
    };
    loading: BooleanConstructor;
    prefix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    separator: {
        type: StringConstructor;
        default: string;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    trend: {
        type: import("vue").PropType<"increase" | "decrease">;
        validator(val: "increase" | "decrease"): boolean;
    };
    trendPlacement: {
        type: import("vue").PropType<"left" | "right">;
        default: "left" | "right";
        validator(val: "left" | "right"): boolean;
    };
    unit: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: NumberConstructor;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    loading: boolean;
    separator: string;
    trendPlacement: "left" | "right";
    animationStart: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Statistic;
