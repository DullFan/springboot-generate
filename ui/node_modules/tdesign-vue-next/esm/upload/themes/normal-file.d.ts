import { UploadFile } from '../type';
import { CommonDisplayFileProps } from '../interface';
import { UploadConfig } from '../../config-provider';
export interface NormalFileProps extends CommonDisplayFileProps {
    multiple: boolean;
}
declare const NormalFile: import("vue").DefineComponent<{
    accept: StringConstructor;
    files: import("vue").PropType<UploadFile[]>;
    toUploadFiles: import("vue").PropType<UploadFile[]>;
    displayFiles: import("vue").PropType<UploadFile[]>;
    theme: import("vue").PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
    abridgeName: import("vue").PropType<number[]>;
    placeholder: StringConstructor;
    classPrefix: StringConstructor;
    tips: (FunctionConstructor | StringConstructor)[];
    status: import("vue").PropType<"error" | "default" | "success" | "warning">;
    locale: import("vue").PropType<UploadConfig>;
    sizeOverLimitMessage: StringConstructor;
    autoUpload: BooleanConstructor;
    uploadPastedFiles: BooleanConstructor;
    onPasteFileChange: import("vue").PropType<(payload: ClipboardEvent) => void>;
    disabled: BooleanConstructor;
    uploading: BooleanConstructor;
    tipsClasses: import("vue").PropType<string>;
    errorClasses: import("vue").PropType<string[]>;
    placeholderClass: import("vue").PropType<string>;
    showUploadProgress: BooleanConstructor;
    default: import("vue").PropType<(h: typeof import("vue").h) => import("../..").SlotReturnValue>;
    fileListDisplay: import("vue").PropType<(h: typeof import("vue").h, props: {
        files: UploadFile[];
        dragEvents?: import("../..").UploadDisplayDragEvents;
    }) => import("../..").SlotReturnValue>;
    onRemove: import("vue").PropType<(p: import("../type").UploadRemoveContext) => void>;
    imageViewerProps: import("vue").PropType<import("../..").TdImageViewerProps>;
    multiple: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    accept: StringConstructor;
    files: import("vue").PropType<UploadFile[]>;
    toUploadFiles: import("vue").PropType<UploadFile[]>;
    displayFiles: import("vue").PropType<UploadFile[]>;
    theme: import("vue").PropType<"file" | "custom" | "image" | "file-input" | "file-flow" | "image-flow">;
    abridgeName: import("vue").PropType<number[]>;
    placeholder: StringConstructor;
    classPrefix: StringConstructor;
    tips: (FunctionConstructor | StringConstructor)[];
    status: import("vue").PropType<"error" | "default" | "success" | "warning">;
    locale: import("vue").PropType<UploadConfig>;
    sizeOverLimitMessage: StringConstructor;
    autoUpload: BooleanConstructor;
    uploadPastedFiles: BooleanConstructor;
    onPasteFileChange: import("vue").PropType<(payload: ClipboardEvent) => void>;
    disabled: BooleanConstructor;
    uploading: BooleanConstructor;
    tipsClasses: import("vue").PropType<string>;
    errorClasses: import("vue").PropType<string[]>;
    placeholderClass: import("vue").PropType<string>;
    showUploadProgress: BooleanConstructor;
    default: import("vue").PropType<(h: typeof import("vue").h) => import("../..").SlotReturnValue>;
    fileListDisplay: import("vue").PropType<(h: typeof import("vue").h, props: {
        files: UploadFile[];
        dragEvents?: import("../..").UploadDisplayDragEvents;
    }) => import("../..").SlotReturnValue>;
    onRemove: import("vue").PropType<(p: import("../type").UploadRemoveContext) => void>;
    imageViewerProps: import("vue").PropType<import("../..").TdImageViewerProps>;
    multiple: BooleanConstructor;
}>>, {
    disabled: boolean;
    multiple: boolean;
    autoUpload: boolean;
    uploadPastedFiles: boolean;
    uploading: boolean;
    showUploadProgress: boolean;
}, {}>;
export default NormalFile;
