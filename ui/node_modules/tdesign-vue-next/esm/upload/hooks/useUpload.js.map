{"version":3,"file":"useUpload.js","sources":["../../../src/upload/hooks/useUpload.ts"],"sourcesContent":["import { ref, computed, toRefs } from 'vue';\nimport merge from 'lodash/merge';\nimport { SizeLimitObj, TdUploadProps, UploadChangeContext, UploadFile, UploadRemoveContext } from '../type';\nimport {\n  getFilesAndErrors,\n  validateFile,\n  upload,\n  getTriggerTextField,\n  getDisplayFiles,\n  formatToUploadFile,\n} from '../../_common/js/upload/main';\nimport { getFileList } from '../../_common/js/upload/utils';\nimport useVModel from '../../hooks/useVModel';\nimport { InnerProgressContext, OnResponseErrorContext, SuccessContext } from '../../_common/js/upload/types';\nimport { useConfig } from '../../hooks/useConfig';\n\nexport type ValidateParams = Parameters<TdUploadProps['onValidate']>[0];\n\n/**\n * 上传组件全部逻辑，方便脱离 UI，自定义 UI 组件\n */\nexport default function useUpload(props: TdUploadProps) {\n  const inputRef = ref<HTMLInputElement>();\n  // TODO: Form 表单控制上传组件是否禁用\n  const { disabled, autoUpload, isBatchUpload, multiple, files, modelValue, defaultFiles } = toRefs(props);\n  const { globalConfig, t, classPrefix } = useConfig('upload');\n  const [uploadValue, setUploadValue] = useVModel(files, modelValue, defaultFiles.value, props.onChange, 'files');\n  const xhrReq = ref<{ files: UploadFile[]; xhrReq: XMLHttpRequest }[]>([]);\n  const toUploadFiles = ref<UploadFile[]>([]);\n  const sizeOverLimitMessage = ref('');\n\n  const locale = computed(() => merge({}, globalConfig.value, props.locale));\n\n  const tipsClasses = `${classPrefix.value}-upload__tips ${classPrefix.value}-size-s`;\n  const errorClasses = [tipsClasses].concat(`${classPrefix.value}-upload__tips-error`);\n  const placeholderClass = `${classPrefix.value}-upload__placeholder`;\n\n  // 单文件场景：触发元素文本\n  const triggerUploadText = computed(() => {\n    const field = getTriggerTextField({\n      isBatchUpload: isBatchUpload.value,\n      multiple: multiple.value,\n      status: uploadValue.value?.[0]?.status,\n      autoUpload: autoUpload.value,\n    });\n    return locale.value.triggerUploadText[field];\n  });\n\n  const uploading = ref(false);\n\n  // 文件列表显示的内容（自动上传和非自动上传有所不同）\n  const displayFiles = computed(() => {\n    return getDisplayFiles({\n      multiple: props.multiple,\n      toUploadFiles: toUploadFiles.value,\n      uploadValue: uploadValue.value,\n      autoUpload: autoUpload.value,\n      isBatchUpload: isBatchUpload.value,\n    });\n  });\n\n  const uploadFilePercent = (params: { file: UploadFile; percent: number }) => {\n    const { file, percent } = params;\n    const operationUploadFiles = autoUpload.value ? toUploadFiles : uploadValue;\n    const index = operationUploadFiles.value.findIndex((item) => file.raw === item.raw);\n    operationUploadFiles.value[index] = { ...operationUploadFiles.value[index], percent };\n  };\n\n  const updateFilesProgress = () => {\n    if (props.autoUpload) {\n      toUploadFiles.value = [...toUploadFiles.value];\n    }\n  };\n\n  const onResponseError = (p: OnResponseErrorContext) => {\n    if (!p || !p.files || !p.files[0]) return;\n    const { response, event, files } = p;\n    updateFilesProgress();\n    props.onOneFileFail?.({\n      e: event,\n      file: files?.[0],\n      currentFiles: files,\n      failedFiles: files,\n      response,\n    });\n    // 单选或多文件替换，需要清空上一次上传成功的文件\n    if (!props.multiple || props.isBatchUpload) {\n      setUploadValue([], {\n        trigger: 'progress-fail',\n        e: p.event,\n        file: p.files[0],\n      });\n    }\n  };\n\n  // 多文件上传场景，单个文件进度\n  const onResponseProgress = (p: InnerProgressContext) => {\n    updateFilesProgress();\n    props.onProgress?.({\n      e: p.event,\n      file: p.file,\n      currentFiles: p.files,\n      percent: p.percent,\n      type: p.type,\n      XMLHttpRequest: p.XMLHttpRequest,\n    });\n  };\n\n  // 多文件上传场景，单个文件上传成功后\n  const onResponseSuccess = (p: SuccessContext) => {\n    // 只有多个上传请求同时触发时才需 onOneFileSuccess\n    if (props.multiple && !props.uploadAllFilesInOneRequest) {\n      updateFilesProgress();\n      props.onOneFileSuccess?.({\n        e: p.event,\n        file: p.files[0],\n        response: p.response,\n      });\n    }\n  };\n\n  function getSizeLimitError(sizeLimitObj: SizeLimitObj) {\n    const limit = sizeLimitObj;\n    return limit.message\n      ? t(limit.message, { sizeLimit: limit.size })\n      : `${t(locale.value.sizeLimitMessage, { sizeLimit: limit.size })} ${limit.unit}`;\n  }\n\n  const handleNotAutoUpload = (toFiles: UploadFile[]) => {\n    const tmpFiles = props.multiple && !isBatchUpload.value ? uploadValue.value.concat(toFiles) : toFiles;\n    if (!tmpFiles.length) return;\n    setUploadValue(tmpFiles, {\n      trigger: 'add',\n      index: uploadValue.value.length,\n      file: toFiles[0],\n      files: toFiles,\n    });\n    toUploadFiles.value = [];\n  };\n\n  const onFileChange = (files: File[]) => {\n    if (disabled.value) return;\n    const params = { currentSelectedFiles: formatToUploadFile([...files], props.format) };\n    props.onSelectChange?.([...files], params);\n    validateFile({\n      uploadValue: uploadValue.value,\n      // @ts-ignore\n      files: [...files],\n      allowUploadDuplicateFile: props.allowUploadDuplicateFile,\n      max: props.multiple ? props.max : 0,\n      sizeLimit: props.sizeLimit,\n      isBatchUpload: isBatchUpload.value,\n      autoUpload: autoUpload.value,\n      format: props.format,\n      beforeUpload: props.beforeUpload,\n      beforeAllFilesUpload: props.beforeAllFilesUpload,\n    }).then((args) => {\n      // 自定义全文件校验不通过\n      if (args.validateResult?.type === 'BEFORE_ALL_FILES_UPLOAD') {\n        const params: ValidateParams = { type: 'BEFORE_ALL_FILES_UPLOAD', files: args.files };\n        props.onValidate?.(params);\n        return;\n      }\n      // 文件数量校验不通过\n      if (args.lengthOverLimit) {\n        const params: ValidateParams = { type: 'FILES_OVER_LENGTH_LIMIT', files: args.files };\n        props.onValidate?.(params);\n        if (!args.files.length) return;\n      }\n      // 过滤相同的文件名\n      if (args.hasSameNameFile) {\n        const params: ValidateParams = { type: 'FILTER_FILE_SAME_NAME', files: args.files };\n        props.onValidate?.(params);\n      }\n      // 文件大小校验结果处理（已过滤超出限制的文件）\n      if (args.fileValidateList instanceof Array) {\n        const { sizeLimitErrors, beforeUploadErrorFiles, toFiles } = getFilesAndErrors(\n          args.fileValidateList,\n          getSizeLimitError,\n        );\n        const tmpWaitingFiles = autoUpload.value ? toFiles : toUploadFiles.value.concat(toFiles);\n        toUploadFiles.value = tmpWaitingFiles;\n        props.onWaitingUploadFilesChange?.({ files: tmpWaitingFiles, trigger: 'validate' });\n        // 文件大小处理\n        if (sizeLimitErrors[0]) {\n          sizeOverLimitMessage.value = sizeLimitErrors[0].file.response.error;\n          props.onValidate?.({ type: 'FILE_OVER_SIZE_LIMIT', files: sizeLimitErrors.map((t) => t.file) });\n        } else {\n          sizeOverLimitMessage.value = '';\n          // 自定义方法 beforeUpload 拦截的文件\n          if (beforeUploadErrorFiles.length) {\n            const params: ValidateParams = { type: 'CUSTOM_BEFORE_UPLOAD', files: beforeUploadErrorFiles };\n            props.onValidate?.(params);\n          }\n        }\n        // 如果是自动上传\n        if (autoUpload.value) {\n          uploadFiles(tmpWaitingFiles);\n        } else {\n          handleNotAutoUpload(tmpWaitingFiles);\n        }\n      }\n    });\n\n    // 清空 <input type=\"file\"> 元素的文件，避免出现重复文件无法选择的情况\n    inputRef.value.value = null;\n  };\n\n  const onNormalFileChange = (e: InputEvent) => {\n    const fileList = getFileList((e.target as HTMLInputElement).files);\n    onFileChange?.(fileList);\n  };\n\n  function onDragFileChange(files: File[]) {\n    onFileChange?.(files);\n  }\n\n  function onPasteFileChange(e: ClipboardEvent) {\n    onFileChange?.([...e.clipboardData.files]);\n  }\n\n  /**\n   * 上传文件。对外暴露方法，修改时需谨慎\n   * @param toFiles 本地上传的文件列表\n   */\n  function uploadFiles(toFiles?: UploadFile[]) {\n    const notUploadedFiles = uploadValue.value.filter((t) => t.status !== 'success');\n    const files = autoUpload.value ? toFiles || toUploadFiles.value : notUploadedFiles;\n    if (!files || !files.length) return;\n    uploading.value = true;\n    xhrReq.value = [];\n    upload({\n      action: props.action,\n      headers: props.headers,\n      method: props.method,\n      name: props.name,\n      withCredentials: props.withCredentials,\n      uploadedFiles: uploadValue.value,\n      toUploadFiles: files,\n      multiple: props.multiple,\n      isBatchUpload: isBatchUpload.value,\n      autoUpload: props.autoUpload,\n      uploadAllFilesInOneRequest: props.uploadAllFilesInOneRequest,\n      useMockProgress: props.useMockProgress,\n      data: props.data,\n      mockProgressDuration: props.mockProgressDuration,\n      requestMethod: props.requestMethod,\n      formatRequest: props.formatRequest,\n      formatResponse: props.formatResponse,\n      onResponseProgress,\n      onResponseSuccess,\n      onResponseError,\n      setXhrObject: (xhr) => {\n        if (xhr.files[0]?.raw && xhrReq.value.find((item) => item.files[0]?.raw === xhr.files[0].raw)) return;\n        xhrReq.value = xhrReq.value.concat(xhr);\n      },\n    }).then(\n      // 多文件场景时，全量文件完成后\n      ({ status, data, list, failedFiles }) => {\n        uploading.value = false;\n        if (status === 'success') {\n          setUploadValue([...data.files], {\n            trigger: 'add',\n            file: data.files[0],\n          });\n          xhrReq.value = [];\n          props.onSuccess?.({\n            fileList: data.files,\n            currentFiles: files,\n            file: files[0],\n            // 只有全部请求完成后，才会存在该字段\n            results: list?.map((t) => t.data),\n            // 单文件单请求有一个 response，多文件多请求有多个 response\n            response: data.response || list.map((t) => t.data.response),\n            XMLHttpRequest: data.XMLHttpRequest,\n          });\n        } else if (failedFiles?.[0]) {\n          props.onFail?.({\n            e: data.event,\n            file: failedFiles[0],\n            failedFiles,\n            currentFiles: files,\n            response: data.response,\n            XMLHttpRequest: data.XMLHttpRequest,\n          });\n        }\n\n        // 非自动上传，文件都在 uploadValue，不涉及 toUploadFiles\n        if (autoUpload.value) {\n          toUploadFiles.value = failedFiles;\n          props.onWaitingUploadFilesChange?.({ files: failedFiles, trigger: 'uploaded' });\n        }\n      },\n    );\n  }\n\n  function onInnerRemove(p: UploadRemoveContext) {\n    sizeOverLimitMessage.value = '';\n    p.e.stopPropagation?.();\n    const changePrams: UploadChangeContext = {\n      e: p.e,\n      trigger: 'remove',\n      index: p.index,\n      file: p.file,\n    };\n    // remove all files for batchUpload\n    if (props.isBatchUpload || !props.multiple) {\n      toUploadFiles.value = [];\n      props.onWaitingUploadFilesChange?.({ files: [], trigger: 'remove' });\n      setUploadValue([], changePrams);\n    } else if (!props.autoUpload) {\n      uploadValue.value.splice(p.index, 1);\n      setUploadValue([...uploadValue.value], changePrams);\n    } else {\n      // autoUpload 场景下， p.index < uploadValue.length 表示移除已经上传成功的文件；反之表示移除待上传列表文件\n      // eslint-disable-next-line\n      if (p.index < uploadValue.value.length) {\n        uploadValue.value.splice(p.index, 1);\n        setUploadValue([...uploadValue.value], changePrams);\n      } else {\n        toUploadFiles.value.splice(p.index - uploadValue.value.length, 1);\n        toUploadFiles.value = [...toUploadFiles.value];\n        props.onWaitingUploadFilesChange?.({ files: [...toUploadFiles.value], trigger: 'remove' });\n      }\n    }\n    props.onRemove?.(p);\n  }\n\n  const triggerUpload = (e?: MouseEvent) => {\n    if (disabled.value || !inputRef.value) return;\n    e?.stopPropagation?.();\n    (inputRef.value as HTMLInputElement).click();\n  };\n\n  const cancelUpload = (context?: { file?: UploadFile; e?: MouseEvent }) => {\n    xhrReq.value?.forEach((item) => {\n      item.xhrReq?.abort();\n    });\n    uploading.value = false;\n\n    // autoUpload do not need to reset to waiting state\n    if (autoUpload.value) {\n      toUploadFiles.value = [];\n    } else {\n      setUploadValue(\n        uploadValue.value.map((item) => {\n          if (item.status !== 'success') {\n            return { ...item, status: 'waiting' };\n          }\n          return item;\n        }),\n        { trigger: 'abort' },\n      );\n    }\n\n    if (context?.file && !autoUpload.value) {\n      onInnerRemove?.({ file: context.file, e: context.e, index: 0 });\n    }\n\n    props.onCancelUpload?.();\n  };\n\n  return {\n    t,\n    locale,\n    classPrefix,\n    triggerUploadText,\n    toUploadFiles,\n    uploadValue,\n    displayFiles,\n    sizeOverLimitMessage,\n    uploading,\n    tipsClasses,\n    errorClasses,\n    placeholderClass,\n    inputRef,\n    disabled,\n    xhrReq,\n    uploadFilePercent,\n    uploadFiles,\n    onFileChange,\n    onNormalFileChange,\n    onDragFileChange,\n    onPasteFileChange,\n    onInnerRemove,\n    triggerUpload,\n    cancelUpload,\n  };\n}\n"],"names":["useUpload","props","inputRef","ref","_toRefs","toRefs","disabled","autoUpload","isBatchUpload","multiple","files","modelValue","defaultFiles","_useConfig","useConfig","globalConfig","t","classPrefix","_useVModel","useVModel","value","onChange","_useVModel2","_slicedToArray","uploadValue","setUploadValue","xhrReq","toUploadFiles","sizeOverLimitMessage","locale","computed","merge","tipsClasses","concat","errorClasses","placeholderClass","triggerUploadText","_uploadValue$value","field","getTriggerTextField","status","uploading","displayFiles","getDisplayFiles","uploadFilePercent","params","file","percent","operationUploadFiles","index","findIndex","item","raw","_objectSpread","updateFilesProgress","_toConsumableArray","onResponseError","p","_props$onOneFileFail","response","event","onOneFileFail","call","e","currentFiles","failedFiles","trigger","onResponseProgress","_props$onProgress","onProgress","type","XMLHttpRequest","onResponseSuccess","uploadAllFilesInOneRequest","_props$onOneFileSucce","onOneFileSuccess","getSizeLimitError","sizeLimitObj","limit","message","sizeLimit","size","sizeLimitMessage","unit","handleNotAutoUpload","toFiles","tmpFiles","length","onFileChange","_props$onSelectChange","currentSelectedFiles","formatToUploadFile","format","onSelectChange","validateFile","allowUploadDuplicateFile","max","beforeUpload","beforeAllFilesUpload","then","args","_args$validateResult","validateResult","_props$onValidate","onValidate","lengthOverLimit","_props$onValidate2","hasSameNameFile","_props$onValidate3","fileValidateList","Array","_props$onWaitingUploa","_getFilesAndErrors","getFilesAndErrors","sizeLimitErrors","beforeUploadErrorFiles","tmpWaitingFiles","onWaitingUploadFilesChange","_props$onValidate4","error","map","_props$onValidate5","uploadFiles","onNormalFileChange","fileList","getFileList","target","onDragFileChange","onPasteFileChange","clipboardData","notUploadedFiles","filter","upload","action","headers","method","name","withCredentials","uploadedFiles","useMockProgress","data","mockProgressDuration","requestMethod","formatRequest","formatResponse","setXhrObject","xhr","_xhr$files$","find","_item$files$","_ref","list","_props$onSuccess","onSuccess","results","_props$onFail","onFail","_props$onWaitingUploa2","onInnerRemove","_p$e$stopPropagation","_p$e","_props$onRemove","stopPropagation","changePrams","_props$onWaitingUploa3","splice","_props$onWaitingUploa4","onRemove","triggerUpload","_e$stopPropagation","click","cancelUpload","context","_xhrReq$value","_props$onCancelUpload","forEach","_item$xhrReq","abort","onCancelUpload"],"mappings":"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"}