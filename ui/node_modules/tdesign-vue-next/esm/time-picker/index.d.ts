import { TdTimePickerProps, TdTimeRangePickerProps } from './type';
import './style';
export * from './type';
export declare type TimePickerProps = TdTimePickerProps;
export declare type TimeRangePickerProps = TdTimeRangePickerProps;
export declare type TimePickerPanelProps = TdTimePickerProps;
export declare const TimePicker: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        allowInput: BooleanConstructor;
        clearable: BooleanConstructor;
        disableTime: {
            type: import("vue").PropType<(h: number, m: number, s: number, ms: number) => Partial<{
                hour: number[];
                minute: number[];
                second: number[];
                millisecond: number[];
            }>>;
        };
        disabled: BooleanConstructor;
        format: {
            type: StringConstructor;
            default: string;
        };
        hideDisabledTime: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetTime>;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        steps: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<string>;
            default: string;
        };
        modelValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        defaultValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onBlur: import("vue").PropType<(context: {
            value: string;
        } & import("..").PopupVisibleChangeContext & {
            inputValue: string;
            tagInputValue?: import("..").TagInputValue;
        }) => void>;
        onChange: import("vue").PropType<(value: string) => void>;
        onClose: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            value: string;
            e: FocusEvent;
        }) => void>;
        onInput: import("vue").PropType<(context: {
            value: string;
            e: InputEvent;
        }) => void>;
        onOpen: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPick: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        allowInput: BooleanConstructor;
        clearable: BooleanConstructor;
        disableTime: {
            type: import("vue").PropType<(h: number, m: number, s: number, ms: number) => Partial<{
                hour: number[];
                minute: number[];
                second: number[];
                millisecond: number[];
            }>>;
        };
        disabled: BooleanConstructor;
        format: {
            type: StringConstructor;
            default: string;
        };
        hideDisabledTime: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetTime>;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        steps: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<string>;
            default: string;
        };
        modelValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        defaultValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onBlur: import("vue").PropType<(context: {
            value: string;
        } & import("..").PopupVisibleChangeContext & {
            inputValue: string;
            tagInputValue?: import("..").TagInputValue;
        }) => void>;
        onChange: import("vue").PropType<(value: string) => void>;
        onClose: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            value: string;
            e: FocusEvent;
        }) => void>;
        onInput: import("vue").PropType<(context: {
            value: string;
            e: InputEvent;
        }) => void>;
        onOpen: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPick: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
        }) => void>;
    }>>, {
        value: string;
        disabled: boolean;
        size: "small" | "medium" | "large";
        status: "error" | "default" | "success" | "warning";
        placeholder: string;
        format: string;
        modelValue: string;
        steps: (string | number)[];
        defaultValue: string;
        clearable: boolean;
        allowInput: boolean;
        hideDisabledTime: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        allowInput: BooleanConstructor;
        clearable: BooleanConstructor;
        disableTime: {
            type: import("vue").PropType<(h: number, m: number, s: number, ms: number) => Partial<{
                hour: number[];
                minute: number[];
                second: number[];
                millisecond: number[];
            }>>;
        };
        disabled: BooleanConstructor;
        format: {
            type: StringConstructor;
            default: string;
        };
        hideDisabledTime: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputProps: {
            type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        popupProps: {
            type: import("vue").PropType<import("..").TdPopupProps>;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetTime>;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        steps: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<string>;
            default: string;
        };
        modelValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        defaultValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onBlur: import("vue").PropType<(context: {
            value: string;
        } & import("..").PopupVisibleChangeContext & {
            inputValue: string;
            tagInputValue?: import("..").TagInputValue;
        }) => void>;
        onChange: import("vue").PropType<(value: string) => void>;
        onClose: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onFocus: import("vue").PropType<(context: {
            value: string;
            e: FocusEvent;
        }) => void>;
        onInput: import("vue").PropType<(context: {
            value: string;
            e: InputEvent;
        }) => void>;
        onOpen: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPick: import("vue").PropType<(value: string, context: {
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        value: string;
        disabled: boolean;
        size: "small" | "medium" | "large";
        status: "error" | "default" | "success" | "warning";
        placeholder: string;
        format: string;
        modelValue: string;
        steps: (string | number)[];
        defaultValue: string;
        clearable: boolean;
        allowInput: boolean;
        hideDisabledTime: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    allowInput: BooleanConstructor;
    clearable: BooleanConstructor;
    disableTime: {
        type: import("vue").PropType<(h: number, m: number, s: number, ms: number) => Partial<{
            hour: number[];
            minute: number[];
            second: number[];
            millisecond: number[];
        }>>;
    };
    disabled: BooleanConstructor;
    format: {
        type: StringConstructor;
        default: string;
    };
    hideDisabledTime: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputProps: {
        type: import("vue").PropType<import("..").InputProps<import("..").InputValue>>;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    presets: {
        type: import("vue").PropType<import("./type").PresetTime>;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    steps: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<string>;
        default: string;
    };
    modelValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    defaultValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    onBlur: import("vue").PropType<(context: {
        value: string;
    } & import("..").PopupVisibleChangeContext & {
        inputValue: string;
        tagInputValue?: import("..").TagInputValue;
    }) => void>;
    onChange: import("vue").PropType<(value: string) => void>;
    onClose: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        value: string;
        e: FocusEvent;
    }) => void>;
    onInput: import("vue").PropType<(context: {
        value: string;
        e: InputEvent;
    }) => void>;
    onOpen: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPick: import("vue").PropType<(value: string, context: {
        e: MouseEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: string;
    disabled: boolean;
    size: "small" | "medium" | "large";
    status: "error" | "default" | "success" | "warning";
    placeholder: string;
    format: string;
    modelValue: string;
    steps: (string | number)[];
    defaultValue: string;
    clearable: boolean;
    allowInput: boolean;
    hideDisabledTime: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const TimeRangePicker: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        rangeInputProps: ObjectConstructor;
        popupProps: ObjectConstructor;
        allowInput: BooleanConstructor;
        clearable: BooleanConstructor;
        disableTime: {
            type: import("vue").PropType<(h: number, m: number, s: number, context: {
                partial: import("./type").TimeRangePickerPartial;
            }) => Partial<{
                hour: number[];
                minute: number[];
                second: number[];
            }>>;
        };
        disabled: {
            type: import("vue").PropType<boolean | boolean[]>;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        hideDisabledTime: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: import("vue").PropType<string | string[]>;
            default: string | string[];
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetTimeRange>;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        steps: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").TimeRangeValue>;
            default: import("./type").TimeRangeValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TimeRangeValue>;
            default: import("./type").TimeRangeValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TimeRangeValue>;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").TimeRangeValue;
            e?: FocusEvent;
            position?: import("./type").TimeRangePickerPartial;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").TimeRangeValue) => void>;
        onFocus: import("vue").PropType<(context?: {
            value: import("./type").TimeRangeValue;
            e?: FocusEvent;
            position?: import("./type").TimeRangePickerPartial;
        }) => void>;
        onInput: import("vue").PropType<(context: {
            value: import("./type").TimeRangeValue;
            e?: InputEvent;
            position?: import("./type").TimeRangePickerPartial;
        }) => void>;
        onPick: import("vue").PropType<(value: import("./type").TimeRangeValue, context: {
            e: MouseEvent;
            position?: import("./type").TimeRangePickerPartial;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        rangeInputProps: ObjectConstructor;
        popupProps: ObjectConstructor;
        allowInput: BooleanConstructor;
        clearable: BooleanConstructor;
        disableTime: {
            type: import("vue").PropType<(h: number, m: number, s: number, context: {
                partial: import("./type").TimeRangePickerPartial;
            }) => Partial<{
                hour: number[];
                minute: number[];
                second: number[];
            }>>;
        };
        disabled: {
            type: import("vue").PropType<boolean | boolean[]>;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        hideDisabledTime: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: import("vue").PropType<string | string[]>;
            default: string | string[];
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetTimeRange>;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        steps: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").TimeRangeValue>;
            default: import("./type").TimeRangeValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TimeRangeValue>;
            default: import("./type").TimeRangeValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TimeRangeValue>;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").TimeRangeValue;
            e?: FocusEvent;
            position?: import("./type").TimeRangePickerPartial;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").TimeRangeValue) => void>;
        onFocus: import("vue").PropType<(context?: {
            value: import("./type").TimeRangeValue;
            e?: FocusEvent;
            position?: import("./type").TimeRangePickerPartial;
        }) => void>;
        onInput: import("vue").PropType<(context: {
            value: import("./type").TimeRangeValue;
            e?: InputEvent;
            position?: import("./type").TimeRangePickerPartial;
        }) => void>;
        onPick: import("vue").PropType<(value: import("./type").TimeRangeValue, context: {
            e: MouseEvent;
            position?: import("./type").TimeRangePickerPartial;
        }) => void>;
    }>>, {
        value: import("./type").TimeRangeValue;
        size: "small" | "medium" | "large";
        status: "error" | "default" | "success" | "warning";
        placeholder: string | string[];
        format: string;
        modelValue: import("./type").TimeRangeValue;
        steps: (string | number)[];
        clearable: boolean;
        allowInput: boolean;
        hideDisabledTime: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        rangeInputProps: ObjectConstructor;
        popupProps: ObjectConstructor;
        allowInput: BooleanConstructor;
        clearable: BooleanConstructor;
        disableTime: {
            type: import("vue").PropType<(h: number, m: number, s: number, context: {
                partial: import("./type").TimeRangePickerPartial;
            }) => Partial<{
                hour: number[];
                minute: number[];
                second: number[];
            }>>;
        };
        disabled: {
            type: import("vue").PropType<boolean | boolean[]>;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        hideDisabledTime: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: import("vue").PropType<string | string[]>;
            default: string | string[];
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetTimeRange>;
        };
        size: {
            type: import("vue").PropType<"small" | "medium" | "large">;
            default: "small" | "medium" | "large";
            validator(val: "small" | "medium" | "large"): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        steps: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        value: {
            type: import("vue").PropType<import("./type").TimeRangeValue>;
            default: import("./type").TimeRangeValue;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TimeRangeValue>;
            default: import("./type").TimeRangeValue;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TimeRangeValue>;
        };
        onBlur: import("vue").PropType<(context: {
            value: import("./type").TimeRangeValue;
            e?: FocusEvent;
            position?: import("./type").TimeRangePickerPartial;
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").TimeRangeValue) => void>;
        onFocus: import("vue").PropType<(context?: {
            value: import("./type").TimeRangeValue;
            e?: FocusEvent;
            position?: import("./type").TimeRangePickerPartial;
        }) => void>;
        onInput: import("vue").PropType<(context: {
            value: import("./type").TimeRangeValue;
            e?: InputEvent;
            position?: import("./type").TimeRangePickerPartial;
        }) => void>;
        onPick: import("vue").PropType<(value: import("./type").TimeRangeValue, context: {
            e: MouseEvent;
            position?: import("./type").TimeRangePickerPartial;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        value: import("./type").TimeRangeValue;
        size: "small" | "medium" | "large";
        status: "error" | "default" | "success" | "warning";
        placeholder: string | string[];
        format: string;
        modelValue: import("./type").TimeRangeValue;
        steps: (string | number)[];
        clearable: boolean;
        allowInput: boolean;
        hideDisabledTime: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    rangeInputProps: ObjectConstructor;
    popupProps: ObjectConstructor;
    allowInput: BooleanConstructor;
    clearable: BooleanConstructor;
    disableTime: {
        type: import("vue").PropType<(h: number, m: number, s: number, context: {
            partial: import("./type").TimeRangePickerPartial;
        }) => Partial<{
            hour: number[];
            minute: number[];
            second: number[];
        }>>;
    };
    disabled: {
        type: import("vue").PropType<boolean | boolean[]>;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    hideDisabledTime: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: import("vue").PropType<string | string[]>;
        default: string | string[];
    };
    presets: {
        type: import("vue").PropType<import("./type").PresetTimeRange>;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    steps: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").TimeRangeValue>;
        default: import("./type").TimeRangeValue;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TimeRangeValue>;
        default: import("./type").TimeRangeValue;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TimeRangeValue>;
    };
    onBlur: import("vue").PropType<(context: {
        value: import("./type").TimeRangeValue;
        e?: FocusEvent;
        position?: import("./type").TimeRangePickerPartial;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").TimeRangeValue) => void>;
    onFocus: import("vue").PropType<(context?: {
        value: import("./type").TimeRangeValue;
        e?: FocusEvent;
        position?: import("./type").TimeRangePickerPartial;
    }) => void>;
    onInput: import("vue").PropType<(context: {
        value: import("./type").TimeRangeValue;
        e?: InputEvent;
        position?: import("./type").TimeRangePickerPartial;
    }) => void>;
    onPick: import("vue").PropType<(value: import("./type").TimeRangeValue, context: {
        e: MouseEvent;
        position?: import("./type").TimeRangePickerPartial;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: import("./type").TimeRangeValue;
    size: "small" | "medium" | "large";
    status: "error" | "default" | "success" | "warning";
    placeholder: string | string[];
    format: string;
    modelValue: import("./type").TimeRangeValue;
    steps: (string | number)[];
    clearable: boolean;
    allowInput: boolean;
    hideDisabledTime: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const TimePickerPanel: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        isFooterDisplay: BooleanConstructor;
        handleConfirmClick: FunctionConstructor;
        onChange: FunctionConstructor;
        disabled: {
            default: boolean;
            type: BooleanConstructor;
            validator(v: boolean): boolean;
        };
        isFocus: {
            default: boolean;
            type: BooleanConstructor;
            validator(v: boolean): boolean;
        };
        value: {
            type: StringConstructor;
            default: string;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        steps: {
            default: number[];
            type: import("vue").PropType<(string | number)[]>;
        };
        isShowPanel: {
            default: boolean;
            type: BooleanConstructor;
            validator(v: boolean): boolean;
        };
        activeIndex: {
            type: NumberConstructor;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetTime | import("./type").PresetTimeRange>;
        };
        hideDisabledTime: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableTime: {
            type: FunctionConstructor;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        isFooterDisplay: BooleanConstructor;
        handleConfirmClick: FunctionConstructor;
        onChange: FunctionConstructor;
        disabled: {
            default: boolean;
            type: BooleanConstructor;
            validator(v: boolean): boolean;
        };
        isFocus: {
            default: boolean;
            type: BooleanConstructor;
            validator(v: boolean): boolean;
        };
        value: {
            type: StringConstructor;
            default: string;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        steps: {
            default: number[];
            type: import("vue").PropType<(string | number)[]>;
        };
        isShowPanel: {
            default: boolean;
            type: BooleanConstructor;
            validator(v: boolean): boolean;
        };
        activeIndex: {
            type: NumberConstructor;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetTime | import("./type").PresetTimeRange>;
        };
        hideDisabledTime: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableTime: {
            type: FunctionConstructor;
        };
    }>>, {
        value: string;
        disabled: boolean;
        format: string;
        steps: (string | number)[];
        isFocus: boolean;
        isShowPanel: boolean;
        hideDisabledTime: boolean;
        isFooterDisplay: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        isFooterDisplay: BooleanConstructor;
        handleConfirmClick: FunctionConstructor;
        onChange: FunctionConstructor;
        disabled: {
            default: boolean;
            type: BooleanConstructor;
            validator(v: boolean): boolean;
        };
        isFocus: {
            default: boolean;
            type: BooleanConstructor;
            validator(v: boolean): boolean;
        };
        value: {
            type: StringConstructor;
            default: string;
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        steps: {
            default: number[];
            type: import("vue").PropType<(string | number)[]>;
        };
        isShowPanel: {
            default: boolean;
            type: BooleanConstructor;
            validator(v: boolean): boolean;
        };
        activeIndex: {
            type: NumberConstructor;
        };
        presets: {
            type: import("vue").PropType<import("./type").PresetTime | import("./type").PresetTimeRange>;
        };
        hideDisabledTime: {
            type: BooleanConstructor;
            default: boolean;
        };
        disableTime: {
            type: FunctionConstructor;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        value: string;
        disabled: boolean;
        format: string;
        steps: (string | number)[];
        isFocus: boolean;
        isShowPanel: boolean;
        hideDisabledTime: boolean;
        isFooterDisplay: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    isFooterDisplay: BooleanConstructor;
    handleConfirmClick: FunctionConstructor;
    onChange: FunctionConstructor;
    disabled: {
        default: boolean;
        type: BooleanConstructor;
        validator(v: boolean): boolean;
    };
    isFocus: {
        default: boolean;
        type: BooleanConstructor;
        validator(v: boolean): boolean;
    };
    value: {
        type: StringConstructor;
        default: string;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    steps: {
        default: number[];
        type: import("vue").PropType<(string | number)[]>;
    };
    isShowPanel: {
        default: boolean;
        type: BooleanConstructor;
        validator(v: boolean): boolean;
    };
    activeIndex: {
        type: NumberConstructor;
    };
    presets: {
        type: import("vue").PropType<import("./type").PresetTime | import("./type").PresetTimeRange>;
    };
    hideDisabledTime: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableTime: {
        type: FunctionConstructor;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: string;
    disabled: boolean;
    format: string;
    steps: (string | number)[];
    isFocus: boolean;
    isShowPanel: boolean;
    hideDisabledTime: boolean;
    isFooterDisplay: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default TimePicker;
