/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

import '../adapt.js';
import { usePrefixClass } from '../../hooks/useConfig.js';
import 'vue';
import '../../utils/withInstall.js';
import '../../hooks/useVModel.js';
import 'lodash/kebabCase';
import '../../hooks/useDefaultValue.js';
import 'tdesign-icons-vue-next';
import '../../checkbox/index.js';
import '../../checkbox/checkbox.js';
import '@babel/runtime/helpers/slicedToArray';
import '@babel/runtime/helpers/defineProperty';
import '../../checkbox/props.js';
import '../../hooks/useRipple.js';
import '../../hooks/useKeepAnimation.js';
import '../../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../../_common/js/global-config/default-config.js';
import '../../_common/js/global-config/locale/zh_CN.js';
import '../../_chunks/dep-4514b13f.js';
import '@babel/runtime/helpers/typeof';
import '../../_chunks/dep-224df961.js';
import 'dayjs';
import '../../_chunks/dep-d396aaa6.js';
import 'lodash/isArray';
import '../../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import 'lodash/isString';
import '../../config-provider/type.js';
import '../../utils/set-style.js';
import '../../hooks/tnode.js';
import 'lodash/camelCase';
import '../../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import '../../checkbox/constants.js';
import '../../checkbox/hooks/useCheckboxLazyLoad.js';
import '../../_common/js/utils/observe.js';
import '../../checkbox/hooks/useKeyboardEvent.js';
import '../../_common/js/common.js';
import '../../hooks/useDisabled.js';
import 'lodash/isBoolean';
import '../../checkbox/group.js';
import '@babel/runtime/helpers/toConsumableArray';
import 'lodash/intersection';
import 'lodash/isUndefined';
import '../../checkbox/checkbox-group-props.js';
import '../../hooks/slot.js';
import '../../checkbox/style';
import '../../checkbox/type.js';
import '../../loading/index.js';
import '../../loading/directive.js';
import 'lodash/mapKeys';
import 'lodash/isEqual';
import '../../loading/plugin.js';
import '../../loading/loading.js';
import '../../loading/icon/gradient.js';
import '../../_common/js/loading/circle-adapter.js';
import '../../_common/js/utils/set-style.js';
import '../../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/isNull';
import 'lodash/isNumber';
import '../../utils/dom.js';
import '../../utils/easing.js';
import '../../loading/props.js';
import '../../hooks/useTeleport.js';
import '../../loading/style';
import '../../loading/type.js';
import '../../hooks/useGlobalIcon.js';
import '../../hooks/useLazyLoad.js';
import '../../hooks/useVirtualScrollNew.js';
import '../../hooks/useResizeObserver.js';
import 'lodash/max';
import 'lodash/min';
import 'lodash/sum';
import 'lodash/throttle';
import '../../_common/js/tree/tree-node.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/helpers/classCallCheck';
import '@babel/runtime/helpers/createClass';
import '@babel/runtime/regenerator';
import 'lodash/uniqueId';
import 'lodash/isNil';
import 'lodash/get';
import '../../_common/js/tree/tree-node-model.js';
import 'lodash/omit';
import '../../_common/js/log/log.js';
import '../../_common/js/log/index.js';

function useItemEvents(state) {
  var context = state.context;
  var classPrefix = usePrefixClass().value;
  var handleChange = function handleChange(_, ctx) {
    var node = state.node;
    var event = new Event("change");
    var evtContext = {
      event: event,
      node: node
    };
    context.emit("change", evtContext, ctx);
  };
  var clicked = false;
  var handleClick = function handleClick(evt) {
    var _srcTarget$className, _srcTarget$className$;
    var node = state.node,
      treeScope = state.treeScope;
    var _treeScope$treeProps = treeScope.treeProps,
      treeProps = _treeScope$treeProps === void 0 ? {} : _treeScope$treeProps;
    var expandOnClickNode = treeProps.expandOnClickNode;
    var srcTarget = evt.target;
    var isBranchTrigger = node.children && expandOnClickNode && (srcTarget.className === "".concat(classPrefix, "-checkbox__input") || srcTarget.tagName.toLowerCase() === "input");
    if (clicked || isBranchTrigger) return;
    clicked = true;
    setTimeout(function () {
      clicked = false;
    });
    if (expandOnClickNode && node.children && ((_srcTarget$className = srcTarget.className) === null || _srcTarget$className === void 0 || (_srcTarget$className$ = _srcTarget$className.indexOf) === null || _srcTarget$className$ === void 0 ? void 0 : _srcTarget$className$.call(_srcTarget$className, "".concat(classPrefix, "-tree__label"))) !== -1) evt.preventDefault();
    var evtContext = {
      mouseEvent: evt,
      event: evt,
      node: node,
      path: node.getPath()
    };
    context.emit("click", evtContext);
  };
  return {
    handleChange: handleChange,
    handleClick: handleClick
  };
}

export { useItemEvents as default };
//# sourceMappingURL=useItemEvents.js.map
