/**
 * tdesign v1.9.4
 * (c) 2024 tdesign
 * @license MIT
 */

import { getMark, emitEvent } from '../util.js';
import useTreeAction from './useTreeAction.js';
import '@babel/runtime/helpers/defineProperty';
import 'lodash/camelCase';
import '../adapt.js';
import 'vue';
import '../../utils/withInstall.js';
import '../../hooks/useVModel.js';
import 'lodash/kebabCase';
import '../../hooks/useDefaultValue.js';
import 'tdesign-icons-vue-next';
import '../../checkbox/index.js';
import '../../checkbox/checkbox.js';
import '@babel/runtime/helpers/slicedToArray';
import '../../checkbox/props.js';
import '../../hooks/useRipple.js';
import '../../hooks/useKeepAnimation.js';
import '../../hooks/useConfig.js';
import '../../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import 'lodash/isString';
import '../../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../../_common/js/global-config/default-config.js';
import '../../_common/js/global-config/locale/zh_CN.js';
import '../../_chunks/dep-4514b13f.js';
import '@babel/runtime/helpers/typeof';
import '../../_chunks/dep-224df961.js';
import 'dayjs';
import '../../_chunks/dep-d396aaa6.js';
import 'lodash/isArray';
import '../../config-provider/type.js';
import '../../utils/set-style.js';
import '../../hooks/tnode.js';
import '../../utils/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import '../../checkbox/constants.js';
import '../../checkbox/hooks/useCheckboxLazyLoad.js';
import '../../_common/js/utils/observe.js';
import '../../checkbox/hooks/useKeyboardEvent.js';
import '../../_common/js/common.js';
import '../../hooks/useDisabled.js';
import 'lodash/isBoolean';
import '../../checkbox/group.js';
import '@babel/runtime/helpers/toConsumableArray';
import 'lodash/intersection';
import 'lodash/isUndefined';
import '../../checkbox/checkbox-group-props.js';
import '../../hooks/slot.js';
import '../../checkbox/style';
import '../../checkbox/type.js';
import '../../loading/index.js';
import '../../loading/directive.js';
import 'lodash/mapKeys';
import 'lodash/isEqual';
import '../../loading/plugin.js';
import '../../loading/loading.js';
import '../../loading/icon/gradient.js';
import '../../_common/js/loading/circle-adapter.js';
import '../../_common/js/utils/set-style.js';
import '../../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/isNull';
import 'lodash/isNumber';
import '../../utils/dom.js';
import '../../utils/easing.js';
import '../../loading/props.js';
import '../../hooks/useTeleport.js';
import '../../loading/style';
import '../../loading/type.js';
import '../../hooks/useGlobalIcon.js';
import '../../hooks/useLazyLoad.js';
import '../../hooks/useVirtualScrollNew.js';
import '../../hooks/useResizeObserver.js';
import 'lodash/max';
import 'lodash/min';
import 'lodash/sum';
import 'lodash/throttle';
import '../../_common/js/tree/tree-node.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/helpers/classCallCheck';
import '@babel/runtime/helpers/createClass';
import '@babel/runtime/regenerator';
import 'lodash/uniqueId';
import 'lodash/isNil';
import 'lodash/get';
import '../../_common/js/tree/tree-node-model.js';
import 'lodash/omit';
import '../../_common/js/log/log.js';
import '../../_common/js/log/index.js';

function useTreeEvents(state) {
  var treeState = state;
  var props = treeState.props,
    context = treeState.context;
  var _useTreeAction = useTreeAction(state),
    toggleExpanded = _useTreeAction.toggleExpanded,
    toggleActived = _useTreeAction.toggleActived,
    toggleChecked = _useTreeAction.toggleChecked;
  var handleClick = function handleClick(evtState) {
    var mouseEvent = evtState.mouseEvent,
      event = evtState.event,
      node = evtState.node;
    if (!node || !mouseEvent) return;
    treeState.mouseEvent = mouseEvent;
    var shouldExpand = props.expandOnClickNode;
    var shouldActive = !props.disabled && !node.disabled && node.isActivable();
    ["trigger", "ignore"].forEach(function (markName) {
      var mark = getMark(markName, event.target, event.currentTarget);
      var markValue = (mark === null || mark === void 0 ? void 0 : mark.value) || "";
      if (markValue.indexOf("expand") >= 0) {
        if (markName === "trigger") {
          shouldExpand = true;
        } else if (markName === "ignore") {
          shouldExpand = false;
        }
      }
      if (markValue.indexOf("active") >= 0) {
        if (markName === "ignore") {
          shouldActive = false;
        }
      }
    });
    if (shouldExpand) {
      toggleExpanded(node);
    }
    if (shouldActive) {
      toggleActived(node);
    }
    var evtCtx = {
      node: node.getModel(),
      e: mouseEvent
    };
    emitEvent(props, context, "click", evtCtx);
    treeState.mouseEvent = null;
  };
  var handleChange = function handleChange(evtState, ctx) {
    var disabled = props.disabled;
    var node = evtState.node;
    if (!node || disabled || node.disabled || !node.isCheckable()) {
      return;
    }
    toggleChecked(node, ctx);
  };
  return {
    handleChange: handleChange,
    handleClick: handleClick
  };
}

export { useTreeEvents as default };
//# sourceMappingURL=useTreeEvents.js.map
