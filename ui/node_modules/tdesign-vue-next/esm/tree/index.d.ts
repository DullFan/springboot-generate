import './style';
export declare const Tree: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        activable: BooleanConstructor;
        activeMultiple: BooleanConstructor;
        actived: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: import("./type").TreeNodeValue[];
        };
        defaultActived: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        };
        allowFoldNodeOnFilter: BooleanConstructor;
        checkProps: {
            type: import("vue").PropType<import("..").TdCheckboxProps>;
        };
        checkStrictly: BooleanConstructor;
        checkable: BooleanConstructor;
        data: {
            type: import("vue").PropType<import("..").TreeOptionData<string | number>[]>;
            default: () => import("..").TreeOptionData<string | number>[];
        };
        disableCheck: {
            type: import("vue").PropType<boolean | ((node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean)>;
            default: boolean | ((node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean);
        };
        disabled: BooleanConstructor;
        draggable: BooleanConstructor;
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        expandAll: BooleanConstructor;
        expandLevel: {
            type: NumberConstructor;
            default: number;
        };
        expandMutex: BooleanConstructor;
        expandOnClickNode: BooleanConstructor;
        expandParent: BooleanConstructor;
        expanded: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: import("./type").TreeNodeValue[];
        };
        defaultExpanded: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: () => import("./type").TreeNodeValue[];
        };
        filter: {
            type: import("vue").PropType<(node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean>;
        };
        height: {
            type: import("vue").PropType<string | number>;
        };
        hover: BooleanConstructor;
        icon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue);
        };
        keys: {
            type: import("vue").PropType<import("..").TreeKeysType>;
        };
        label: {
            type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue)>;
            default: string | boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue);
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        line: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        load: {
            type: import("vue").PropType<(node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => Promise<import("..").TreeOptionData<string | number>[]>>;
        };
        maxHeight: {
            type: import("vue").PropType<string | number>;
        };
        operations: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue>;
        };
        scroll: {
            type: import("vue").PropType<import("..").TScroll>;
        };
        transition: {
            type: BooleanConstructor;
            default: boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: import("./type").TreeNodeValue[];
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: import("./type").TreeNodeValue[];
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: () => import("./type").TreeNodeValue[];
        };
        valueMode: {
            type: import("vue").PropType<"all" | "onlyLeaf" | "parentFirst">;
            default: "all" | "onlyLeaf" | "parentFirst";
            validator(val: "all" | "onlyLeaf" | "parentFirst"): boolean;
        };
        onActive: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            e?: MouseEvent;
            trigger: "setItem" | "node-click";
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            e?: any;
            trigger: "setItem" | "node-click";
        }) => void>;
        onClick: import("vue").PropType<(context: {
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            e: MouseEvent;
        }) => void>;
        onDragEnd: import("vue").PropType<(context: {
            e: DragEvent;
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        }) => void>;
        onDragLeave: import("vue").PropType<(context: {
            e: DragEvent;
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        }) => void>;
        onDragOver: import("vue").PropType<(context: {
            e: DragEvent;
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        }) => void>;
        onDragStart: import("vue").PropType<(context: {
            e: DragEvent;
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        }) => void>;
        onDrop: import("vue").PropType<(context: {
            e: DragEvent;
            dragNode: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            dropNode: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            dropPosition: number;
        }) => void>;
        onExpand: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            e?: MouseEvent;
            trigger: "setItem" | "node-click" | "icon-click";
        }) => void>;
        onLoad: import("vue").PropType<(context: {
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        }) => void>;
        onScroll: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
    }>>, {
        t: <T>(pattern: T, ...args: any[]) => any;
        global: import("vue").ComputedRef<{} & import("..").TreeConfig>;
        classPrefix: import("vue").ComputedRef<string>;
        componentName: import("vue").ComputedRef<string>;
        state: import("./tree-types").TypeTreeState;
        store: import("../_common/js/tree/tree-store").TreeStore;
        treeClasses: import("vue").ComputedRef<string[]>;
        treeContentRef: import("./adapt").TypeRef<HTMLDivElement>;
        rebuild: (list: import("./adapt").TypeTreeOptionData[]) => void;
        updateStoreConfig: () => void;
        setActived: (item: import("./tree-types").TypeTargetNode, isActived: boolean) => import("../cascader/interface").TreeNodeValue[];
        setExpanded: (item: import("./tree-types").TypeTargetNode, isExpanded: boolean) => import("./type").TreeNodeValue[];
        setChecked: (item: import("./tree-types").TypeTargetNode, isChecked: boolean, ctx: {
            e: Event;
        }) => import("./type").TreeNodeValue[];
        renderTreeNodes: (h: typeof import("vue").h) => import("./adapt").TypeVNode[];
        nodesEmpty: import("vue").Ref<boolean>;
        isScrolling: import("./adapt").TypeRef<boolean>;
        onInnerVirtualScroll: (e: WheelEvent) => void;
        treeContentStyles: import("vue").ComputedRef<import("..").Styles>;
        scrollStyles: import("vue").ComputedRef<import("..").Styles>;
        cursorStyles: import("vue").ComputedRef<import("..").Styles>;
        virtualConfig: {
            visibleData: import("vue").Ref<any[]>;
            translateY: import("vue").Ref<number>;
            scrollHeight: import("vue").Ref<number>;
            isVirtualScroll: import("vue").ComputedRef<boolean>;
            handleScroll: () => void;
            handleRowMounted: (rowData: any) => void;
            scrollToElement: (p: import("../hooks/useVirtualScrollNew").ScrollToElementParams) => void;
        };
        scrollToElement: (p: import("../hooks/useVirtualScrollNew").ScrollToElementParams) => void;
    }, unknown, {}, {
        refresh(): void;
        setItem(value: import("./type").TreeNodeValue, options: import("./type").TreeNodeState): void;
        getItem(value: import("./type").TreeNodeValue): import("./tree-types").TypeTreeNodeModel;
        getItems(value?: import("./type").TreeNodeValue): import("./tree-types").TypeTreeNodeModel[];
        appendTo(para?: import("./type").TreeNodeValue, item?: import("./adapt").TypeTreeOptionData | import("./adapt").TypeTreeOptionData[]): void;
        insertBefore(value: import("./type").TreeNodeValue, item: import("./adapt").TypeTreeOptionData): void;
        insertAfter(value: import("./type").TreeNodeValue, item: import("./adapt").TypeTreeOptionData): void;
        remove(value?: import("./type").TreeNodeValue): void;
        getIndex(value: import("./type").TreeNodeValue): number;
        getParent(value: import("./type").TreeNodeValue): import("./tree-types").TypeTreeNodeModel;
        getParents(value: import("./type").TreeNodeValue): import("./tree-types").TypeTreeNodeModel[];
        getPath(value: import("./type").TreeNodeValue): import("./tree-types").TypeTreeNodeModel[];
        getTreeData(value?: import("./type").TreeNodeValue): import("./adapt").TypeTreeOptionData[];
    }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        activable: BooleanConstructor;
        activeMultiple: BooleanConstructor;
        actived: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: import("./type").TreeNodeValue[];
        };
        defaultActived: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        };
        allowFoldNodeOnFilter: BooleanConstructor;
        checkProps: {
            type: import("vue").PropType<import("..").TdCheckboxProps>;
        };
        checkStrictly: BooleanConstructor;
        checkable: BooleanConstructor;
        data: {
            type: import("vue").PropType<import("..").TreeOptionData<string | number>[]>;
            default: () => import("..").TreeOptionData<string | number>[];
        };
        disableCheck: {
            type: import("vue").PropType<boolean | ((node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean)>;
            default: boolean | ((node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean);
        };
        disabled: BooleanConstructor;
        draggable: BooleanConstructor;
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        expandAll: BooleanConstructor;
        expandLevel: {
            type: NumberConstructor;
            default: number;
        };
        expandMutex: BooleanConstructor;
        expandOnClickNode: BooleanConstructor;
        expandParent: BooleanConstructor;
        expanded: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: import("./type").TreeNodeValue[];
        };
        defaultExpanded: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: () => import("./type").TreeNodeValue[];
        };
        filter: {
            type: import("vue").PropType<(node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean>;
        };
        height: {
            type: import("vue").PropType<string | number>;
        };
        hover: BooleanConstructor;
        icon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue);
        };
        keys: {
            type: import("vue").PropType<import("..").TreeKeysType>;
        };
        label: {
            type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue)>;
            default: string | boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue);
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        line: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        load: {
            type: import("vue").PropType<(node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => Promise<import("..").TreeOptionData<string | number>[]>>;
        };
        maxHeight: {
            type: import("vue").PropType<string | number>;
        };
        operations: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue>;
        };
        scroll: {
            type: import("vue").PropType<import("..").TScroll>;
        };
        transition: {
            type: BooleanConstructor;
            default: boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: import("./type").TreeNodeValue[];
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: import("./type").TreeNodeValue[];
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: () => import("./type").TreeNodeValue[];
        };
        valueMode: {
            type: import("vue").PropType<"all" | "onlyLeaf" | "parentFirst">;
            default: "all" | "onlyLeaf" | "parentFirst";
            validator(val: "all" | "onlyLeaf" | "parentFirst"): boolean;
        };
        onActive: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            e?: MouseEvent;
            trigger: "setItem" | "node-click";
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            e?: any;
            trigger: "setItem" | "node-click";
        }) => void>;
        onClick: import("vue").PropType<(context: {
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            e: MouseEvent;
        }) => void>;
        onDragEnd: import("vue").PropType<(context: {
            e: DragEvent;
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        }) => void>;
        onDragLeave: import("vue").PropType<(context: {
            e: DragEvent;
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        }) => void>;
        onDragOver: import("vue").PropType<(context: {
            e: DragEvent;
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        }) => void>;
        onDragStart: import("vue").PropType<(context: {
            e: DragEvent;
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        }) => void>;
        onDrop: import("vue").PropType<(context: {
            e: DragEvent;
            dragNode: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            dropNode: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            dropPosition: number;
        }) => void>;
        onExpand: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            e?: MouseEvent;
            trigger: "setItem" | "node-click" | "icon-click";
        }) => void>;
        onLoad: import("vue").PropType<(context: {
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        }) => void>;
        onScroll: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
    }>>, {
        data: import("..").TreeOptionData<string | number>[];
        transition: boolean;
        value: import("./type").TreeNodeValue[];
        label: string | boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue);
        line: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        draggable: boolean;
        lazy: boolean;
        disabled: boolean;
        empty: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        expanded: import("./type").TreeNodeValue[];
        icon: boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue);
        modelValue: import("./type").TreeNodeValue[];
        defaultValue: import("./type").TreeNodeValue[];
        hover: boolean;
        defaultExpanded: import("./type").TreeNodeValue[];
        expandMutex: boolean;
        activeMultiple: boolean;
        valueMode: "all" | "onlyLeaf" | "parentFirst";
        checkStrictly: boolean;
        checkable: boolean;
        activable: boolean;
        actived: import("./type").TreeNodeValue[];
        allowFoldNodeOnFilter: boolean;
        disableCheck: boolean | ((node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean);
        expandAll: boolean;
        expandLevel: number;
        expandOnClickNode: boolean;
        expandParent: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        activable: BooleanConstructor;
        activeMultiple: BooleanConstructor;
        actived: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: import("./type").TreeNodeValue[];
        };
        defaultActived: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        };
        allowFoldNodeOnFilter: BooleanConstructor;
        checkProps: {
            type: import("vue").PropType<import("..").TdCheckboxProps>;
        };
        checkStrictly: BooleanConstructor;
        checkable: BooleanConstructor;
        data: {
            type: import("vue").PropType<import("..").TreeOptionData<string | number>[]>;
            default: () => import("..").TreeOptionData<string | number>[];
        };
        disableCheck: {
            type: import("vue").PropType<boolean | ((node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean)>;
            default: boolean | ((node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean);
        };
        disabled: BooleanConstructor;
        draggable: BooleanConstructor;
        empty: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        expandAll: BooleanConstructor;
        expandLevel: {
            type: NumberConstructor;
            default: number;
        };
        expandMutex: BooleanConstructor;
        expandOnClickNode: BooleanConstructor;
        expandParent: BooleanConstructor;
        expanded: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: import("./type").TreeNodeValue[];
        };
        defaultExpanded: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: () => import("./type").TreeNodeValue[];
        };
        filter: {
            type: import("vue").PropType<(node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean>;
        };
        height: {
            type: import("vue").PropType<string | number>;
        };
        hover: BooleanConstructor;
        icon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue);
        };
        keys: {
            type: import("vue").PropType<import("..").TreeKeysType>;
        };
        label: {
            type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue)>;
            default: string | boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue);
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        line: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        load: {
            type: import("vue").PropType<(node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => Promise<import("..").TreeOptionData<string | number>[]>>;
        };
        maxHeight: {
            type: import("vue").PropType<string | number>;
        };
        operations: {
            type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue>;
        };
        scroll: {
            type: import("vue").PropType<import("..").TScroll>;
        };
        transition: {
            type: BooleanConstructor;
            default: boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: import("./type").TreeNodeValue[];
        };
        modelValue: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: import("./type").TreeNodeValue[];
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").TreeNodeValue[]>;
            default: () => import("./type").TreeNodeValue[];
        };
        valueMode: {
            type: import("vue").PropType<"all" | "onlyLeaf" | "parentFirst">;
            default: "all" | "onlyLeaf" | "parentFirst";
            validator(val: "all" | "onlyLeaf" | "parentFirst"): boolean;
        };
        onActive: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            e?: MouseEvent;
            trigger: "setItem" | "node-click";
        }) => void>;
        onChange: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            e?: any;
            trigger: "setItem" | "node-click";
        }) => void>;
        onClick: import("vue").PropType<(context: {
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            e: MouseEvent;
        }) => void>;
        onDragEnd: import("vue").PropType<(context: {
            e: DragEvent;
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        }) => void>;
        onDragLeave: import("vue").PropType<(context: {
            e: DragEvent;
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        }) => void>;
        onDragOver: import("vue").PropType<(context: {
            e: DragEvent;
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        }) => void>;
        onDragStart: import("vue").PropType<(context: {
            e: DragEvent;
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        }) => void>;
        onDrop: import("vue").PropType<(context: {
            e: DragEvent;
            dragNode: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            dropNode: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            dropPosition: number;
        }) => void>;
        onExpand: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
            e?: MouseEvent;
            trigger: "setItem" | "node-click" | "icon-click";
        }) => void>;
        onLoad: import("vue").PropType<(context: {
            node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        }) => void>;
        onScroll: import("vue").PropType<(params: {
            e: WheelEvent;
        }) => void>;
    }>>, {
        t: <T>(pattern: T, ...args: any[]) => any;
        global: import("vue").ComputedRef<{} & import("..").TreeConfig>;
        classPrefix: import("vue").ComputedRef<string>;
        componentName: import("vue").ComputedRef<string>;
        state: import("./tree-types").TypeTreeState;
        store: import("../_common/js/tree/tree-store").TreeStore;
        treeClasses: import("vue").ComputedRef<string[]>;
        treeContentRef: import("./adapt").TypeRef<HTMLDivElement>;
        rebuild: (list: import("./adapt").TypeTreeOptionData[]) => void;
        updateStoreConfig: () => void;
        setActived: (item: import("./tree-types").TypeTargetNode, isActived: boolean) => import("../cascader/interface").TreeNodeValue[];
        setExpanded: (item: import("./tree-types").TypeTargetNode, isExpanded: boolean) => import("./type").TreeNodeValue[];
        setChecked: (item: import("./tree-types").TypeTargetNode, isChecked: boolean, ctx: {
            e: Event;
        }) => import("./type").TreeNodeValue[];
        renderTreeNodes: (h: typeof import("vue").h) => import("./adapt").TypeVNode[];
        nodesEmpty: import("vue").Ref<boolean>;
        isScrolling: import("./adapt").TypeRef<boolean>;
        onInnerVirtualScroll: (e: WheelEvent) => void;
        treeContentStyles: import("vue").ComputedRef<import("..").Styles>;
        scrollStyles: import("vue").ComputedRef<import("..").Styles>;
        cursorStyles: import("vue").ComputedRef<import("..").Styles>;
        virtualConfig: {
            visibleData: import("vue").Ref<any[]>;
            translateY: import("vue").Ref<number>;
            scrollHeight: import("vue").Ref<number>;
            isVirtualScroll: import("vue").ComputedRef<boolean>;
            handleScroll: () => void;
            handleRowMounted: (rowData: any) => void;
            scrollToElement: (p: import("../hooks/useVirtualScrollNew").ScrollToElementParams) => void;
        };
        scrollToElement: (p: import("../hooks/useVirtualScrollNew").ScrollToElementParams) => void;
    }, {}, {}, {
        refresh(): void;
        setItem(value: import("./type").TreeNodeValue, options: import("./type").TreeNodeState): void;
        getItem(value: import("./type").TreeNodeValue): import("./tree-types").TypeTreeNodeModel;
        getItems(value?: import("./type").TreeNodeValue): import("./tree-types").TypeTreeNodeModel[];
        appendTo(para?: import("./type").TreeNodeValue, item?: import("./adapt").TypeTreeOptionData | import("./adapt").TypeTreeOptionData[]): void;
        insertBefore(value: import("./type").TreeNodeValue, item: import("./adapt").TypeTreeOptionData): void;
        insertAfter(value: import("./type").TreeNodeValue, item: import("./adapt").TypeTreeOptionData): void;
        remove(value?: import("./type").TreeNodeValue): void;
        getIndex(value: import("./type").TreeNodeValue): number;
        getParent(value: import("./type").TreeNodeValue): import("./tree-types").TypeTreeNodeModel;
        getParents(value: import("./type").TreeNodeValue): import("./tree-types").TypeTreeNodeModel[];
        getPath(value: import("./type").TreeNodeValue): import("./tree-types").TypeTreeNodeModel[];
        getTreeData(value?: import("./type").TreeNodeValue): import("./adapt").TypeTreeOptionData[];
    }, {
        data: import("..").TreeOptionData<string | number>[];
        transition: boolean;
        value: import("./type").TreeNodeValue[];
        label: string | boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue);
        line: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        draggable: boolean;
        lazy: boolean;
        disabled: boolean;
        empty: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        expanded: import("./type").TreeNodeValue[];
        icon: boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue);
        modelValue: import("./type").TreeNodeValue[];
        defaultValue: import("./type").TreeNodeValue[];
        hover: boolean;
        defaultExpanded: import("./type").TreeNodeValue[];
        expandMutex: boolean;
        activeMultiple: boolean;
        valueMode: "all" | "onlyLeaf" | "parentFirst";
        checkStrictly: boolean;
        checkable: boolean;
        activable: boolean;
        actived: import("./type").TreeNodeValue[];
        allowFoldNodeOnFilter: boolean;
        disableCheck: boolean | ((node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean);
        expandAll: boolean;
        expandLevel: number;
        expandOnClickNode: boolean;
        expandParent: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    activable: BooleanConstructor;
    activeMultiple: BooleanConstructor;
    actived: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        default: import("./type").TreeNodeValue[];
    };
    defaultActived: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
    };
    allowFoldNodeOnFilter: BooleanConstructor;
    checkProps: {
        type: import("vue").PropType<import("..").TdCheckboxProps>;
    };
    checkStrictly: BooleanConstructor;
    checkable: BooleanConstructor;
    data: {
        type: import("vue").PropType<import("..").TreeOptionData<string | number>[]>;
        default: () => import("..").TreeOptionData<string | number>[];
    };
    disableCheck: {
        type: import("vue").PropType<boolean | ((node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean)>;
        default: boolean | ((node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean);
    };
    disabled: BooleanConstructor;
    draggable: BooleanConstructor;
    empty: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    expandAll: BooleanConstructor;
    expandLevel: {
        type: NumberConstructor;
        default: number;
    };
    expandMutex: BooleanConstructor;
    expandOnClickNode: BooleanConstructor;
    expandParent: BooleanConstructor;
    expanded: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        default: import("./type").TreeNodeValue[];
    };
    defaultExpanded: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        default: () => import("./type").TreeNodeValue[];
    };
    filter: {
        type: import("vue").PropType<(node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean>;
    };
    height: {
        type: import("vue").PropType<string | number>;
    };
    hover: BooleanConstructor;
    icon: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue)>;
        default: boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue);
    };
    keys: {
        type: import("vue").PropType<import("..").TreeKeysType>;
    };
    label: {
        type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue)>;
        default: string | boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue);
    };
    lazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    line: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    load: {
        type: import("vue").PropType<(node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => Promise<import("..").TreeOptionData<string | number>[]>>;
    };
    maxHeight: {
        type: import("vue").PropType<string | number>;
    };
    operations: {
        type: import("vue").PropType<(h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue>;
    };
    scroll: {
        type: import("vue").PropType<import("..").TScroll>;
    };
    transition: {
        type: BooleanConstructor;
        default: boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        default: import("./type").TreeNodeValue[];
    };
    modelValue: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        default: import("./type").TreeNodeValue[];
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TreeNodeValue[]>;
        default: () => import("./type").TreeNodeValue[];
    };
    valueMode: {
        type: import("vue").PropType<"all" | "onlyLeaf" | "parentFirst">;
        default: "all" | "onlyLeaf" | "parentFirst";
        validator(val: "all" | "onlyLeaf" | "parentFirst"): boolean;
    };
    onActive: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
        node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        e?: MouseEvent;
        trigger: "setItem" | "node-click";
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
        node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        e?: any;
        trigger: "setItem" | "node-click";
    }) => void>;
    onClick: import("vue").PropType<(context: {
        node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        e: MouseEvent;
    }) => void>;
    onDragEnd: import("vue").PropType<(context: {
        e: DragEvent;
        node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
    }) => void>;
    onDragLeave: import("vue").PropType<(context: {
        e: DragEvent;
        node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
    }) => void>;
    onDragOver: import("vue").PropType<(context: {
        e: DragEvent;
        node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
    }) => void>;
    onDragStart: import("vue").PropType<(context: {
        e: DragEvent;
        node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
    }) => void>;
    onDrop: import("vue").PropType<(context: {
        e: DragEvent;
        dragNode: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        dropNode: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        dropPosition: number;
    }) => void>;
    onExpand: import("vue").PropType<(value: import("./type").TreeNodeValue[], context: {
        node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
        e?: MouseEvent;
        trigger: "setItem" | "node-click" | "icon-click";
    }) => void>;
    onLoad: import("vue").PropType<(context: {
        node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>;
    }) => void>;
    onScroll: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
}>>, {
    t: <T>(pattern: T, ...args: any[]) => any;
    global: import("vue").ComputedRef<{} & import("..").TreeConfig>;
    classPrefix: import("vue").ComputedRef<string>;
    componentName: import("vue").ComputedRef<string>;
    state: import("./tree-types").TypeTreeState;
    store: import("../_common/js/tree/tree-store").TreeStore;
    treeClasses: import("vue").ComputedRef<string[]>;
    treeContentRef: import("./adapt").TypeRef<HTMLDivElement>;
    rebuild: (list: import("./adapt").TypeTreeOptionData[]) => void;
    updateStoreConfig: () => void;
    setActived: (item: import("./tree-types").TypeTargetNode, isActived: boolean) => import("../cascader/interface").TreeNodeValue[];
    setExpanded: (item: import("./tree-types").TypeTargetNode, isExpanded: boolean) => import("./type").TreeNodeValue[];
    setChecked: (item: import("./tree-types").TypeTargetNode, isChecked: boolean, ctx: {
        e: Event;
    }) => import("./type").TreeNodeValue[];
    renderTreeNodes: (h: typeof import("vue").h) => import("./adapt").TypeVNode[];
    nodesEmpty: import("vue").Ref<boolean>;
    isScrolling: import("./adapt").TypeRef<boolean>;
    onInnerVirtualScroll: (e: WheelEvent) => void;
    treeContentStyles: import("vue").ComputedRef<import("..").Styles>;
    scrollStyles: import("vue").ComputedRef<import("..").Styles>;
    cursorStyles: import("vue").ComputedRef<import("..").Styles>;
    virtualConfig: {
        visibleData: import("vue").Ref<any[]>;
        translateY: import("vue").Ref<number>;
        scrollHeight: import("vue").Ref<number>;
        isVirtualScroll: import("vue").ComputedRef<boolean>;
        handleScroll: () => void;
        handleRowMounted: (rowData: any) => void;
        scrollToElement: (p: import("../hooks/useVirtualScrollNew").ScrollToElementParams) => void;
    };
    scrollToElement: (p: import("../hooks/useVirtualScrollNew").ScrollToElementParams) => void;
}, unknown, {}, {
    refresh(): void;
    setItem(value: import("./type").TreeNodeValue, options: import("./type").TreeNodeState): void;
    getItem(value: import("./type").TreeNodeValue): import("./tree-types").TypeTreeNodeModel;
    getItems(value?: import("./type").TreeNodeValue): import("./tree-types").TypeTreeNodeModel[];
    appendTo(para?: import("./type").TreeNodeValue, item?: import("./adapt").TypeTreeOptionData | import("./adapt").TypeTreeOptionData[]): void;
    insertBefore(value: import("./type").TreeNodeValue, item: import("./adapt").TypeTreeOptionData): void;
    insertAfter(value: import("./type").TreeNodeValue, item: import("./adapt").TypeTreeOptionData): void;
    remove(value?: import("./type").TreeNodeValue): void;
    getIndex(value: import("./type").TreeNodeValue): number;
    getParent(value: import("./type").TreeNodeValue): import("./tree-types").TypeTreeNodeModel;
    getParents(value: import("./type").TreeNodeValue): import("./tree-types").TypeTreeNodeModel[];
    getPath(value: import("./type").TreeNodeValue): import("./tree-types").TypeTreeNodeModel[];
    getTreeData(value?: import("./type").TreeNodeValue): import("./adapt").TypeTreeOptionData[];
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    data: import("..").TreeOptionData<string | number>[];
    transition: boolean;
    value: import("./type").TreeNodeValue[];
    label: string | boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue);
    line: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    draggable: boolean;
    lazy: boolean;
    disabled: boolean;
    empty: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    expanded: import("./type").TreeNodeValue[];
    icon: boolean | ((h: typeof import("vue").h, props: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => import("..").SlotReturnValue);
    modelValue: import("./type").TreeNodeValue[];
    defaultValue: import("./type").TreeNodeValue[];
    hover: boolean;
    defaultExpanded: import("./type").TreeNodeValue[];
    expandMutex: boolean;
    activeMultiple: boolean;
    valueMode: "all" | "onlyLeaf" | "parentFirst";
    checkStrictly: boolean;
    checkable: boolean;
    activable: boolean;
    actived: import("./type").TreeNodeValue[];
    allowFoldNodeOnFilter: boolean;
    disableCheck: boolean | ((node: import("./type").TreeNodeModel<import("..").TreeOptionData<string | number>>) => boolean);
    expandAll: boolean;
    expandLevel: number;
    expandOnClickNode: boolean;
    expandParent: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export * from './tree-types';
export default Tree;
