import { TdBadgeProps } from './type';
import './style';
export * from './type';
export declare type BadgeProps = TdBadgeProps;
export declare const Badge: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        color: {
            type: StringConstructor;
            default: string;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        count: {
            type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: number;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        dot: BooleanConstructor;
        maxCount: {
            type: NumberConstructor;
            default: number;
        };
        offset: {
            type: import("vue").PropType<(string | number)[]>;
        };
        shape: {
            type: import("vue").PropType<"round" | "circle">;
            default: "round" | "circle";
            validator(val: "round" | "circle"): boolean;
        };
        showZero: BooleanConstructor;
        size: {
            type: import("vue").PropType<"small" | "medium">;
            default: "small" | "medium";
            validator(val: "small" | "medium"): boolean;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        color: {
            type: StringConstructor;
            default: string;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        count: {
            type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: number;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        dot: BooleanConstructor;
        maxCount: {
            type: NumberConstructor;
            default: number;
        };
        offset: {
            type: import("vue").PropType<(string | number)[]>;
        };
        shape: {
            type: import("vue").PropType<"round" | "circle">;
            default: "round" | "circle";
            validator(val: "round" | "circle"): boolean;
        };
        showZero: BooleanConstructor;
        size: {
            type: import("vue").PropType<"small" | "medium">;
            default: "small" | "medium";
            validator(val: "small" | "medium"): boolean;
        };
    }>>, {
        color: string;
        size: "small" | "medium";
        dot: boolean;
        shape: "round" | "circle";
        count: string | number | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        maxCount: number;
        showZero: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        color: {
            type: StringConstructor;
            default: string;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        count: {
            type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: number;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        dot: BooleanConstructor;
        maxCount: {
            type: NumberConstructor;
            default: number;
        };
        offset: {
            type: import("vue").PropType<(string | number)[]>;
        };
        shape: {
            type: import("vue").PropType<"round" | "circle">;
            default: "round" | "circle";
            validator(val: "round" | "circle"): boolean;
        };
        showZero: BooleanConstructor;
        size: {
            type: import("vue").PropType<"small" | "medium">;
            default: "small" | "medium";
            validator(val: "small" | "medium"): boolean;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        color: string;
        size: "small" | "medium";
        dot: boolean;
        shape: "round" | "circle";
        count: string | number | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        maxCount: number;
        showZero: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    color: {
        type: StringConstructor;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    count: {
        type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: number;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    dot: BooleanConstructor;
    maxCount: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: import("vue").PropType<(string | number)[]>;
    };
    shape: {
        type: import("vue").PropType<"round" | "circle">;
        default: "round" | "circle";
        validator(val: "round" | "circle"): boolean;
    };
    showZero: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium">;
        default: "small" | "medium";
        validator(val: "small" | "medium"): boolean;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    color: string;
    size: "small" | "medium";
    dot: boolean;
    shape: "round" | "circle";
    count: string | number | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    maxCount: number;
    showZero: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Badge;
