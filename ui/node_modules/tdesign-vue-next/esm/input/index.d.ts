import { InputValue, TdInputProps } from './type';
import './style';
export * from './type';
export declare type InputProps<T = InputValue> = TdInputProps<T>;
export declare type InputBlurEventParams = Parameters<InputProps['onBlur']>;
export declare type InputFocusEventParams = Parameters<InputProps['onFocus']>;
export declare type StrInputProps = TdInputProps<string>;
export declare type NumberInputProps = TdInputProps<number>;
export declare const Input: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        showInput: {
            type: BooleanConstructor;
            default: boolean;
        };
        keepWrapperWidth: {
            type: BooleanConstructor;
            default: boolean;
        };
        align: {
            type: import("vue").PropType<"center" | "left" | "right">;
            default: "center" | "left" | "right";
            validator(val: "center" | "left" | "right"): boolean;
        };
        allowInputOverMax: BooleanConstructor;
        autoWidth: BooleanConstructor;
        autocomplete: {
            type: StringConstructor;
            default: any;
        };
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        disabled: BooleanConstructor;
        format: {
            type: import("vue").PropType<import("./type").InputFormatType>;
        };
        inputClass: {
            type: import("vue").PropType<import("..").ClassName>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        maxcharacter: {
            type: NumberConstructor;
        };
        maxlength: {
            type: import("vue").PropType<string | number>;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        showClearIconOnEmpty: BooleanConstructor;
        showLimitNumber: BooleanConstructor;
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        type: {
            type: import("vue").PropType<"number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel">;
            default: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
            validator(val: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel"): boolean;
        };
        value: {
            type: import("vue").PropType<InputValue>;
            default: InputValue;
        };
        modelValue: {
            type: import("vue").PropType<InputValue>;
            default: InputValue;
        };
        defaultValue: {
            type: import("vue").PropType<InputValue>;
        };
        onBlur: import("vue").PropType<(value: InputValue, context: {
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: InputValue, context?: {
            e?: MouseEvent | CompositionEvent | InputEvent;
            trigger: "input" | "clear" | "initial";
        }) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onCompositionend: import("vue").PropType<(value: string, context: {
            e: CompositionEvent;
        }) => void>;
        onCompositionstart: import("vue").PropType<(value: string, context: {
            e: CompositionEvent;
        }) => void>;
        onEnter: import("vue").PropType<(value: InputValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onFocus: import("vue").PropType<(value: InputValue, context: {
            e: FocusEvent;
        }) => void>;
        onKeydown: import("vue").PropType<(value: InputValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onKeypress: import("vue").PropType<(value: InputValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onKeyup: import("vue").PropType<(value: InputValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onMouseenter: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onMouseleave: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPaste: import("vue").PropType<(context: {
            e: ClipboardEvent;
            pasteValue: string;
        }) => void>;
        onValidate: import("vue").PropType<(context: {
            error?: "exceed-maximum" | "below-minimum";
        }) => void>;
        onWheel: import("vue").PropType<(context: {
            e: WheelEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        showInput: {
            type: BooleanConstructor;
            default: boolean;
        };
        keepWrapperWidth: {
            type: BooleanConstructor;
            default: boolean;
        };
        align: {
            type: import("vue").PropType<"center" | "left" | "right">;
            default: "center" | "left" | "right";
            validator(val: "center" | "left" | "right"): boolean;
        };
        allowInputOverMax: BooleanConstructor;
        autoWidth: BooleanConstructor;
        autocomplete: {
            type: StringConstructor;
            default: any;
        };
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        disabled: BooleanConstructor;
        format: {
            type: import("vue").PropType<import("./type").InputFormatType>;
        };
        inputClass: {
            type: import("vue").PropType<import("..").ClassName>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        maxcharacter: {
            type: NumberConstructor;
        };
        maxlength: {
            type: import("vue").PropType<string | number>;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        showClearIconOnEmpty: BooleanConstructor;
        showLimitNumber: BooleanConstructor;
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        type: {
            type: import("vue").PropType<"number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel">;
            default: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
            validator(val: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel"): boolean;
        };
        value: {
            type: import("vue").PropType<InputValue>;
            default: InputValue;
        };
        modelValue: {
            type: import("vue").PropType<InputValue>;
            default: InputValue;
        };
        defaultValue: {
            type: import("vue").PropType<InputValue>;
        };
        onBlur: import("vue").PropType<(value: InputValue, context: {
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: InputValue, context?: {
            e?: MouseEvent | CompositionEvent | InputEvent;
            trigger: "input" | "clear" | "initial";
        }) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onCompositionend: import("vue").PropType<(value: string, context: {
            e: CompositionEvent;
        }) => void>;
        onCompositionstart: import("vue").PropType<(value: string, context: {
            e: CompositionEvent;
        }) => void>;
        onEnter: import("vue").PropType<(value: InputValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onFocus: import("vue").PropType<(value: InputValue, context: {
            e: FocusEvent;
        }) => void>;
        onKeydown: import("vue").PropType<(value: InputValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onKeypress: import("vue").PropType<(value: InputValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onKeyup: import("vue").PropType<(value: InputValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onMouseenter: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onMouseleave: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPaste: import("vue").PropType<(context: {
            e: ClipboardEvent;
            pasteValue: string;
        }) => void>;
        onValidate: import("vue").PropType<(context: {
            error?: "exceed-maximum" | "below-minimum";
        }) => void>;
        onWheel: import("vue").PropType<(context: {
            e: WheelEvent;
        }) => void>;
    }>>, {
        type: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
        name: string;
        value: InputValue;
        autocomplete: string;
        autofocus: boolean;
        disabled: boolean;
        size: import("..").SizeEnum;
        readonly: boolean;
        status: "error" | "default" | "success" | "warning";
        placeholder: string;
        align: "center" | "left" | "right";
        modelValue: InputValue;
        allowInputOverMax: boolean;
        showInput: boolean;
        keepWrapperWidth: boolean;
        autoWidth: boolean;
        borderless: boolean;
        clearable: boolean;
        showClearIconOnEmpty: boolean;
        showLimitNumber: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        showInput: {
            type: BooleanConstructor;
            default: boolean;
        };
        keepWrapperWidth: {
            type: BooleanConstructor;
            default: boolean;
        };
        align: {
            type: import("vue").PropType<"center" | "left" | "right">;
            default: "center" | "left" | "right";
            validator(val: "center" | "left" | "right"): boolean;
        };
        allowInputOverMax: BooleanConstructor;
        autoWidth: BooleanConstructor;
        autocomplete: {
            type: StringConstructor;
            default: any;
        };
        autofocus: BooleanConstructor;
        borderless: BooleanConstructor;
        clearable: BooleanConstructor;
        disabled: BooleanConstructor;
        format: {
            type: import("vue").PropType<import("./type").InputFormatType>;
        };
        inputClass: {
            type: import("vue").PropType<import("..").ClassName>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        maxcharacter: {
            type: NumberConstructor;
        };
        maxlength: {
            type: import("vue").PropType<string | number>;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: any;
        };
        prefixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        readonly: BooleanConstructor;
        showClearIconOnEmpty: BooleanConstructor;
        showLimitNumber: BooleanConstructor;
        size: {
            type: import("vue").PropType<import("..").SizeEnum>;
            default: import("..").SizeEnum;
            validator(val: import("..").SizeEnum): boolean;
        };
        status: {
            type: import("vue").PropType<"error" | "default" | "success" | "warning">;
            default: "error" | "default" | "success" | "warning";
            validator(val: "error" | "default" | "success" | "warning"): boolean;
        };
        suffix: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        suffixIcon: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        type: {
            type: import("vue").PropType<"number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel">;
            default: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
            validator(val: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel"): boolean;
        };
        value: {
            type: import("vue").PropType<InputValue>;
            default: InputValue;
        };
        modelValue: {
            type: import("vue").PropType<InputValue>;
            default: InputValue;
        };
        defaultValue: {
            type: import("vue").PropType<InputValue>;
        };
        onBlur: import("vue").PropType<(value: InputValue, context: {
            e: FocusEvent;
        }) => void>;
        onChange: import("vue").PropType<(value: InputValue, context?: {
            e?: MouseEvent | CompositionEvent | InputEvent;
            trigger: "input" | "clear" | "initial";
        }) => void>;
        onClear: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onCompositionend: import("vue").PropType<(value: string, context: {
            e: CompositionEvent;
        }) => void>;
        onCompositionstart: import("vue").PropType<(value: string, context: {
            e: CompositionEvent;
        }) => void>;
        onEnter: import("vue").PropType<(value: InputValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onFocus: import("vue").PropType<(value: InputValue, context: {
            e: FocusEvent;
        }) => void>;
        onKeydown: import("vue").PropType<(value: InputValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onKeypress: import("vue").PropType<(value: InputValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onKeyup: import("vue").PropType<(value: InputValue, context: {
            e: KeyboardEvent;
        }) => void>;
        onMouseenter: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onMouseleave: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
        onPaste: import("vue").PropType<(context: {
            e: ClipboardEvent;
            pasteValue: string;
        }) => void>;
        onValidate: import("vue").PropType<(context: {
            error?: "exceed-maximum" | "below-minimum";
        }) => void>;
        onWheel: import("vue").PropType<(context: {
            e: WheelEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        type: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
        name: string;
        value: InputValue;
        autocomplete: string;
        autofocus: boolean;
        disabled: boolean;
        size: import("..").SizeEnum;
        readonly: boolean;
        status: "error" | "default" | "success" | "warning";
        placeholder: string;
        align: "center" | "left" | "right";
        modelValue: InputValue;
        allowInputOverMax: boolean;
        showInput: boolean;
        keepWrapperWidth: boolean;
        autoWidth: boolean;
        borderless: boolean;
        clearable: boolean;
        showClearIconOnEmpty: boolean;
        showLimitNumber: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    showInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    keepWrapperWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    align: {
        type: import("vue").PropType<"center" | "left" | "right">;
        default: "center" | "left" | "right";
        validator(val: "center" | "left" | "right"): boolean;
    };
    allowInputOverMax: BooleanConstructor;
    autoWidth: BooleanConstructor;
    autocomplete: {
        type: StringConstructor;
        default: any;
    };
    autofocus: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    disabled: BooleanConstructor;
    format: {
        type: import("vue").PropType<import("./type").InputFormatType>;
    };
    inputClass: {
        type: import("vue").PropType<import("..").ClassName>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: import("vue").PropType<string | number>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    showClearIconOnEmpty: BooleanConstructor;
    showLimitNumber: BooleanConstructor;
    size: {
        type: import("vue").PropType<import("..").SizeEnum>;
        default: import("..").SizeEnum;
        validator(val: import("..").SizeEnum): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    type: {
        type: import("vue").PropType<"number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel">;
        default: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
        validator(val: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel"): boolean;
    };
    value: {
        type: import("vue").PropType<InputValue>;
        default: InputValue;
    };
    modelValue: {
        type: import("vue").PropType<InputValue>;
        default: InputValue;
    };
    defaultValue: {
        type: import("vue").PropType<InputValue>;
    };
    onBlur: import("vue").PropType<(value: InputValue, context: {
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: InputValue, context?: {
        e?: MouseEvent | CompositionEvent | InputEvent;
        trigger: "input" | "clear" | "initial";
    }) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onCompositionend: import("vue").PropType<(value: string, context: {
        e: CompositionEvent;
    }) => void>;
    onCompositionstart: import("vue").PropType<(value: string, context: {
        e: CompositionEvent;
    }) => void>;
    onEnter: import("vue").PropType<(value: InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onFocus: import("vue").PropType<(value: InputValue, context: {
        e: FocusEvent;
    }) => void>;
    onKeydown: import("vue").PropType<(value: InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeypress: import("vue").PropType<(value: InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onKeyup: import("vue").PropType<(value: InputValue, context: {
        e: KeyboardEvent;
    }) => void>;
    onMouseenter: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPaste: import("vue").PropType<(context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void>;
    onValidate: import("vue").PropType<(context: {
        error?: "exceed-maximum" | "below-minimum";
    }) => void>;
    onWheel: import("vue").PropType<(context: {
        e: WheelEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    type: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
    name: string;
    value: InputValue;
    autocomplete: string;
    autofocus: boolean;
    disabled: boolean;
    size: import("..").SizeEnum;
    readonly: boolean;
    status: "error" | "default" | "success" | "warning";
    placeholder: string;
    align: "center" | "left" | "right";
    modelValue: InputValue;
    allowInputOverMax: boolean;
    showInput: boolean;
    keepWrapperWidth: boolean;
    autoWidth: boolean;
    borderless: boolean;
    clearable: boolean;
    showClearIconOnEmpty: boolean;
    showLimitNumber: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const InputGroup: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        separate: BooleanConstructor;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        separate: BooleanConstructor;
    }>>, {
        separate: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        separate: BooleanConstructor;
    }>>, () => JSX.Element, {}, {}, {}, {
        separate: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    separate: BooleanConstructor;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    separate: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Input;
