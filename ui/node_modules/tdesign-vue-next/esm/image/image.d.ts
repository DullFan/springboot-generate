declare const _default: import("vue").DefineComponent<{
    alt: {
        type: StringConstructor;
        default: string;
    };
    error: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    fallback: {
        type: StringConstructor;
        default: string;
    };
    fit: {
        type: import("vue").PropType<"fill" | "none" | "contain" | "cover" | "scale-down">;
        default: "fill" | "none" | "contain" | "cover" | "scale-down";
        validator(val: "fill" | "none" | "contain" | "cover" | "scale-down"): boolean;
    };
    gallery: BooleanConstructor;
    lazy: BooleanConstructor;
    loading: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    overlayContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    overlayTrigger: {
        type: import("vue").PropType<"always" | "hover">;
        default: "always" | "hover";
        validator(val: "always" | "hover"): boolean;
    };
    placeholder: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    position: {
        type: StringConstructor;
        default: string;
    };
    referrerpolicy: {
        type: import("vue").PropType<"origin" | "same-origin" | "no-referrer" | "no-referrer-when-downgrade" | "origin-when-cross-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url">;
        default: "origin" | "same-origin" | "no-referrer" | "no-referrer-when-downgrade" | "origin-when-cross-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url";
        validator(val: "origin" | "same-origin" | "no-referrer" | "no-referrer-when-downgrade" | "origin-when-cross-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url"): boolean;
    };
    shape: {
        type: import("vue").PropType<"square" | "round" | "circle">;
        default: "square" | "round" | "circle";
        validator(val: "square" | "round" | "circle"): boolean;
    };
    src: {
        type: import("vue").PropType<string | File>;
    };
    srcset: {
        type: import("vue").PropType<import("./type").ImageSrcset>;
    };
    onError: import("vue").PropType<(context: {
        e: Event;
    }) => void>;
    onLoad: import("vue").PropType<(context: {
        e: Event;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    alt: {
        type: StringConstructor;
        default: string;
    };
    error: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    fallback: {
        type: StringConstructor;
        default: string;
    };
    fit: {
        type: import("vue").PropType<"fill" | "none" | "contain" | "cover" | "scale-down">;
        default: "fill" | "none" | "contain" | "cover" | "scale-down";
        validator(val: "fill" | "none" | "contain" | "cover" | "scale-down"): boolean;
    };
    gallery: BooleanConstructor;
    lazy: BooleanConstructor;
    loading: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    overlayContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    overlayTrigger: {
        type: import("vue").PropType<"always" | "hover">;
        default: "always" | "hover";
        validator(val: "always" | "hover"): boolean;
    };
    placeholder: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    position: {
        type: StringConstructor;
        default: string;
    };
    referrerpolicy: {
        type: import("vue").PropType<"origin" | "same-origin" | "no-referrer" | "no-referrer-when-downgrade" | "origin-when-cross-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url">;
        default: "origin" | "same-origin" | "no-referrer" | "no-referrer-when-downgrade" | "origin-when-cross-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url";
        validator(val: "origin" | "same-origin" | "no-referrer" | "no-referrer-when-downgrade" | "origin-when-cross-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url"): boolean;
    };
    shape: {
        type: import("vue").PropType<"square" | "round" | "circle">;
        default: "square" | "round" | "circle";
        validator(val: "square" | "round" | "circle"): boolean;
    };
    src: {
        type: import("vue").PropType<string | File>;
    };
    srcset: {
        type: import("vue").PropType<import("./type").ImageSrcset>;
    };
    onError: import("vue").PropType<(context: {
        e: Event;
    }) => void>;
    onLoad: import("vue").PropType<(context: {
        e: Event;
    }) => void>;
}>>, {
    position: string;
    lazy: boolean;
    fallback: string;
    referrerpolicy: "origin" | "same-origin" | "no-referrer" | "no-referrer-when-downgrade" | "origin-when-cross-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url";
    alt: string;
    shape: "square" | "round" | "circle";
    fit: "fill" | "none" | "contain" | "cover" | "scale-down";
    overlayTrigger: "always" | "hover";
    gallery: boolean;
}, {}>;
export default _default;
