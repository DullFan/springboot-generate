import { ComponentPublicInstance, VNode } from 'vue';
export interface JSXRenderContext {
    defaultNode?: VNode | string;
    params?: Record<string, any>;
    slotFirst?: boolean;
    silent?: boolean;
}
export declare type OptionsType = VNode | JSXRenderContext | string;
export declare function getDefaultNode(options?: OptionsType): string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>;
export declare function getParams(options?: OptionsType): Record<string, any>;
export declare function getSlotFirst(options?: OptionsType): {};
export declare function handleSlots(instance: ComponentPublicInstance, params: Record<string, any>, name: string): VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>[];
export declare const renderTNodeJSX: (instance: ComponentPublicInstance, name: string, options?: OptionsType) => any;
export declare const renderTNodeJSXDefault: (vm: ComponentPublicInstance, name: string, options?: OptionsType) => any;
export declare const renderContent: (vm: ComponentPublicInstance, name1: string, name2: string, options?: OptionsType) => any;
