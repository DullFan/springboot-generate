import { TdBackTopProps } from './type';
import './style';
export * from './type';
export declare type BackTopProps = TdBackTopProps;
export declare const BackTop: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        container: {
            type: import("vue").PropType<import("..").AttachNode>;
            default: import("..").AttachNode;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        duration: {
            type: NumberConstructor;
            default: number;
        };
        offset: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        shape: {
            type: import("vue").PropType<import("./type").BackTopShapeEnum>;
            default: import("./type").BackTopShapeEnum;
            validator(val: import("./type").BackTopShapeEnum): boolean;
        };
        size: {
            type: import("vue").PropType<"small" | "medium">;
            default: "small" | "medium";
            validator(val: "small" | "medium"): boolean;
        };
        target: {
            type: import("vue").PropType<import("..").AttachNode>;
            default: import("..").AttachNode;
        };
        theme: {
            type: import("vue").PropType<"dark" | "light" | "primary">;
            default: "dark" | "light" | "primary";
            validator(val: "dark" | "light" | "primary"): boolean;
        };
        visibleHeight: {
            type: import("vue").PropType<string | number>;
            default: string | number;
        };
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        container: {
            type: import("vue").PropType<import("..").AttachNode>;
            default: import("..").AttachNode;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        duration: {
            type: NumberConstructor;
            default: number;
        };
        offset: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        shape: {
            type: import("vue").PropType<import("./type").BackTopShapeEnum>;
            default: import("./type").BackTopShapeEnum;
            validator(val: import("./type").BackTopShapeEnum): boolean;
        };
        size: {
            type: import("vue").PropType<"small" | "medium">;
            default: "small" | "medium";
            validator(val: "small" | "medium"): boolean;
        };
        target: {
            type: import("vue").PropType<import("..").AttachNode>;
            default: import("..").AttachNode;
        };
        theme: {
            type: import("vue").PropType<"dark" | "light" | "primary">;
            default: "dark" | "light" | "primary";
            validator(val: "dark" | "light" | "primary"): boolean;
        };
        visibleHeight: {
            type: import("vue").PropType<string | number>;
            default: string | number;
        };
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
    }>>, {
        offset: (string | number)[];
        target: import("..").AttachNode;
        size: "small" | "medium";
        container: import("..").AttachNode;
        duration: number;
        shape: import("./type").BackTopShapeEnum;
        theme: "dark" | "light" | "primary";
        visibleHeight: string | number;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        container: {
            type: import("vue").PropType<import("..").AttachNode>;
            default: import("..").AttachNode;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        default: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        duration: {
            type: NumberConstructor;
            default: number;
        };
        offset: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => (string | number)[];
        };
        shape: {
            type: import("vue").PropType<import("./type").BackTopShapeEnum>;
            default: import("./type").BackTopShapeEnum;
            validator(val: import("./type").BackTopShapeEnum): boolean;
        };
        size: {
            type: import("vue").PropType<"small" | "medium">;
            default: "small" | "medium";
            validator(val: "small" | "medium"): boolean;
        };
        target: {
            type: import("vue").PropType<import("..").AttachNode>;
            default: import("..").AttachNode;
        };
        theme: {
            type: import("vue").PropType<"dark" | "light" | "primary">;
            default: "dark" | "light" | "primary";
            validator(val: "dark" | "light" | "primary"): boolean;
        };
        visibleHeight: {
            type: import("vue").PropType<string | number>;
            default: string | number;
        };
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        offset: (string | number)[];
        target: import("..").AttachNode;
        size: "small" | "medium";
        container: import("..").AttachNode;
        duration: number;
        shape: import("./type").BackTopShapeEnum;
        theme: "dark" | "light" | "primary";
        visibleHeight: string | number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    container: {
        type: import("vue").PropType<import("..").AttachNode>;
        default: import("..").AttachNode;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: import("vue").PropType<(string | number)[]>;
        default: () => (string | number)[];
    };
    shape: {
        type: import("vue").PropType<import("./type").BackTopShapeEnum>;
        default: import("./type").BackTopShapeEnum;
        validator(val: import("./type").BackTopShapeEnum): boolean;
    };
    size: {
        type: import("vue").PropType<"small" | "medium">;
        default: "small" | "medium";
        validator(val: "small" | "medium"): boolean;
    };
    target: {
        type: import("vue").PropType<import("..").AttachNode>;
        default: import("..").AttachNode;
    };
    theme: {
        type: import("vue").PropType<"dark" | "light" | "primary">;
        default: "dark" | "light" | "primary";
        validator(val: "dark" | "light" | "primary"): boolean;
    };
    visibleHeight: {
        type: import("vue").PropType<string | number>;
        default: string | number;
    };
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    offset: (string | number)[];
    target: import("..").AttachNode;
    size: "small" | "medium";
    container: import("..").AttachNode;
    duration: number;
    shape: import("./type").BackTopShapeEnum;
    theme: "dark" | "light" | "primary";
    visibleHeight: string | number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default BackTop;
