{"version":3,"file":"form-item.js","sources":["../../src/form/form-item.tsx"],"sourcesContent":["import {\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  toRefs,\n  VNode,\n  watch,\n} from 'vue';\nimport {\n  CheckCircleFilledIcon as TdCheckCircleFilledIcon,\n  CloseCircleFilledIcon as TdCloseCircleFilledIcon,\n  ErrorCircleFilledIcon as TdErrorCircleFilledIcon,\n  GlobalIconType,\n} from 'tdesign-icons-vue-next';\nimport isArray from 'lodash/isArray';\nimport isNumber from 'lodash/isNumber';\nimport isString from 'lodash/isString';\nimport isBoolean from 'lodash/isBoolean';\nimport cloneDeep from 'lodash/cloneDeep';\nimport lodashGet from 'lodash/get';\nimport lodashSet from 'lodash/set';\nimport isNil from 'lodash/isNil';\n\nimport { validate } from './form-model';\nimport {\n  AllValidateResult,\n  Data,\n  FormErrorMessage,\n  FormItemValidateMessage,\n  FormRule,\n  ValidateTriggerType,\n  ValueType,\n} from './type';\nimport props from './form-item-props';\nimport {\n  AnalysisValidateResult,\n  ErrorListType,\n  FormInjectionKey,\n  FormItemContext,\n  FormItemInjectionKey,\n  SuccessListType,\n  useCLASSNAMES,\n  ValidateStatus,\n} from './const';\n\nimport { useConfig, usePrefixClass, useTNodeJSX } from '../hooks';\nimport { useGlobalIcon } from '../hooks/useGlobalIcon';\nimport template from '../utils/string-template';\n\nexport type FormItemValidateResult<T extends Data = Data> = { [key in keyof T]: boolean | AllValidateResult[] };\n\nexport function getFormItemClassName(componentName: string, name?: string) {\n  if (!name) return '';\n  return `${componentName}__${name}`.replace(/(\\[|\\]\\.)/g, '_');\n}\n\nexport default defineComponent({\n  name: 'TFormItem',\n\n  props: { ...props },\n  setup(props, { slots }) {\n    const renderContent = useTNodeJSX();\n    const CLASS_NAMES = useCLASSNAMES();\n    const { globalConfig } = useConfig('form');\n    const { CheckCircleFilledIcon, CloseCircleFilledIcon, ErrorCircleFilledIcon } = useGlobalIcon({\n      CheckCircleFilledIcon: TdCheckCircleFilledIcon,\n      CloseCircleFilledIcon: TdCloseCircleFilledIcon,\n      ErrorCircleFilledIcon: TdErrorCircleFilledIcon,\n    });\n    const form = inject(FormInjectionKey, undefined);\n\n    const classPrefix = usePrefixClass();\n    const formItemClassPrefix = usePrefixClass('form-item');\n\n    const needRequiredMark = computed(() => {\n      const requiredMark = props.requiredMark ?? form?.requiredMark ?? globalConfig.value.requiredMark;\n      const isRequired = innerRules.value.filter((rule) => rule.required).length > 0;\n      return requiredMark ?? isRequired;\n    });\n\n    const hasLabel = computed(() => slots.label || props.label);\n    const hasColon = computed(() => !!(form?.colon && hasLabel.value));\n    const FROM_LABEL = usePrefixClass('form__label');\n    const labelAlign = computed(() => (isNil(props.labelAlign) ? form?.labelAlign : props.labelAlign));\n    const labelWidth = computed(() => (isNil(props.labelWidth) ? form?.labelWidth : props.labelWidth));\n\n    const labelClasses = computed(() => [\n      CLASS_NAMES.value.label,\n      {\n        [`${FROM_LABEL.value}--required`]: needRequiredMark.value,\n        [`${FROM_LABEL.value}--colon`]: hasColon.value,\n        [`${FROM_LABEL.value}--top`]: hasLabel.value && (labelAlign.value === 'top' || !labelWidth.value),\n        [`${FROM_LABEL.value}--left`]: labelAlign.value === 'left' && labelWidth.value,\n        [`${FROM_LABEL.value}--right`]: labelAlign.value === 'right' && labelWidth.value,\n      },\n    ]);\n\n    const renderLabel = () => {\n      if (Number(labelWidth.value) === 0) return;\n\n      let labelStyle = {};\n      if (labelWidth.value && labelAlign.value !== 'top') {\n        if (isNumber(labelWidth.value)) {\n          labelStyle = { width: `${labelWidth.value}px` };\n        } else {\n          labelStyle = { width: labelWidth.value };\n        }\n      }\n\n      return (\n        <div class={labelClasses.value} style={labelStyle}>\n          <label for={props.for || null}>{renderContent('label')}</label>\n        </div>\n      );\n    };\n\n    /** Suffix Icon */\n    const getDefaultIcon = (): VNode => {\n      const resultIcon = (Icon: GlobalIconType) => (\n        <span class={CLASS_NAMES.value.status}>\n          <Icon />\n        </span>\n      );\n      const list = errorList.value;\n      if (verifyStatus.value === ValidateStatus.SUCCESS) {\n        return resultIcon(CheckCircleFilledIcon);\n      }\n      if (list?.[0]) {\n        const type = list[0].type || 'error';\n        const icon =\n          {\n            error: CloseCircleFilledIcon,\n            warning: ErrorCircleFilledIcon,\n          }[type] || CheckCircleFilledIcon;\n        return resultIcon(icon);\n      }\n      return null;\n    };\n    const renderSuffixIcon = () => {\n      const { statusIcon } = props;\n      if (statusIcon === false) return;\n\n      let resultIcon = renderContent('statusIcon', { defaultNode: getDefaultIcon() });\n      if (resultIcon) return <span class={CLASS_NAMES.value.status}>{resultIcon}</span>;\n      if (resultIcon === false) return;\n\n      resultIcon = form?.renderContent('statusIcon', { defaultNode: getDefaultIcon(), params: props });\n      if (resultIcon) return resultIcon;\n    };\n    /** Suffix Icon END */\n\n    /** Content Style */\n    const errorClasses = computed(() => {\n      if (!showErrorMessage.value) return '';\n      if (verifyStatus.value === ValidateStatus.SUCCESS) {\n        return props.successBorder\n          ? [CLASS_NAMES.value.success, CLASS_NAMES.value.successBorder].join(' ')\n          : CLASS_NAMES.value.success;\n      }\n      if (!errorList.value.length) return;\n      const type = errorList.value[0].type || 'error';\n      return type === 'error' ? CLASS_NAMES.value.error : CLASS_NAMES.value.warning;\n    });\n    const contentClasses = computed(() => [CLASS_NAMES.value.controls, errorClasses.value]);\n    const contentStyle = computed(() => {\n      let contentStyle = {};\n      if (labelWidth.value && labelAlign.value !== 'top') {\n        if (isNumber(labelWidth.value)) {\n          contentStyle = { marginLeft: `${labelWidth.value}px` };\n        } else {\n          contentStyle = { marginLeft: labelWidth.value };\n        }\n      }\n\n      return contentStyle;\n    });\n    /** Content Style END */\n\n    const errorList = ref<ErrorListType[]>([]);\n    const successList = ref<SuccessListType[]>([]);\n    const verifyStatus = ref(ValidateStatus.TO_BE_VALIDATED);\n    const resetValidating = ref(false);\n    const needResetField = ref(false);\n\n    const resetHandler = () => {\n      needResetField.value = false;\n      errorList.value = [];\n      successList.value = [];\n      verifyStatus.value = ValidateStatus.TO_BE_VALIDATED;\n    };\n    const getEmptyValue = (): ValueType => {\n      const type = Object.prototype.toString.call(lodashGet(form?.data, props.name));\n      let emptyValue: ValueType;\n      if (type === '[object String]') {\n        emptyValue = '';\n      }\n      if (type === '[object Array]') {\n        emptyValue = [];\n      }\n      if (type === '[object Object]') {\n        emptyValue = {};\n      }\n      return emptyValue;\n    };\n    const resetField = async (resetType: 'initial' | 'empty' | undefined = form?.resetType) => {\n      if (!props.name) return;\n\n      if (resetType === 'empty') lodashSet(form?.data, props.name, getEmptyValue());\n      else if (resetType === 'initial') lodashSet(form?.data, props.name, initialValue.value);\n\n      await nextTick();\n      if (resetValidating.value) {\n        needResetField.value = true;\n      } else {\n        resetHandler();\n      }\n    };\n\n    const errorMessages = computed<FormErrorMessage>(() => form?.errorMessage ?? globalConfig.value.errorMessage);\n    const innerRules = computed<FormRule[]>(() => {\n      if (props.rules?.length) return props.rules;\n      if (!props.name) return [];\n      const index = `${props.name}`.lastIndexOf('.') || -1;\n      const pRuleName = `${props.name}`.slice(index + 1);\n      return lodashGet(form?.rules, props.name) || lodashGet(form?.rules, pRuleName) || [];\n    });\n\n    const analysisValidateResult = async (trigger: ValidateTriggerType): Promise<AnalysisValidateResult> => {\n      const result: AnalysisValidateResult = {\n        successList: [],\n        errorList: [],\n        rules: [],\n        resultList: [],\n        allowSetValue: false,\n      };\n      result.rules =\n        trigger === 'all'\n          ? innerRules.value\n          : innerRules.value.filter((item) => (item.trigger || 'change') === trigger);\n      if (innerRules.value.length && !result.rules?.length) {\n        return result;\n      }\n      result.allowSetValue = true;\n      result.resultList = await validate(value.value, result.rules);\n      result.errorList = result.resultList\n        .filter((item) => item.result !== true)\n        .map((item: ErrorListType) => {\n          Object.keys(item).forEach((key) => {\n            if (!item.message && errorMessages.value[key]) {\n              const name = isString(props.label) ? props.label : props.name;\n              item.message = template(errorMessages.value[key], {\n                name,\n                validate: item[key],\n              });\n            }\n          });\n          return item;\n        });\n      // 仅有自定义校验方法才会存在 successList\n      result.successList = result.resultList.filter(\n        (item) => item.result === true && item.message && item.type === 'success',\n      ) as SuccessListType[];\n\n      return result;\n    };\n    const validateHandler = async <T extends Data = Data>(\n      trigger: ValidateTriggerType,\n      showErrorMessage?: boolean,\n    ): Promise<FormItemValidateResult<T>> => {\n      resetValidating.value = true;\n      // undefined | boolean\n      freeShowErrorMessage.value = showErrorMessage;\n      const {\n        successList: innerSuccessList,\n        errorList: innerErrorList,\n        rules,\n        resultList,\n        allowSetValue,\n      } = await analysisValidateResult(trigger);\n\n      if (allowSetValue) {\n        successList.value = innerSuccessList;\n        errorList.value = innerErrorList;\n      }\n      // 根据校验结果设置校验状态\n      if (rules.length) {\n        verifyStatus.value = innerErrorList.length ? ValidateStatus.FAIL : ValidateStatus.SUCCESS;\n      }\n      // 重置处理\n      if (needResetField.value) {\n        resetHandler();\n      }\n      resetValidating.value = false;\n\n      return {\n        [props.name]: innerErrorList.length === 0 ? true : resultList,\n      } as FormItemValidateResult<T>;\n    };\n    const validateOnly = async <T extends Data>(trigger: ValidateTriggerType): Promise<FormItemValidateResult<T>> => {\n      const { errorList: innerErrorList, resultList } = await analysisValidateResult(trigger);\n\n      return {\n        [props.name]: innerErrorList.length === 0 ? true : resultList,\n      } as FormItemValidateResult<T>;\n    };\n\n    const setValidateMessage = (validateMessage: FormItemValidateMessage[]) => {\n      if (!validateMessage && !isArray(validateMessage)) return;\n      if (validateMessage.length === 0) {\n        errorList.value = [];\n        verifyStatus.value = ValidateStatus.SUCCESS;\n      }\n      errorList.value = validateMessage.map((item) => ({ ...item, result: false }));\n      verifyStatus.value = ValidateStatus.FAIL;\n    };\n\n    const value = computed<ValueType>(() => form?.data && lodashGet(form?.data, props.name));\n    const initialValue = ref<ValueType>(undefined);\n    const { name } = toRefs(props);\n    const context: FormItemContext = reactive({\n      name,\n      resetHandler,\n      resetField,\n      validate: validateHandler,\n      validateOnly,\n      setValidateMessage,\n    });\n\n    onMounted(() => {\n      initialValue.value = cloneDeep(value.value);\n      form?.children.push(context);\n    });\n\n    onBeforeUnmount(() => {\n      if (form) form.children = form?.children.filter((ctx) => ctx !== context);\n    });\n\n    watch(\n      value,\n      async () => {\n        await validateHandler('change');\n      },\n      { deep: true },\n    );\n\n    watch(\n      () => [props.name, JSON.stringify(props.rules)].join(','),\n      () => {\n        validateHandler('change');\n      },\n    );\n\n    const freeShowErrorMessage = ref<boolean>(undefined);\n    const showErrorMessage = computed(() => {\n      if (isBoolean(freeShowErrorMessage.value)) return freeShowErrorMessage.value;\n      if (isBoolean(props.showErrorMessage)) return props.showErrorMessage;\n      return form?.showErrorMessage;\n    });\n\n    const classes = computed(() => [\n      CLASS_NAMES.value.formItem,\n      getFormItemClassName(formItemClassPrefix.value, props.name),\n      {\n        [CLASS_NAMES.value.formItemWithHelp]: helpNode.value,\n        [CLASS_NAMES.value.formItemWithExtra]: extraNode.value,\n      },\n    ]);\n    const helpNode = computed<VNode>(() => {\n      const help = renderContent('help');\n      if (help) return <div class={CLASS_NAMES.value.help}>{help}</div>;\n      return null;\n    });\n    const extraNode = computed<VNode>(() => {\n      const getExtraNode = (content: string) => (\n        <div class={CLASS_NAMES.value.extra} title={content}>\n          {content}\n        </div>\n      );\n      const list = errorList.value;\n      if (showErrorMessage.value && list?.[0]?.message) {\n        return getExtraNode(list[0].message);\n      }\n      if (successList.value.length) {\n        return getExtraNode(successList.value[0].message);\n      }\n      return null;\n    });\n\n    const tipsNode = computed<VNode>(() => {\n      const tmpTips = renderContent('tips');\n      if (!tmpTips) return null;\n      const tmpClasses = [\n        `${formItemClassPrefix.value}-tips`,\n        `${classPrefix.value}-tips`,\n        `${classPrefix.value}-is-${props.status || 'default'}`,\n      ];\n      return <div class={tmpClasses}>{tmpTips}</div>;\n    });\n\n    const handleBlur = async () => {\n      await validateHandler('blur');\n    };\n    provide(FormItemInjectionKey, {\n      handleBlur,\n    });\n\n    return () => (\n      <div class={classes.value}>\n        {renderLabel()}\n        <div class={contentClasses.value} style={contentStyle.value}>\n          <div class={CLASS_NAMES.value.controlsContent}>\n            {renderContent('default')}\n            {renderSuffixIcon()}\n          </div>\n          {helpNode.value}\n          {tipsNode.value}\n          {extraNode.value}\n        </div>\n      </div>\n    );\n  },\n});\n"],"names":["getFormItemClassName","componentName","name","concat","replace","defineComponent","props","_objectSpread","setup","slots","_ref","renderContent","useTNodeJSX","CLASS_NAMES","useCLASSNAMES","_useConfig","useConfig","globalConfig","_useGlobalIcon","useGlobalIcon","CheckCircleFilledIcon","TdCheckCircleFilledIcon","CloseCircleFilledIcon","TdCloseCircleFilledIcon","ErrorCircleFilledIcon","TdErrorCircleFilledIcon","form","inject","FormInjectionKey","classPrefix","usePrefixClass","formItemClassPrefix","needRequiredMark","computed","_ref2","_props2$requiredMark","requiredMark","value","isRequired","innerRules","filter","rule","required","length","hasLabel","label","hasColon","colon","FROM_LABEL","labelAlign","isNil","labelWidth","labelClasses","_defineProperty","renderLabel","Number","labelStyle","isNumber","width","_createVNode","getDefaultIcon","resultIcon","Icon","status","list","errorList","verifyStatus","ValidateStatus","SUCCESS","type","icon","error","warning","renderSuffixIcon","statusIcon","defaultNode","params","errorClasses","showErrorMessage","successBorder","success","join","contentClasses","controls","contentStyle","marginLeft","ref","successList","TO_BE_VALIDATED","resetValidating","needResetField","resetHandler","getEmptyValue","Object","prototype","toString","call","lodashGet","data","emptyValue","resetField","_ref4","_asyncToGenerator","_regeneratorRuntime","mark","_callee","resetType","_args","arguments","wrap","_callee$","_context","prev","next","undefined","abrupt","lodashSet","initialValue","nextTick","stop","apply","errorMessages","_form$errorMessage","errorMessage","_props2$rules","rules","index","lastIndexOf","pRuleName","slice","analysisValidateResult","_ref5","_callee2","trigger","_result$rules","result","_callee2$","_context2","resultList","allowSetValue","item","validate","map","keys","forEach","key","message","isString","template","_x","validateHandler","_ref6","_callee3","_yield$analysisValida","innerSuccessList","innerErrorList","_callee3$","_context3","freeShowErrorMessage","sent","FAIL","_x2","_x3","validateOnly","_ref8","_callee4","_yield$analysisValida2","_callee4$","_context4","_x4","setValidateMessage","validateMessage","isArray","_toRefs","toRefs","context","reactive","onMounted","cloneDeep","children","push","onBeforeUnmount","ctx","watch","_callee5","_callee5$","_context5","deep","JSON","stringify","isBoolean","classes","formItem","formItemWithHelp","helpNode","formItemWithExtra","extraNode","help","_list$","getExtraNode","content","extra","tipsNode","tmpTips","tmpClasses","handleBlur","_callee6","_callee6$","_context6","provide","FormItemInjectionKey","controlsContent"],"mappings":"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"}