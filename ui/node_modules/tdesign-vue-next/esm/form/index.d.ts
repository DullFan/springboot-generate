import { TdFormProps, TdFormItemProps, Data } from './type';
import './style';
export * from './type';
export declare type FormProps<FormData extends Data = Data> = TdFormProps<FormData>;
export declare type FormItemProps = TdFormItemProps;
export declare const Form: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        colon: BooleanConstructor;
        data: {
            type: import("vue").PropType<Data>;
            default: () => {};
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        errorMessage: {
            type: import("vue").PropType<import("./type").FormErrorMessage>;
        };
        formControlledComponents: {
            type: import("vue").PropType<string[]>;
        };
        labelAlign: {
            type: import("vue").PropType<"left" | "top" | "right">;
            default: "left" | "top" | "right";
            validator(val: "left" | "top" | "right"): boolean;
        };
        labelWidth: {
            type: import("vue").PropType<string | number>;
            default: string | number;
        };
        layout: {
            type: import("vue").PropType<"inline" | "vertical">;
            default: "inline" | "vertical";
            validator(val: "inline" | "vertical"): boolean;
        };
        preventSubmitDefault: {
            type: BooleanConstructor;
            default: boolean;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: any;
        };
        resetType: {
            type: import("vue").PropType<"empty" | "initial">;
            default: "empty" | "initial";
            validator(val: "empty" | "initial"): boolean;
        };
        rules: {
            type: import("vue").PropType<import("./type").FormRules<Data>>;
        };
        scrollToFirstError: {
            type: import("vue").PropType<"" | "auto" | "smooth">;
            validator(val: "" | "auto" | "smooth"): boolean;
        };
        showErrorMessage: {
            type: BooleanConstructor;
            default: boolean;
        };
        statusIcon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: TdFormItemProps) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h, props: TdFormItemProps) => import("..").SlotReturnValue);
        };
        submitWithWarningMessage: BooleanConstructor;
        onReset: import("vue").PropType<(context: {
            e?: Event;
        }) => void>;
        onSubmit: import("vue").PropType<(context: import("./type").SubmitContext<Data>) => void>;
        onValidate: import("vue").PropType<(result: import("./type").ValidateResultContext<Data>) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        colon: BooleanConstructor;
        data: {
            type: import("vue").PropType<Data>;
            default: () => {};
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        errorMessage: {
            type: import("vue").PropType<import("./type").FormErrorMessage>;
        };
        formControlledComponents: {
            type: import("vue").PropType<string[]>;
        };
        labelAlign: {
            type: import("vue").PropType<"left" | "top" | "right">;
            default: "left" | "top" | "right";
            validator(val: "left" | "top" | "right"): boolean;
        };
        labelWidth: {
            type: import("vue").PropType<string | number>;
            default: string | number;
        };
        layout: {
            type: import("vue").PropType<"inline" | "vertical">;
            default: "inline" | "vertical";
            validator(val: "inline" | "vertical"): boolean;
        };
        preventSubmitDefault: {
            type: BooleanConstructor;
            default: boolean;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: any;
        };
        resetType: {
            type: import("vue").PropType<"empty" | "initial">;
            default: "empty" | "initial";
            validator(val: "empty" | "initial"): boolean;
        };
        rules: {
            type: import("vue").PropType<import("./type").FormRules<Data>>;
        };
        scrollToFirstError: {
            type: import("vue").PropType<"" | "auto" | "smooth">;
            validator(val: "" | "auto" | "smooth"): boolean;
        };
        showErrorMessage: {
            type: BooleanConstructor;
            default: boolean;
        };
        statusIcon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: TdFormItemProps) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h, props: TdFormItemProps) => import("..").SlotReturnValue);
        };
        submitWithWarningMessage: BooleanConstructor;
        onReset: import("vue").PropType<(context: {
            e?: Event;
        }) => void>;
        onSubmit: import("vue").PropType<(context: import("./type").SubmitContext<Data>) => void>;
        onValidate: import("vue").PropType<(result: import("./type").ValidateResultContext<Data>) => void>;
    }>>, {
        data: {};
        disabled: boolean;
        layout: "inline" | "vertical";
        showErrorMessage: boolean;
        labelAlign: "left" | "top" | "right";
        labelWidth: string | number;
        statusIcon: boolean | ((h: typeof import("vue").h, props: TdFormItemProps) => import("..").SlotReturnValue);
        requiredMark: boolean;
        colon: boolean;
        resetType: "empty" | "initial";
        preventSubmitDefault: boolean;
        submitWithWarningMessage: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        colon: BooleanConstructor;
        data: {
            type: import("vue").PropType<Data>;
            default: () => {};
        };
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        errorMessage: {
            type: import("vue").PropType<import("./type").FormErrorMessage>;
        };
        formControlledComponents: {
            type: import("vue").PropType<string[]>;
        };
        labelAlign: {
            type: import("vue").PropType<"left" | "top" | "right">;
            default: "left" | "top" | "right";
            validator(val: "left" | "top" | "right"): boolean;
        };
        labelWidth: {
            type: import("vue").PropType<string | number>;
            default: string | number;
        };
        layout: {
            type: import("vue").PropType<"inline" | "vertical">;
            default: "inline" | "vertical";
            validator(val: "inline" | "vertical"): boolean;
        };
        preventSubmitDefault: {
            type: BooleanConstructor;
            default: boolean;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: any;
        };
        resetType: {
            type: import("vue").PropType<"empty" | "initial">;
            default: "empty" | "initial";
            validator(val: "empty" | "initial"): boolean;
        };
        rules: {
            type: import("vue").PropType<import("./type").FormRules<Data>>;
        };
        scrollToFirstError: {
            type: import("vue").PropType<"" | "auto" | "smooth">;
            validator(val: "" | "auto" | "smooth"): boolean;
        };
        showErrorMessage: {
            type: BooleanConstructor;
            default: boolean;
        };
        statusIcon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: TdFormItemProps) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h, props: TdFormItemProps) => import("..").SlotReturnValue);
        };
        submitWithWarningMessage: BooleanConstructor;
        onReset: import("vue").PropType<(context: {
            e?: Event;
        }) => void>;
        onSubmit: import("vue").PropType<(context: import("./type").SubmitContext<Data>) => void>;
        onValidate: import("vue").PropType<(result: import("./type").ValidateResultContext<Data>) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        data: {};
        disabled: boolean;
        layout: "inline" | "vertical";
        showErrorMessage: boolean;
        labelAlign: "left" | "top" | "right";
        labelWidth: string | number;
        statusIcon: boolean | ((h: typeof import("vue").h, props: TdFormItemProps) => import("..").SlotReturnValue);
        requiredMark: boolean;
        colon: boolean;
        resetType: "empty" | "initial";
        preventSubmitDefault: boolean;
        submitWithWarningMessage: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    colon: BooleanConstructor;
    data: {
        type: import("vue").PropType<Data>;
        default: () => {};
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    errorMessage: {
        type: import("vue").PropType<import("./type").FormErrorMessage>;
    };
    formControlledComponents: {
        type: import("vue").PropType<string[]>;
    };
    labelAlign: {
        type: import("vue").PropType<"left" | "top" | "right">;
        default: "left" | "top" | "right";
        validator(val: "left" | "top" | "right"): boolean;
    };
    labelWidth: {
        type: import("vue").PropType<string | number>;
        default: string | number;
    };
    layout: {
        type: import("vue").PropType<"inline" | "vertical">;
        default: "inline" | "vertical";
        validator(val: "inline" | "vertical"): boolean;
    };
    preventSubmitDefault: {
        type: BooleanConstructor;
        default: boolean;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: any;
    };
    resetType: {
        type: import("vue").PropType<"empty" | "initial">;
        default: "empty" | "initial";
        validator(val: "empty" | "initial"): boolean;
    };
    rules: {
        type: import("vue").PropType<import("./type").FormRules<Data>>;
    };
    scrollToFirstError: {
        type: import("vue").PropType<"" | "auto" | "smooth">;
        validator(val: "" | "auto" | "smooth"): boolean;
    };
    showErrorMessage: {
        type: BooleanConstructor;
        default: boolean;
    };
    statusIcon: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h, props: TdFormItemProps) => import("..").SlotReturnValue)>;
        default: boolean | ((h: typeof import("vue").h, props: TdFormItemProps) => import("..").SlotReturnValue);
    };
    submitWithWarningMessage: BooleanConstructor;
    onReset: import("vue").PropType<(context: {
        e?: Event;
    }) => void>;
    onSubmit: import("vue").PropType<(context: import("./type").SubmitContext<Data>) => void>;
    onValidate: import("vue").PropType<(result: import("./type").ValidateResultContext<Data>) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    data: {};
    disabled: boolean;
    layout: "inline" | "vertical";
    showErrorMessage: boolean;
    labelAlign: "left" | "top" | "right";
    labelWidth: string | number;
    statusIcon: boolean | ((h: typeof import("vue").h, props: TdFormItemProps) => import("..").SlotReturnValue);
    requiredMark: boolean;
    colon: boolean;
    resetType: "empty" | "initial";
    preventSubmitDefault: boolean;
    submitWithWarningMessage: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const FormItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        for: {
            type: StringConstructor;
            default: string;
        };
        help: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        labelAlign: {
            type: import("vue").PropType<"left" | "top" | "right">;
            validator(val: "left" | "top" | "right"): boolean;
        };
        labelWidth: {
            type: import("vue").PropType<string | number>;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: any;
        };
        rules: {
            type: import("vue").PropType<import("./type").FormRule[]>;
        };
        showErrorMessage: {
            type: BooleanConstructor;
            default: any;
        };
        status: {
            type: import("vue").PropType<"error" | "success" | "warning" | "validating">;
            default: "error" | "success" | "warning" | "validating";
        };
        statusIcon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        successBorder: BooleanConstructor;
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        for: {
            type: StringConstructor;
            default: string;
        };
        help: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        labelAlign: {
            type: import("vue").PropType<"left" | "top" | "right">;
            validator(val: "left" | "top" | "right"): boolean;
        };
        labelWidth: {
            type: import("vue").PropType<string | number>;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: any;
        };
        rules: {
            type: import("vue").PropType<import("./type").FormRule[]>;
        };
        showErrorMessage: {
            type: BooleanConstructor;
            default: any;
        };
        status: {
            type: import("vue").PropType<"error" | "success" | "warning" | "validating">;
            default: "error" | "success" | "warning" | "validating";
        };
        statusIcon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        successBorder: BooleanConstructor;
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
    }>>, {
        name: string;
        label: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        status: "error" | "success" | "warning" | "validating";
        for: string;
        showErrorMessage: boolean;
        statusIcon: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        requiredMark: boolean;
        successBorder: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        for: {
            type: StringConstructor;
            default: string;
        };
        help: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        labelAlign: {
            type: import("vue").PropType<"left" | "top" | "right">;
            validator(val: "left" | "top" | "right"): boolean;
        };
        labelWidth: {
            type: import("vue").PropType<string | number>;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: any;
        };
        rules: {
            type: import("vue").PropType<import("./type").FormRule[]>;
        };
        showErrorMessage: {
            type: BooleanConstructor;
            default: any;
        };
        status: {
            type: import("vue").PropType<"error" | "success" | "warning" | "validating">;
            default: "error" | "success" | "warning" | "validating";
        };
        statusIcon: {
            type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
            default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        };
        successBorder: BooleanConstructor;
        tips: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        name: string;
        label: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        status: "error" | "success" | "warning" | "validating";
        for: string;
        showErrorMessage: boolean;
        statusIcon: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
        requiredMark: boolean;
        successBorder: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    for: {
        type: StringConstructor;
        default: string;
    };
    help: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    labelAlign: {
        type: import("vue").PropType<"left" | "top" | "right">;
        validator(val: "left" | "top" | "right"): boolean;
    };
    labelWidth: {
        type: import("vue").PropType<string | number>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: any;
    };
    rules: {
        type: import("vue").PropType<import("./type").FormRule[]>;
    };
    showErrorMessage: {
        type: BooleanConstructor;
        default: any;
    };
    status: {
        type: import("vue").PropType<"error" | "success" | "warning" | "validating">;
        default: "error" | "success" | "warning" | "validating";
    };
    statusIcon: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    successBorder: BooleanConstructor;
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    name: string;
    label: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    status: "error" | "success" | "warning" | "validating";
    for: string;
    showErrorMessage: boolean;
    statusIcon: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    requiredMark: boolean;
    successBorder: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Form;
