import { CSSProperties } from 'vue';
declare const _default: import("vue").DefineComponent<{
    attach: {
        type: import("vue").PropType<import("..").AttachNode>;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    delay: {
        type: NumberConstructor;
        default: number;
    };
    fullscreen: BooleanConstructor;
    indicator: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: boolean;
    };
    inheritColor: BooleanConstructor;
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    preventScrollThrough: {
        type: BooleanConstructor;
        default: boolean;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: StringConstructor;
        default: string;
    };
    text: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    zIndex: {
        type: NumberConstructor;
    };
}, {
    classPrefix: import("vue").ComputedRef<string>;
    relativeClass: import("vue").ComputedRef<string>;
    delayShowLoading: import("vue").Ref<boolean>;
    styles: import("vue").ComputedRef<CSSProperties>;
    showText: import("vue").ComputedRef<boolean>;
    hasContent: import("vue").ComputedRef<boolean>;
    classes: import("vue").ComputedRef<{
        baseClasses: any[];
        attachClasses: any[];
        withContentClasses: any[];
        fullScreenClasses: string[];
        normalClasses: any[];
    }>;
    lockFullscreen: import("vue").ComputedRef<boolean>;
    showWrapLoading: import("vue").ComputedRef<boolean>;
    showNormalLoading: import("vue").ComputedRef<boolean>;
    showFullScreenLoading: import("vue").ComputedRef<boolean>;
    showAttachedLoading: import("vue").ComputedRef<boolean>;
    teleportElement: import("vue").Ref<string | Element>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    attach: {
        type: import("vue").PropType<import("..").AttachNode>;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    delay: {
        type: NumberConstructor;
        default: number;
    };
    fullscreen: BooleanConstructor;
    indicator: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: boolean;
    };
    inheritColor: BooleanConstructor;
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    preventScrollThrough: {
        type: BooleanConstructor;
        default: boolean;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: StringConstructor;
        default: string;
    };
    text: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    zIndex: {
        type: NumberConstructor;
    };
}>>, {
    loading: boolean;
    size: string;
    attach: import("..").AttachNode;
    delay: number;
    indicator: boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    fullscreen: boolean;
    inheritColor: boolean;
    preventScrollThrough: boolean;
    showOverlay: boolean;
}, {}>;
export default _default;
