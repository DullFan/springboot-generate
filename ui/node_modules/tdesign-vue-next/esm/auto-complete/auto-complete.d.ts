import { InputProps } from '../input';
declare const _default: import("vue").DefineComponent<{
    autofocus: BooleanConstructor;
    clearable: BooleanConstructor;
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    filter: {
        type: import("vue").PropType<(filterWords: string, option: import("./type").AutoCompleteOption) => boolean | Promise<boolean>>;
    };
    filterable: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightKeyword: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputProps: {
        type: import("vue").PropType<InputProps<import("../input").InputValue>>;
    };
    options: {
        type: import("vue").PropType<import("./type").AutoCompleteOption[]>;
    };
    panelBottomContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    panelTopContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<import("../popup").TdPopupProps>;
    };
    readonly: BooleanConstructor;
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    textareaProps: {
        type: import("vue").PropType<import("..").TdTextareaProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    triggerElement: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    value: {
        type: StringConstructor;
        default: any;
    };
    modelValue: {
        type: StringConstructor;
        default: any;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onBlur: import("vue").PropType<(context: {
        e: FocusEvent;
        value: string;
    }) => void>;
    onChange: import("vue").PropType<(value: string, context?: {
        e?: MouseEvent | CompositionEvent | InputEvent | KeyboardEvent;
    }) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onCompositionend: import("vue").PropType<(context: {
        e: CompositionEvent;
        value: string;
    }) => void>;
    onCompositionstart: import("vue").PropType<(context: {
        e: CompositionEvent;
        value: string;
    }) => void>;
    onEnter: import("vue").PropType<(context: {
        e: KeyboardEvent;
        value: string;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        e: FocusEvent;
        value: string;
    }) => void>;
    onSelect: import("vue").PropType<(value: string, context: {
        e: MouseEvent | KeyboardEvent;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    autofocus: BooleanConstructor;
    clearable: BooleanConstructor;
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    filter: {
        type: import("vue").PropType<(filterWords: string, option: import("./type").AutoCompleteOption) => boolean | Promise<boolean>>;
    };
    filterable: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightKeyword: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputProps: {
        type: import("vue").PropType<InputProps<import("../input").InputValue>>;
    };
    options: {
        type: import("vue").PropType<import("./type").AutoCompleteOption[]>;
    };
    panelBottomContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    panelTopContent: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    popupProps: {
        type: import("vue").PropType<import("../popup").TdPopupProps>;
    };
    readonly: BooleanConstructor;
    size: {
        type: import("vue").PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: import("../common").SizeEnum): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    textareaProps: {
        type: import("vue").PropType<import("..").TdTextareaProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    triggerElement: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    value: {
        type: StringConstructor;
        default: any;
    };
    modelValue: {
        type: StringConstructor;
        default: any;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onBlur: import("vue").PropType<(context: {
        e: FocusEvent;
        value: string;
    }) => void>;
    onChange: import("vue").PropType<(value: string, context?: {
        e?: MouseEvent | CompositionEvent | InputEvent | KeyboardEvent;
    }) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onCompositionend: import("vue").PropType<(context: {
        e: CompositionEvent;
        value: string;
    }) => void>;
    onCompositionstart: import("vue").PropType<(context: {
        e: CompositionEvent;
        value: string;
    }) => void>;
    onEnter: import("vue").PropType<(context: {
        e: KeyboardEvent;
        value: string;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        e: FocusEvent;
        value: string;
    }) => void>;
    onSelect: import("vue").PropType<(value: string, context: {
        e: MouseEvent | KeyboardEvent;
    }) => void>;
}>>, {
    value: string;
    autofocus: boolean;
    disabled: boolean;
    size: import("../common").SizeEnum;
    readonly: boolean;
    status: "error" | "default" | "success" | "warning";
    placeholder: string;
    modelValue: string;
    defaultValue: string;
    clearable: boolean;
    filterable: boolean;
    highlightKeyword: boolean;
}, {}>;
export default _default;
