import { RangeInputValue, RangeInputPosition } from './type';
declare const _default: import("vue").DefineComponent<{
    activeIndex: {
        type: NumberConstructor;
    };
    clearable: BooleanConstructor;
    disabled: BooleanConstructor;
    format: {
        type: import("vue").PropType<import("../input").InputFormatType | import("../input").InputFormatType[]>;
    };
    inputProps: {
        type: import("vue").PropType<import("../input").InputProps<import("../input").InputValue> | import("../input").InputProps<import("../input").InputValue>[]>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    placeholder: {
        type: import("vue").PropType<string | string[]>;
    };
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    separator: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    showClearIconOnEmpty: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<RangeInputValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<RangeInputValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<RangeInputValue>;
        default: () => RangeInputValue;
    };
    onBlur: import("vue").PropType<(value: RangeInputValue, context?: {
        e?: FocusEvent;
        position?: RangeInputPosition;
    }) => void>;
    onChange: import("vue").PropType<(value: RangeInputValue, context?: {
        e?: MouseEvent | CompositionEvent | InputEvent;
        position?: RangeInputPosition;
        trigger?: "input" | "clear" | "initial";
    }) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClick: import("vue").PropType<(context?: {
        e?: MouseEvent;
        position?: RangeInputPosition;
    }) => void>;
    onEnter: import("vue").PropType<(value: RangeInputValue, context?: {
        e?: MouseEvent | InputEvent;
        position?: RangeInputPosition;
    }) => void>;
    onFocus: import("vue").PropType<(value: RangeInputValue, context?: {
        e?: FocusEvent;
        position?: RangeInputPosition;
    }) => void>;
    onMouseenter: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    activeIndex: {
        type: NumberConstructor;
    };
    clearable: BooleanConstructor;
    disabled: BooleanConstructor;
    format: {
        type: import("vue").PropType<import("../input").InputFormatType | import("../input").InputFormatType[]>;
    };
    inputProps: {
        type: import("vue").PropType<import("../input").InputProps<import("../input").InputValue> | import("../input").InputProps<import("../input").InputValue>[]>;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    placeholder: {
        type: import("vue").PropType<string | string[]>;
    };
    prefixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    readonly: BooleanConstructor;
    separator: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    };
    showClearIconOnEmpty: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<RangeInputValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<RangeInputValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<RangeInputValue>;
        default: () => RangeInputValue;
    };
    onBlur: import("vue").PropType<(value: RangeInputValue, context?: {
        e?: FocusEvent;
        position?: RangeInputPosition;
    }) => void>;
    onChange: import("vue").PropType<(value: RangeInputValue, context?: {
        e?: MouseEvent | CompositionEvent | InputEvent;
        position?: RangeInputPosition;
        trigger?: "input" | "clear" | "initial";
    }) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClick: import("vue").PropType<(context?: {
        e?: MouseEvent;
        position?: RangeInputPosition;
    }) => void>;
    onEnter: import("vue").PropType<(value: RangeInputValue, context?: {
        e?: MouseEvent | InputEvent;
        position?: RangeInputPosition;
    }) => void>;
    onFocus: import("vue").PropType<(value: RangeInputValue, context?: {
        e?: FocusEvent;
        position?: RangeInputPosition;
    }) => void>;
    onMouseenter: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}>>, {
    value: RangeInputValue;
    disabled: boolean;
    size: "small" | "medium" | "large";
    readonly: boolean;
    status: "error" | "default" | "success" | "warning";
    separator: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    modelValue: RangeInputValue;
    defaultValue: RangeInputValue;
    clearable: boolean;
    showClearIconOnEmpty: boolean;
}, {}>;
export default _default;
