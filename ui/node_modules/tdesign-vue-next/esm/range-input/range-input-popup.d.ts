declare const _default: import("vue").DefineComponent<{
    autoWidth: BooleanConstructor;
    disabled: BooleanConstructor;
    inputValue: {
        type: import("vue").PropType<import("./type").RangeInputValue>;
        default: any;
    };
    defaultInputValue: {
        type: import("vue").PropType<import("./type").RangeInputValue>;
    };
    panel: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    popupProps: {
        type: import("vue").PropType<import("../popup").TdPopupProps>;
    };
    popupVisible: BooleanConstructor;
    rangeInputProps: {
        type: import("vue").PropType<import("./type").TdRangeInputProps>;
    };
    readonly: BooleanConstructor;
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    onInputChange: import("vue").PropType<(value: import("./type").RangeInputValue, context?: import("./type").RangeInputValueChangeContext) => void>;
    onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("../popup").PopupVisibleChangeContext) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    autoWidth: BooleanConstructor;
    disabled: BooleanConstructor;
    inputValue: {
        type: import("vue").PropType<import("./type").RangeInputValue>;
        default: any;
    };
    defaultInputValue: {
        type: import("vue").PropType<import("./type").RangeInputValue>;
    };
    panel: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    popupProps: {
        type: import("vue").PropType<import("../popup").TdPopupProps>;
    };
    popupVisible: BooleanConstructor;
    rangeInputProps: {
        type: import("vue").PropType<import("./type").TdRangeInputProps>;
    };
    readonly: BooleanConstructor;
    status: {
        type: import("vue").PropType<"error" | "default" | "success" | "warning">;
        default: "error" | "default" | "success" | "warning";
        validator(val: "error" | "default" | "success" | "warning"): boolean;
    };
    tips: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    onInputChange: import("vue").PropType<(value: import("./type").RangeInputValue, context?: import("./type").RangeInputValueChangeContext) => void>;
    onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("../popup").PopupVisibleChangeContext) => void>;
}>>, {
    disabled: boolean;
    readonly: boolean;
    status: "error" | "default" | "success" | "warning";
    autoWidth: boolean;
    inputValue: import("./type").RangeInputValue;
    popupVisible: boolean;
}, {}>;
export default _default;
