import { TdTimelineProps } from './type';
import './style';
export * from './type';
export declare type TimelineProps = TdTimelineProps;
export declare const Timeline: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        labelAlign: {
            type: import("vue").PropType<"alternate" | "left" | "top" | "bottom" | "right">;
            default: "alternate" | "left" | "top" | "bottom" | "right";
            validator(val: "alternate" | "left" | "top" | "bottom" | "right"): boolean;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        mode: {
            type: import("vue").PropType<"alternate" | "same">;
            default: "alternate" | "same";
            validator(val: "alternate" | "same"): boolean;
        };
        reverse: BooleanConstructor;
        theme: {
            type: import("vue").PropType<"default" | "dot">;
            default: "default" | "dot";
            validator(val: "default" | "dot"): boolean;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        labelAlign: {
            type: import("vue").PropType<"alternate" | "left" | "top" | "bottom" | "right">;
            default: "alternate" | "left" | "top" | "bottom" | "right";
            validator(val: "alternate" | "left" | "top" | "bottom" | "right"): boolean;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        mode: {
            type: import("vue").PropType<"alternate" | "same">;
            default: "alternate" | "same";
            validator(val: "alternate" | "same"): boolean;
        };
        reverse: BooleanConstructor;
        theme: {
            type: import("vue").PropType<"default" | "dot">;
            default: "default" | "dot";
            validator(val: "default" | "dot"): boolean;
        };
    }>>, {
        reverse: boolean;
        mode: "alternate" | "same";
        layout: "horizontal" | "vertical";
        theme: "default" | "dot";
        labelAlign: "alternate" | "left" | "top" | "bottom" | "right";
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        labelAlign: {
            type: import("vue").PropType<"alternate" | "left" | "top" | "bottom" | "right">;
            default: "alternate" | "left" | "top" | "bottom" | "right";
            validator(val: "alternate" | "left" | "top" | "bottom" | "right"): boolean;
        };
        layout: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: "horizontal" | "vertical";
            validator(val: "horizontal" | "vertical"): boolean;
        };
        mode: {
            type: import("vue").PropType<"alternate" | "same">;
            default: "alternate" | "same";
            validator(val: "alternate" | "same"): boolean;
        };
        reverse: BooleanConstructor;
        theme: {
            type: import("vue").PropType<"default" | "dot">;
            default: "default" | "dot";
            validator(val: "default" | "dot"): boolean;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        reverse: boolean;
        mode: "alternate" | "same";
        layout: "horizontal" | "vertical";
        theme: "default" | "dot";
        labelAlign: "alternate" | "left" | "top" | "bottom" | "right";
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    labelAlign: {
        type: import("vue").PropType<"alternate" | "left" | "top" | "bottom" | "right">;
        default: "alternate" | "left" | "top" | "bottom" | "right";
        validator(val: "alternate" | "left" | "top" | "bottom" | "right"): boolean;
    };
    layout: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: "horizontal" | "vertical";
        validator(val: "horizontal" | "vertical"): boolean;
    };
    mode: {
        type: import("vue").PropType<"alternate" | "same">;
        default: "alternate" | "same";
        validator(val: "alternate" | "same"): boolean;
    };
    reverse: BooleanConstructor;
    theme: {
        type: import("vue").PropType<"default" | "dot">;
        default: "default" | "dot";
        validator(val: "default" | "dot"): boolean;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    reverse: boolean;
    mode: "alternate" | "same";
    layout: "horizontal" | "vertical";
    theme: "default" | "dot";
    labelAlign: "alternate" | "left" | "top" | "bottom" | "right";
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const TimelineItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        index: {
            type: NumberConstructor;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        dot: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        dotColor: {
            type: import("vue").PropType<string>;
            default: string;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        labelAlign: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
            validator(val: "left" | "top" | "bottom" | "right"): boolean;
        };
        loading: BooleanConstructor;
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
            item: import("./type").TdTimelineItemProps;
        }) => void>;
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        index: {
            type: NumberConstructor;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        dot: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        dotColor: {
            type: import("vue").PropType<string>;
            default: string;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        labelAlign: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
            validator(val: "left" | "top" | "bottom" | "right"): boolean;
        };
        loading: BooleanConstructor;
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
            item: import("./type").TdTimelineItemProps;
        }) => void>;
    }>>, {
        loading: boolean;
        dotColor: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        index: {
            type: NumberConstructor;
        };
        content: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        dot: {
            type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
        };
        dotColor: {
            type: import("vue").PropType<string>;
            default: string;
        };
        label: {
            type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        };
        labelAlign: {
            type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
            validator(val: "left" | "top" | "bottom" | "right"): boolean;
        };
        loading: BooleanConstructor;
        onClick: import("vue").PropType<(context: {
            e: MouseEvent;
            item: import("./type").TdTimelineItemProps;
        }) => void>;
    }>>, () => JSX.Element, {}, {}, {}, {
        loading: boolean;
        dotColor: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    index: {
        type: NumberConstructor;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    dot: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    dotColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    labelAlign: {
        type: import("vue").PropType<"left" | "top" | "bottom" | "right">;
        validator(val: "left" | "top" | "bottom" | "right"): boolean;
    };
    loading: BooleanConstructor;
    onClick: import("vue").PropType<(context: {
        e: MouseEvent;
        item: import("./type").TdTimelineItemProps;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    loading: boolean;
    dotColor: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export default Timeline;
